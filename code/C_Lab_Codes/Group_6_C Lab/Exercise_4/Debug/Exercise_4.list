
Exercise_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002088  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08002228  08002228  00003228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002444  08002444  00004188  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002444  08002444  00003444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800244c  0800244c  00004188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800244c  0800244c  0000344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002450  08002450  00003450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  08002454  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004188  2**0
                  CONTENTS
 10 .bss          0000017c  20000188  20000188  00004188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000304  20000304  00004188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004188  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003782  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e1e  00000000  00000000  0000793a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e0  00000000  00000000  00008758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000230  00000000  00000000  00008a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174a0  00000000  00000000  00008c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000033d3  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007910d  00000000  00000000  000234db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0009c5e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000148c  00000000  00000000  0009c62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  0009dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000188 	.word	0x20000188
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002210 	.word	0x08002210

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000018c 	.word	0x2000018c
 80001dc:	08002210 	.word	0x08002210

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	@ (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	6039      	str	r1, [r7, #0]
 80002f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	db0a      	blt.n	8000316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	b2da      	uxtb	r2, r3
 8000304:	490c      	ldr	r1, [pc, #48]	@ (8000338 <__NVIC_SetPriority+0x4c>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000314:	e00a      	b.n	800032c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4908      	ldr	r1, [pc, #32]	@ (800033c <__NVIC_SetPriority+0x50>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	3b04      	subs	r3, #4
 8000324:	0112      	lsls	r2, r2, #4
 8000326:	b2d2      	uxtb	r2, r2
 8000328:	440b      	add	r3, r1
 800032a:	761a      	strb	r2, [r3, #24]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000e100 	.word	0xe000e100
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <enableGPIOClocks>:


// ---------- CLOCK ENABLE ----------


void enableGPIOClocks() {
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN; // Enable GPIO A, C, and E
 8000344:	4b05      	ldr	r3, [pc, #20]	@ (800035c <enableGPIOClocks+0x1c>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a04      	ldr	r2, [pc, #16]	@ (800035c <enableGPIOClocks+0x1c>)
 800034a:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 800034e:	6153      	str	r3, [r2, #20]
	return;
 8000350:	bf00      	nop
}
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <enableGPIOAButton>:


// ---------- GPIO CONFIG ----------


void enableGPIOAButton() {
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(0x3 << (0 * 2));
 8000364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800036e:	f023 0303 	bic.w	r3, r3, #3
 8000372:	6013      	str	r3, [r2, #0]
	return;
 8000374:	bf00      	nop
}
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
	...

08000380 <enableGPIOELEDS>:

void enableGPIOELEDS() {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
	uint16_t *MODER = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000386:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <enableGPIOELEDS+0x20>)
 8000388:	607b      	str	r3, [r7, #4]
	*MODER = 0x5555;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000390:	801a      	strh	r2, [r3, #0]
	return;
 8000392:	bf00      	nop
}
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	48001002 	.word	0x48001002

080003a4 <setLEDState>:

// ---------- SPECIFIC GPIO CONFIG ----------

// > LED ACCESS <

void setLEDState(uint8_t led_mask) {
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	71fb      	strb	r3, [r7, #7]
	uint8_t *ODR = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80003ae:	4b05      	ldr	r3, [pc, #20]	@ (80003c4 <setLEDState+0x20>)
 80003b0:	60fb      	str	r3, [r7, #12]
	*ODR = led_mask;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	79fa      	ldrb	r2, [r7, #7]
 80003b6:	701a      	strb	r2, [r3, #0]
	return;
 80003b8:	bf00      	nop
}
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	48001015 	.word	0x48001015

080003c8 <getLEDState>:

uint8_t getLEDState() {
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
	uint8_t ODR = *(((uint8_t*)&(GPIOE->ODR)) + 1);
 80003ce:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <getLEDState+0x1c>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	71fb      	strb	r3, [r7, #7]
	return ODR;
 80003d4:	79fb      	ldrb	r3, [r7, #7]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	48001015 	.word	0x48001015

080003e8 <setButtonCallback>:

void setButtonCallback(void (*cb)(void)) {
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	onButtonPress = cb;
 80003f0:	4a04      	ldr	r2, [pc, #16]	@ (8000404 <setButtonCallback+0x1c>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6013      	str	r3, [r2, #0]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	200001a4 	.word	0x200001a4

08000408 <enableButtonInterrupt>:

// ---------- INTERUPT ENABLE ----------

void enableButtonInterrupt() {
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800040c:	b672      	cpsid	i
}
 800040e:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	__disable_irq();

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // Enable the system configuration controller (SYSCFG in RCC)
 8000410:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <enableButtonInterrupt+0x48>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <enableButtonInterrupt+0x48>)
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	6193      	str	r3, [r2, #24]
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA; /*
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <enableButtonInterrupt+0x4c>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
	* External Interrupts details on large manual page 294)
	* PA0 is on interrupt EXTI0 large manual - page 250
	* EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
	*/
	EXTI->RTSR |= EXTI_RTSR_TR0; // Select EXTI0 interrupt on rising edge
 8000422:	4b0d      	ldr	r3, [pc, #52]	@ (8000458 <enableButtonInterrupt+0x50>)
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	4a0c      	ldr	r2, [pc, #48]	@ (8000458 <enableButtonInterrupt+0x50>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0; // set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
 800042e:	4b0a      	ldr	r3, [pc, #40]	@ (8000458 <enableButtonInterrupt+0x50>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a09      	ldr	r2, [pc, #36]	@ (8000458 <enableButtonInterrupt+0x50>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(EXTI0_IRQn, BUTTONPRIORITY); // Set Priority
 800043a:	2101      	movs	r1, #1
 800043c:	2006      	movs	r0, #6
 800043e:	f7ff ff55 	bl	80002ec <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn); // Tell the NVIC module that EXTI0 interrupts should be handled
 8000442:	2006      	movs	r0, #6
 8000444:	f7ff ff34 	bl	80002b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000448:	b662      	cpsie	i
}
 800044a:	bf00      	nop

	__enable_irq(); // Re-enable all interrupts (now that we are finished)
	return;
 800044c:	bf00      	nop
}
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000
 8000458:	40010400 	.word	0x40010400

0800045c <EXTI0_IRQHandler>:

// ---------- INTERUPT HANDLER ----------

void EXTI0_IRQHandler() {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	// run the button press handler (make sure it is not null first !)
	if (onButtonPress) {
 8000460:	4b07      	ldr	r3, [pc, #28]	@ (8000480 <EXTI0_IRQHandler+0x24>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d002      	beq.n	800046e <EXTI0_IRQHandler+0x12>
		onButtonPress();
 8000468:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <EXTI0_IRQHandler+0x24>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4798      	blx	r3
	}

	EXTI->PR |= EXTI_PR_PR0; // reset the interrupt
 800046e:	4b05      	ldr	r3, [pc, #20]	@ (8000484 <EXTI0_IRQHandler+0x28>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a04      	ldr	r2, [pc, #16]	@ (8000484 <EXTI0_IRQHandler+0x28>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6153      	str	r3, [r2, #20]
	return;
 800047a:	bf00      	nop
}
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200001a4 	.word	0x200001a4
 8000484:	40010400 	.word	0x40010400

08000488 <chaseLed>:

// ---------- MISC ----------

void chaseLed(){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
	uint8_t led_register = getLEDState();
 800048e:	f7ff ff9b 	bl	80003c8 <getLEDState>
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]

	/* If nothing lit, seed the pattern with the lowest LED */
	if (led_register == 0) led_register = 0x01;
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d101      	bne.n	80004a0 <chaseLed+0x18>
 800049c:	2301      	movs	r3, #1
 800049e:	71fb      	strb	r3, [r7, #7]

	/* Rotate the entire pattern one step to the left */
	led_register = (led_register << 1) | (led_register >> 7);
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	b25a      	sxtb	r2, r3
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	09db      	lsrs	r3, r3, #7
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	4313      	orrs	r3, r2
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	71fb      	strb	r3, [r7, #7]

	/* Write the new pattern to the LED driver */
	setLEDState(led_register);
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff73 	bl	80003a4 <setLEDState>
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <init_main>:


// ---------- MAJOR INIT ----------


void init_main(void (*cb)(void)) {
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b082      	sub	sp, #8
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
	enableGPIOClocks();
 80004ce:	f7ff ff37 	bl	8000340 <enableGPIOClocks>
	enableGPIOAButton();
 80004d2:	f7ff ff45 	bl	8000360 <enableGPIOAButton>
	enableGPIOELEDS();
 80004d6:	f7ff ff53 	bl	8000380 <enableGPIOELEDS>
	enableButtonInterrupt();
 80004da:	f7ff ff95 	bl	8000408 <enableButtonInterrupt>
	EXTI0_IRQHandler();
 80004de:	f7ff ffbd 	bl	800045c <EXTI0_IRQHandler>
	setButtonCallback(cb);
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f7ff ff80 	bl	80003e8 <setButtonCallback>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <commandParser>:
#include "integration.h"


void commandParser(SerialPort *serial_port){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0a6      	sub	sp, #152	@ 0x98
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

	char command_line[BUFFER_SIZE];
	strcpy(command_line, (char*) serial_port->buffer[serial_port->receiving]);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	01db      	lsls	r3, r3, #7
 8000502:	3328      	adds	r3, #40	@ 0x28
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	441a      	add	r2, r3
 8000508:	f107 0308 	add.w	r3, r7, #8
 800050c:	4611      	mov	r1, r2
 800050e:	4618      	mov	r0, r3
 8000510:	f000 ffcd 	bl	80014ae <strcpy>
	char *command = strtok(command_line, " ");
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	4960      	ldr	r1, [pc, #384]	@ (800069c <commandParser+0x1ac>)
 800051a:	4618      	mov	r0, r3
 800051c:	f000 ff3e 	bl	800139c <strtok>
 8000520:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	char *line = strtok(NULL, "");
 8000524:	495e      	ldr	r1, [pc, #376]	@ (80006a0 <commandParser+0x1b0>)
 8000526:	2000      	movs	r0, #0
 8000528:	f000 ff38 	bl	800139c <strtok>
 800052c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c


	if (strcmp(command, "led") == 0) {
 8000530:	495c      	ldr	r1, [pc, #368]	@ (80006a4 <commandParser+0x1b4>)
 8000532:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000536:	f7ff fe53 	bl	80001e0 <strcmp>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d13f      	bne.n	80005c0 <commandParser+0xd0>
		if (!isNumeric(line) || strlen(line) != 8){
 8000540:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000544:	f000 f8be 	bl	80006c4 <isNumeric>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d006      	beq.n	800055c <commandParser+0x6c>
 800054e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000552:	f7ff fe4f 	bl	80001f4 <strlen>
 8000556:	4603      	mov	r3, r0
 8000558:	2b08      	cmp	r3, #8
 800055a:	d004      	beq.n	8000566 <commandParser+0x76>
			transmitString((uint8_t *)"Invalid Input!\r\n", serial_port);
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	4852      	ldr	r0, [pc, #328]	@ (80006a8 <commandParser+0x1b8>)
 8000560:	f000 f9d4 	bl	800090c <transmitString>
			return;
 8000564:	e097      	b.n	8000696 <commandParser+0x1a6>
		}

		for (int i = 0; i < 8; i++){
 8000566:	2300      	movs	r3, #0
 8000568:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800056c:	e015      	b.n	800059a <commandParser+0xaa>
			if (line[i] != '0' && line[i] != '1') return;
 800056e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000572:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000576:	4413      	add	r3, r2
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b30      	cmp	r3, #48	@ 0x30
 800057c:	d008      	beq.n	8000590 <commandParser+0xa0>
 800057e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000582:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b31      	cmp	r3, #49	@ 0x31
 800058c:	f040 8082 	bne.w	8000694 <commandParser+0x1a4>
		for (int i = 0; i < 8; i++){
 8000590:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000594:	3301      	adds	r3, #1
 8000596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800059a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800059e:	2b07      	cmp	r3, #7
 80005a0:	dde5      	ble.n	800056e <commandParser+0x7e>
		}

		uint8_t pattern = strtol(line, NULL, 2);
 80005a2:	2202      	movs	r2, #2
 80005a4:	2100      	movs	r1, #0
 80005a6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80005aa:	f000 fec7 	bl	800133c <strtol>
 80005ae:	4603      	mov	r3, r0
 80005b0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		setLEDState(pattern);
 80005b4:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fef3 	bl	80003a4 <setLEDState>
 80005be:	e064      	b.n	800068a <commandParser+0x19a>

	} else if (strcmp(command, "serial") == 0) {
 80005c0:	493a      	ldr	r1, [pc, #232]	@ (80006ac <commandParser+0x1bc>)
 80005c2:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80005c6:	f7ff fe0b 	bl	80001e0 <strcmp>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d109      	bne.n	80005e4 <commandParser+0xf4>

		transmitString((uint8_t *)"\r\n", serial_port);
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	4837      	ldr	r0, [pc, #220]	@ (80006b0 <commandParser+0x1c0>)
 80005d4:	f000 f99a 	bl	800090c <transmitString>
		transmitString((uint8_t *)line, serial_port);
 80005d8:	6879      	ldr	r1, [r7, #4]
 80005da:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80005de:	f000 f995 	bl	800090c <transmitString>
 80005e2:	e052      	b.n	800068a <commandParser+0x19a>

	} else if (strcmp(command, "oneshot") == 0) {
 80005e4:	4933      	ldr	r1, [pc, #204]	@ (80006b4 <commandParser+0x1c4>)
 80005e6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80005ea:	f7ff fdf9 	bl	80001e0 <strcmp>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d115      	bne.n	8000620 <commandParser+0x130>

		if (!isNumeric(line)) {
 80005f4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80005f8:	f000 f864 	bl	80006c4 <isNumeric>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d104      	bne.n	800060c <commandParser+0x11c>
			transmitString((uint8_t *)"Invalid Input!\r\n", serial_port);
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4828      	ldr	r0, [pc, #160]	@ (80006a8 <commandParser+0x1b8>)
 8000606:	f000 f981 	bl	800090c <transmitString>
			return;
 800060a:	e044      	b.n	8000696 <commandParser+0x1a6>
		}

		startOneShotTIM3((uint32_t)atoi(line), &invertLEDs);
 800060c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000610:	f000 fd71 	bl	80010f6 <atoi>
 8000614:	4603      	mov	r3, r0
 8000616:	4928      	ldr	r1, [pc, #160]	@ (80006b8 <commandParser+0x1c8>)
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fc7f 	bl	8000f1c <startOneShotTIM3>
 800061e:	e034      	b.n	800068a <commandParser+0x19a>

	} else if (strcmp(command, "timer") == 0) {
 8000620:	4926      	ldr	r1, [pc, #152]	@ (80006bc <commandParser+0x1cc>)
 8000622:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8000626:	f7ff fddb 	bl	80001e0 <strcmp>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d127      	bne.n	8000680 <commandParser+0x190>

		if (!isNumeric(line)) {
 8000630:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8000634:	f000 f846 	bl	80006c4 <isNumeric>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d104      	bne.n	8000648 <commandParser+0x158>
			transmitString((uint8_t *)"Invalid Input!\r\n", serial_port);
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	4819      	ldr	r0, [pc, #100]	@ (80006a8 <commandParser+0x1b8>)
 8000642:	f000 f963 	bl	800090c <transmitString>
			return;
 8000646:	e026      	b.n	8000696 <commandParser+0x1a6>
		}

		// resets reather than initiialise:
		if (TIM2->CR1 & TIM_CR1_CEN) {
 8000648:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d008      	beq.n	8000668 <commandParser+0x178>
			resetTIM2((uint32_t)atoi(line));
 8000656:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800065a:	f000 fd4c 	bl	80010f6 <atoi>
 800065e:	4603      	mov	r3, r0
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fc3b 	bl	8000edc <resetTIM2>
 8000666:	e010      	b.n	800068a <commandParser+0x19a>
		} else {
			initialiseTIM2((uint32_t)atoi(line));
 8000668:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800066c:	f000 fd43 	bl	80010f6 <atoi>
 8000670:	4603      	mov	r3, r0
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fbe2 	bl	8000e3c <initialiseTIM2>
			setTIM2callback(&chaseLed);
 8000678:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <commandParser+0x1d0>)
 800067a:	f000 fc1f 	bl	8000ebc <setTIM2callback>
 800067e:	e004      	b.n	800068a <commandParser+0x19a>
		}

	} else {

		transmitString((uint8_t *)"Invalid Input!\r\n", serial_port);
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	4809      	ldr	r0, [pc, #36]	@ (80006a8 <commandParser+0x1b8>)
 8000684:	f000 f942 	bl	800090c <transmitString>
		return;
 8000688:	e005      	b.n	8000696 <commandParser+0x1a6>

	}
	transmitString((uint8_t *)"\r\n", serial_port);
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	4808      	ldr	r0, [pc, #32]	@ (80006b0 <commandParser+0x1c0>)
 800068e:	f000 f93d 	bl	800090c <transmitString>
 8000692:	e000      	b.n	8000696 <commandParser+0x1a6>
			if (line[i] != '0' && line[i] != '1') return;
 8000694:	bf00      	nop
}
 8000696:	3798      	adds	r7, #152	@ 0x98
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08002228 	.word	0x08002228
 80006a0:	0800222c 	.word	0x0800222c
 80006a4:	08002230 	.word	0x08002230
 80006a8:	08002234 	.word	0x08002234
 80006ac:	08002248 	.word	0x08002248
 80006b0:	08002250 	.word	0x08002250
 80006b4:	08002254 	.word	0x08002254
 80006b8:	0800108d 	.word	0x0800108d
 80006bc:	0800225c 	.word	0x0800225c
 80006c0:	08000489 	.word	0x08000489

080006c4 <isNumeric>:

uint8_t isNumeric(const char *str) {
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    if (str == NULL || *str == '\0') return 0; // empty or NULL
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d003      	beq.n	80006da <isNumeric+0x16>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d101      	bne.n	80006de <isNumeric+0x1a>
 80006da:	2300      	movs	r3, #0
 80006dc:	e01a      	b.n	8000714 <isNumeric+0x50>

    for (int i = 0; str[i] != '\0'; i++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e010      	b.n	8000706 <isNumeric+0x42>
        if (!isdigit((unsigned char)str[i])) {
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000720 <isNumeric+0x5c>)
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <isNumeric+0x3c>
            return 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e009      	b.n	8000714 <isNumeric+0x50>
    for (int i = 0; str[i] != '\0'; i++) {
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3301      	adds	r3, #1
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	4413      	add	r3, r2
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1e8      	bne.n	80006e4 <isNumeric+0x20>
        }
    }
    return 1;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	08002342 	.word	0x08002342

08000724 <main>:
#include "gpio.h"
#include "integration.h"


int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	// EXERCISE 4 -----

	init_main(0x00);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff fecc 	bl	80004c6 <init_main>
	enableTIMERClocks();
 800072e:	f000 fb75 	bl	8000e1c <enableTIMERClocks>
	enableTimerInterrupt();
 8000732:	f000 fc4d 	bl	8000fd0 <enableTimerInterrupt>
	TIM2_IRQHandler();
 8000736:	f000 fc63 	bl	8001000 <TIM2_IRQHandler>
	SerialInitialise(BAUD_115200, &USART1_PORT, &commandParser);
 800073a:	4a05      	ldr	r2, [pc, #20]	@ (8000750 <main+0x2c>)
 800073c:	4905      	ldr	r1, [pc, #20]	@ (8000754 <main+0x30>)
 800073e:	2004      	movs	r0, #4
 8000740:	f000 f852 	bl	80007e8 <SerialInitialise>
	serialReceiveInterrupt(&USART1_PORT);
 8000744:	4803      	ldr	r0, [pc, #12]	@ (8000754 <main+0x30>)
 8000746:	f000 f903 	bl	8000950 <serialReceiveInterrupt>
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	bd80      	pop	{r7, pc}
 8000750:	080004f1 	.word	0x080004f1
 8000754:	20000000 	.word	0x20000000

08000758 <__NVIC_EnableIRQ>:
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	db0b      	blt.n	8000782 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f003 021f 	and.w	r2, r3, #31
 8000770:	4907      	ldr	r1, [pc, #28]	@ (8000790 <__NVIC_EnableIRQ+0x38>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	095b      	lsrs	r3, r3, #5
 8000778:	2001      	movs	r0, #1
 800077a:	fa00 f202 	lsl.w	r2, r0, r2
 800077e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000e100 	.word	0xe000e100

08000794 <__NVIC_SetPriority>:
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db0a      	blt.n	80007be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	490c      	ldr	r1, [pc, #48]	@ (80007e0 <__NVIC_SetPriority+0x4c>)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	0112      	lsls	r2, r2, #4
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	440b      	add	r3, r1
 80007b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80007bc:	e00a      	b.n	80007d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4908      	ldr	r1, [pc, #32]	@ (80007e4 <__NVIC_SetPriority+0x50>)
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	3b04      	subs	r3, #4
 80007cc:	0112      	lsls	r2, r2, #4
 80007ce:	b2d2      	uxtb	r2, r2
 80007d0:	440b      	add	r3, r1
 80007d2:	761a      	strb	r2, [r3, #24]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	e000e100 	.word	0xe000e100
 80007e4:	e000ed00 	.word	0xe000ed00

080007e8 <SerialInitialise>:
};


// ---------- INITIALISATIONS ----------

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, callback_t callback) {
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80007f4:	4b44      	ldr	r3, [pc, #272]	@ (8000908 <SerialInitialise+0x120>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	4a43      	ldr	r2, [pc, #268]	@ (8000908 <SerialInitialise+0x120>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000800:	4b41      	ldr	r3, [pc, #260]	@ (8000908 <SerialInitialise+0x120>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a40      	ldr	r2, [pc, #256]	@ (8000908 <SerialInitialise+0x120>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	6193      	str	r3, [r2, #24]
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	691a      	ldr	r2, [r3, #16]
 8000810:	4b3d      	ldr	r3, [pc, #244]	@ (8000908 <SerialInitialise+0x120>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	493c      	ldr	r1, [pc, #240]	@ (8000908 <SerialInitialise+0x120>)
 8000816:	4313      	orrs	r3, r2
 8000818:	614b      	str	r3, [r1, #20]
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	6952      	ldr	r2, [r2, #20]
 8000822:	601a      	str	r2, [r3, #0]
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	6992      	ldr	r2, [r2, #24]
 800082c:	609a      	str	r2, [r3, #8]
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	69d9      	ldr	r1, [r3, #28]
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	6a1a      	ldr	r2, [r3, #32]
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	430a      	orrs	r2, r1
 800083e:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	6a19      	ldr	r1, [r3, #32]
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	430a      	orrs	r2, r1
 8000850:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	68da      	ldr	r2, [r3, #12]
 8000856:	4b2c      	ldr	r3, [pc, #176]	@ (8000908 <SerialInitialise+0x120>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	492b      	ldr	r1, [pc, #172]	@ (8000908 <SerialInitialise+0x120>)
 800085c:	4313      	orrs	r3, r2
 800085e:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	689a      	ldr	r2, [r3, #8]
 8000864:	4b28      	ldr	r3, [pc, #160]	@ (8000908 <SerialInitialise+0x120>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4927      	ldr	r1, [pc, #156]	@ (8000908 <SerialInitialise+0x120>)
 800086a:	4313      	orrs	r3, r2
 800086c:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	330c      	adds	r3, #12
 8000874:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2b04      	cmp	r3, #4
 800087a:	d823      	bhi.n	80008c4 <SerialInitialise+0xdc>
 800087c:	a201      	add	r2, pc, #4	@ (adr r2, 8000884 <SerialInitialise+0x9c>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	08000899 	.word	0x08000899
 8000888:	080008a3 	.word	0x080008a3
 800088c:	080008ad 	.word	0x080008ad
 8000890:	080008b5 	.word	0x080008b5
 8000894:	080008bd 	.word	0x080008bd
	case BAUD_9600:
		*baud_rate_config = 0x341;  // 9600 at 8MHz
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	f240 3241 	movw	r2, #833	@ 0x341
 800089e:	801a      	strh	r2, [r3, #0]
		break;
 80008a0:	e010      	b.n	80008c4 <SerialInitialise+0xdc>
	case BAUD_19200:
		*baud_rate_config = 0x1A1;  // 19200 at 8MHz
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80008a8:	801a      	strh	r2, [r3, #0]
		break;
 80008aa:	e00b      	b.n	80008c4 <SerialInitialise+0xdc>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	22d0      	movs	r2, #208	@ 0xd0
 80008b0:	801a      	strh	r2, [r3, #0]
		break;
 80008b2:	e007      	b.n	80008c4 <SerialInitialise+0xdc>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	228b      	movs	r2, #139	@ 0x8b
 80008b8:	801a      	strh	r2, [r3, #0]
		break;
 80008ba:	e003      	b.n	80008c4 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	2246      	movs	r2, #70	@ 0x46
 80008c0:	801a      	strh	r2, [r3, #0]
		break;
 80008c2:	bf00      	nop
	}

	serial_port->callback_function = callback;
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24

	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f042 020d 	orr.w	r2, r2, #13
 80008d8:	601a      	str	r2, [r3, #0]

	serial_port->tx_idx = 0;
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2200      	movs	r2, #0
 80008de:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	serial_port->buf_len[0] = 0;
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
	serial_port->buf_len[1] = 0;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
	serial_port->receiving = 0;
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
}
 80008fa:	bf00      	nop
 80008fc:	371c      	adds	r7, #28
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <transmitString>:

// TRANSMIT STRING

// SerialOutputString - output a NULL TERMINATED string to the serial port
// Input: pointer to a NULL-TERMINATED string (if not null terminated, there will be problems)
void transmitString(uint8_t *buffer, SerialPort *serial_port) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	// while the buffer is not empty
	while(*buffer) {
 8000916:	e00f      	b.n	8000938 <transmitString+0x2c>
		// print out the character of the buffer pointer to the serial port
		while((serial_port->UART->ISR & USART_ISR_TXE) == 0) { }
 8000918:	bf00      	nop
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0f8      	beq.n	800091a <transmitString+0xe>

		serial_port->UART->TDR = *buffer;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	851a      	strh	r2, [r3, #40]	@ 0x28
		buffer++;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
	while(*buffer) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1eb      	bne.n	8000918 <transmitString+0xc>
	}
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <serialReceiveInterrupt>:
// ---------- INTERRUPT INITIALISATION ----------


// SerialEnableInterrupt - initialising interrupt for the given UART line and initialise the callback function
// inputs: serial port pointer, callback function pointer
void serialReceiveInterrupt(SerialPort *serial_port){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
	__disable_irq();

	// Enable RXNE interrupt
	serial_port->UART -> CR1 |= USART_CR1_RXNEIE;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f042 0220 	orr.w	r2, r2, #32
 800096a:	601a      	str	r2, [r3, #0]

	// Enable NVIC interrupt for USART1
	if (serial_port->UART == USART1){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <serialReceiveInterrupt+0x40>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d106      	bne.n	8000984 <serialReceiveInterrupt+0x34>
		// Tell the NVIC module that USART1 interrupts should be handled
		NVIC_SetPriority(USART1_IRQn, USART1PRIORITY);  // Set Priority
 8000976:	2103      	movs	r1, #3
 8000978:	2025      	movs	r0, #37	@ 0x25
 800097a:	f7ff ff0b 	bl	8000794 <__NVIC_SetPriority>
		NVIC_EnableIRQ(USART1_IRQn);
 800097e:	2025      	movs	r0, #37	@ 0x25
 8000980:	f7ff feea 	bl	8000758 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000984:	b662      	cpsie	i
}
 8000986:	bf00      	nop
	}

	__enable_irq();

}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40013800 	.word	0x40013800

08000994 <USART1_EXTI25_IRQHandler>:

// USART1_EXTI25_IRQHandler - interrupt handler function that calls the customized SerialReceiveIRQHandler function for the USART1 port
// DO NOT CHANGE THE FUNCTION NAME
// inputs: none
void USART1_EXTI25_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
    SerialPort *serial_port = &USART1_PORT;
 800099a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <USART1_EXTI25_IRQHandler+0x84>)
 800099c:	607b      	str	r3, [r7, #4]

    // -------- transmit path: TXE

    if ((serial_port->UART->ISR & USART_ISR_TXE) && (serial_port->UART->CR1 & USART_CR1_TXEIE)) {
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d009      	beq.n	80009c0 <USART1_EXTI25_IRQHandler+0x2c>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <USART1_EXTI25_IRQHandler+0x2c>
    	serialTransmitIRQHandler(serial_port);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 f8b1 	bl	8000b22 <serialTransmitIRQHandler>
    }

    // -------- transmit path: TC

    if ((serial_port->UART->ISR & USART_ISR_TC) && (serial_port->UART->CR1 & USART_CR1_TCIE)) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00e      	beq.n	80009ec <USART1_EXTI25_IRQHandler+0x58>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d007      	beq.n	80009ec <USART1_EXTI25_IRQHandler+0x58>
    	serial_port->UART->CR1 &= ~USART_CR1_TCIE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80009ea:	601a      	str	r2, [r3, #0]
        // NOTHING TO BE DONE
    }

    // -------- receive path: RXNE

    if ((serial_port->UART->ISR & USART_ISR_RXNE) && (serial_port->UART->CR1 & USART_CR1_RXNEIE)) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d009      	beq.n	8000a0e <USART1_EXTI25_IRQHandler+0x7a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f003 0320 	and.w	r3, r3, #32
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <USART1_EXTI25_IRQHandler+0x7a>
    	SerialReceiveIRQHandler(serial_port);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f000 f807 	bl	8000a1c <SerialReceiveIRQHandler>
    }
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000000 	.word	0x20000000

08000a1c <SerialReceiveIRQHandler>:

// SerialReceiveIRQHandler - store the incoming characters to the rx buffer until termination character or buffer limit reached
// Input: serial port pointer
void SerialReceiveIRQHandler(SerialPort *serial_port) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	uint8_t ch = serial_port->UART->RDR;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	73fb      	strb	r3, [r7, #15]

	if (ch == TERMINATION_CR || ch == TERMINATION_LF) {
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	2b0d      	cmp	r3, #13
 8000a32:	d002      	beq.n	8000a3a <SerialReceiveIRQHandler+0x1e>
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	2b0a      	cmp	r3, #10
 8000a38:	d142      	bne.n	8000ac0 <SerialReceiveIRQHandler+0xa4>

		uint8_t rx = serial_port->receiving;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8000a40:	737b      	strb	r3, [r7, #13]
		serial_port->buffer[rx][serial_port->buf_len[rx]] = '\0';
 8000a42:	7b7b      	ldrb	r3, [r7, #13]
 8000a44:	7b7a      	ldrb	r2, [r7, #13]
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	440a      	add	r2, r1
 8000a4a:	f892 2128 	ldrb.w	r2, [r2, #296]	@ 0x128
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	4611      	mov	r1, r2
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	01db      	lsls	r3, r3, #7
 8000a56:	4413      	add	r3, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	3328      	adds	r3, #40	@ 0x28
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]

		if (serial_port->callback_function) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <SerialReceiveIRQHandler+0x54>
			serial_port->callback_function(serial_port);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	4798      	blx	r3
		}

		serial_port->receiving ^= 1;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	f083 0301 	eor.w	r3, r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
		serial_port->buf_len[serial_port->receiving] = 0;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
		serial_port->tx_idx = 0;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b

		if (serial_port->UART->CR1 & USART_CR1_TCIE){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d034      	beq.n	8000b18 <SerialReceiveIRQHandler+0xfc>
			serial_port->UART->CR1 |= USART_CR1_TXEIE;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000abc:	601a      	str	r2, [r3, #0]
	if (ch == TERMINATION_CR || ch == TERMINATION_LF) {
 8000abe:	e02b      	b.n	8000b18 <SerialReceiveIRQHandler+0xfc>
		}

	} else if (serial_port->buf_len[serial_port->receiving] < BUFFER_SIZE - 1) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b7e      	cmp	r3, #126	@ 0x7e
 8000ad6:	d820      	bhi.n	8000b1a <SerialReceiveIRQHandler+0xfe>

		uint8_t index = serial_port->buf_len[serial_port->receiving]++;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	1c59      	adds	r1, r3, #1
 8000aee:	b2c8      	uxtb	r0, r1
 8000af0:	6879      	ldr	r1, [r7, #4]
 8000af2:	440a      	add	r2, r1
 8000af4:	4601      	mov	r1, r0
 8000af6:	f882 1128 	strb.w	r1, [r2, #296]	@ 0x128
 8000afa:	73bb      	strb	r3, [r7, #14]
		serial_port->buffer[serial_port->receiving][index] = ch;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	01d2      	lsls	r2, r2, #7
 8000b0c:	440a      	add	r2, r1
 8000b0e:	4413      	add	r3, r2
 8000b10:	3328      	adds	r3, #40	@ 0x28
 8000b12:	7bfa      	ldrb	r2, [r7, #15]
 8000b14:	701a      	strb	r2, [r3, #0]
	}
}
 8000b16:	e000      	b.n	8000b1a <SerialReceiveIRQHandler+0xfe>
	if (ch == TERMINATION_CR || ch == TERMINATION_LF) {
 8000b18:	bf00      	nop
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <serialTransmitIRQHandler>:


void serialTransmitIRQHandler(SerialPort *serial_port) {
 8000b22:	b480      	push	{r7}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	uint8_t txbuf = serial_port->receiving ^ 1;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f083 0301 	eor.w	r3, r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]

	if (serial_port->tx_idx < serial_port->buf_len[txbuf]) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	440b      	add	r3, r1
 8000b46:	f893 3128 	ldrb.w	r3, [r3, #296]	@ 0x128
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d218      	bcs.n	8000b82 <serialTransmitIRQHandler+0x60>
			serial_port->UART->TDR = serial_port->buffer[txbuf][serial_port->tx_idx];
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	f892 212b 	ldrb.w	r2, [r2, #299]	@ 0x12b
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	01db      	lsls	r3, r3, #7
 8000b60:	4413      	add	r3, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	3328      	adds	r3, #40	@ 0x28
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
			serial_port->tx_idx++;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	3301      	adds	r3, #1
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
		serial_port->UART->CR1 &= ~USART_CR1_TXEIE;
		serial_port->UART->CR1 |=  USART_CR1_TCIE;
		serial_port->buf_len[txbuf] = 0;
		serial_port->tx_idx = 0;
	}
}
 8000b80:	e019      	b.n	8000bb6 <serialTransmitIRQHandler+0x94>
		serial_port->UART->CR1 &= ~USART_CR1_TXEIE;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b90:	601a      	str	r2, [r3, #0]
		serial_port->UART->CR1 |=  USART_CR1_TCIE;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ba0:	601a      	str	r2, [r3, #0]
		serial_port->buf_len[txbuf] = 0;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
		serial_port->tx_idx = 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  return 1;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_kill>:

int _kill(int pid, int sig)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bdc:	f000 fc3a 	bl	8001454 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2216      	movs	r2, #22
 8000be4:	601a      	str	r2, [r3, #0]
  return -1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_exit>:

void _exit (int status)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000bfa:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffe7 	bl	8000bd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <_exit+0x12>

08000c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	e00a      	b.n	8000c30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c1a:	f3af 8000 	nop.w
 8000c1e:	4601      	mov	r1, r0
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	60ba      	str	r2, [r7, #8]
 8000c26:	b2ca      	uxtb	r2, r1
 8000c28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dbf0      	blt.n	8000c1a <_read+0x12>
  }

  return len;
 8000c38:	687b      	ldr	r3, [r7, #4]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e009      	b.n	8000c68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	3301      	adds	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697a      	ldr	r2, [r7, #20]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	dbf1      	blt.n	8000c54 <_write+0x12>
  }
  return len;
 8000c70:	687b      	ldr	r3, [r7, #4]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_close>:

int _close(int file)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_isatty>:

int _isatty(int file)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cec:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <_sbrk+0x5c>)
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <_sbrk+0x60>)
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <_sbrk+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <_sbrk+0x64>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	@ (8000d4c <_sbrk+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d207      	bcs.n	8000d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d14:	f000 fb9e 	bl	8001454 <__errno>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d22:	e009      	b.n	8000d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <_sbrk+0x64>)
 8000d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2000a000 	.word	0x2000a000
 8000d44:	00000400 	.word	0x00000400
 8000d48:	200001a8 	.word	0x200001a8
 8000d4c:	20000308 	.word	0x20000308

08000d50 <__NVIC_EnableIRQ>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0b      	blt.n	8000d7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	4907      	ldr	r1, [pc, #28]	@ (8000d88 <__NVIC_EnableIRQ+0x38>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_ClearPendingIRQ>:
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0c      	blt.n	8000db8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	@ (8000dc4 <__NVIC_ClearPendingIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	3360      	adds	r3, #96	@ 0x60
 8000db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <enableTIMERClocks>:
void (*TIM2HandlerFunction)() = 0x00;
void (*TIM3HandlerFunction)() = 0x00;

// ---------- CLOCK ENABLE ----------

void enableTIMERClocks() {
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Enale clock to timer 2
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <enableTIMERClocks+0x1c>)
 8000e22:	69db      	ldr	r3, [r3, #28]
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <enableTIMERClocks+0x1c>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	61d3      	str	r3, [r2, #28]
	// RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // Enable  system configuration controller for interrupts
	return;
 8000e2c:	bf00      	nop
}
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <initialiseTIM2>:

// ---------- INITIALISE TIMERS ----------

void initialiseTIM2(uint32_t ms){
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
    TIM2_CURRENT_MS = ms;
 8000e44:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <initialiseTIM2+0x78>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]

    TIM2->CR1 &= ~TIM_CR1_CEN; // Stop timer before configuring
 8000e4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e54:	f023 0301 	bic.w	r3, r3, #1
 8000e58:	6013      	str	r3, [r2, #0]

    TIM2->PSC = CLOCKSPEED / 1000 - 1;
 8000e5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e5e:	4a16      	ldr	r2, [pc, #88]	@ (8000eb8 <initialiseTIM2+0x7c>)
 8000e60:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = (ms != 1 ? ms - 1: 1);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d002      	beq.n	8000e6e <initialiseTIM2+0x32>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <initialiseTIM2+0x34>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CNT = 0;
 8000e76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	@ 0x24

    TIM2->EGR = TIM_EGR_UG; // Load ARR/PSC immediately
 8000e7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e82:	2201      	movs	r2, #1
 8000e84:	615a      	str	r2, [r3, #20]
    TIM2->SR = 0;           // Clear flags
 8000e86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]

    if (ms > 0) {
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d008      	beq.n	8000ea6 <initialiseTIM2+0x6a>
    	TIM2->CR1 |= TIM_CR1_CEN;
 8000e94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]
    }


    return;
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
}
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200001ac 	.word	0x200001ac
 8000eb8:	0001193f 	.word	0x0001193f

08000ebc <setTIM2callback>:


void setTIM2callback(void (*callback)(void)) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    TIM2HandlerFunction = callback;
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <setTIM2callback+0x1c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
    return;
 8000eca:	bf00      	nop
}
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200001b0 	.word	0x200001b0

08000edc <resetTIM2>:
	if (TIM2) {
		TIM2->ARR = ms - 1;
	}
}

void resetTIM2(uint32_t ms){
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0;
 8000ee4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	@ 0x24
	if (ms) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d005      	beq.n	8000efe <resetTIM2+0x22>
		TIM2->ARR = ms - 1;
 8000ef2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	62d3      	str	r3, [r2, #44]	@ 0x2c
	} else {
		TIM2->CR1 &= ~TIM_CR1_CEN;
	}
}
 8000efc:	e007      	b.n	8000f0e <resetTIM2+0x32>
		TIM2->CR1 &= ~TIM_CR1_CEN;
 8000efe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	6013      	str	r3, [r2, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <startOneShotTIM3>:


void startOneShotTIM3(uint32_t ms, void (*callback)(void)){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000f26:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <startOneShotTIM3+0xa4>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a25      	ldr	r2, [pc, #148]	@ (8000fc0 <startOneShotTIM3+0xa4>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	61d3      	str	r3, [r2, #28]
	TIM3->CR1  = 0;                     // counter off
 8000f32:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
	TIM3->SR   = 0;                     // clear UIF, etc.
 8000f38:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
	NVIC_ClearPendingIRQ(TIM3_IRQn);    // clear any NVIC shadow
 8000f3e:	201d      	movs	r0, #29
 8000f40:	f7ff ff24 	bl	8000d8c <__NVIC_ClearPendingIRQ>

	/* Program the period */
	TIM3->PSC  = CLOCKSPEED/1000 - 1;   // 1 kHz tick  (1 ms)
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f46:	4a20      	ldr	r2, [pc, #128]	@ (8000fc8 <startOneShotTIM3+0xac>)
 8000f48:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR  = (ms ? ms : 1) - 1;     // ARR = ms‑1, but never ‑1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <startOneShotTIM3+0x3a>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	e000      	b.n	8000f58 <startOneShotTIM3+0x3c>
 8000f56:	2300      	movs	r3, #0
 8000f58:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM3->CNT  = 0;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	@ 0x24

	/* One‑shot mode, enable update IRQ inside the timer */
	TIM3->DIER = TIM_DIER_UIE;
 8000f62:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	60da      	str	r2, [r3, #12]
	TIM3->CR1  = TIM_CR1_OPM;           // one‑pulse
 8000f68:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	601a      	str	r2, [r3, #0]

	TIM3->EGR  = TIM_EGR_UG;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	615a      	str	r2, [r3, #20]
	TIM3->SR   = 0;
 8000f74:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]

	TIM3HandlerFunction = callback;           // store callback
 8000f7a:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <startOneShotTIM3+0xb0>)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	6013      	str	r3, [r2, #0]

	/* Now let the NVIC see it */
	NVIC_SetPriority(TIM3_IRQn, TIM3PRIORITY);
 8000f80:	2105      	movs	r1, #5
 8000f82:	201d      	movs	r0, #29
 8000f84:	f7ff ff20 	bl	8000dc8 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 8000f88:	201d      	movs	r0, #29
 8000f8a:	f7ff fee1 	bl	8000d50 <__NVIC_EnableIRQ>


    if (ms > 1) {
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d905      	bls.n	8000fa0 <startOneShotTIM3+0x84>
    	TIM3->CR1 |= TIM_CR1_CEN;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6013      	str	r3, [r2, #0]
    }

    if ( ms == 1) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d108      	bne.n	8000fb8 <startOneShotTIM3+0x9c>
    	TIM3->ARR  = ms;
 8000fa6:	4a07      	ldr	r2, [pc, #28]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	62d3      	str	r3, [r2, #44]	@ 0x2c
    	TIM3->CR1 |= TIM_CR1_CEN;
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <startOneShotTIM3+0xa8>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]
    }
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40000400 	.word	0x40000400
 8000fc8:	0001193f 	.word	0x0001193f
 8000fcc:	200001b4 	.word	0x200001b4

08000fd0 <enableTimerInterrupt>:


// ---------- INTERUPT ENABLE ----------

void enableTimerInterrupt(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	__disable_irq();

	TIM2->DIER |= TIM_DIER_UIE; // Activates the overflow interupt when counting beyond ARR
 8000fd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(TIM2_IRQn); // Enable the interupt in NVIC (Nested Vectored Interrupt Controller)
 8000fe8:	201c      	movs	r0, #28
 8000fea:	f7ff feb1 	bl	8000d50 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, TIM2PRIORITY);  // Priority set
 8000fee:	2102      	movs	r1, #2
 8000ff0:	201c      	movs	r0, #28
 8000ff2:	f7ff fee9 	bl	8000dc8 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ff6:	b662      	cpsie	i
}
 8000ff8:	bf00      	nop

	__enable_irq(); // Re-enable all interrupts (now that we are finished)
	return;
 8000ffa:	bf00      	nop
}
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <TIM2_IRQHandler>:

// ---------- INTERUPT HANDLER ----------

void TIM2_IRQHandler() {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {        // Check update flag
 8001004:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00f      	beq.n	8001032 <TIM2_IRQHandler+0x32>
        TIM2->SR &= ~TIM_SR_UIF;        // Clear flag
 8001012:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6113      	str	r3, [r2, #16]

        if (TIM2HandlerFunction) {
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <TIM2_IRQHandler+0x38>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <TIM2_IRQHandler+0x32>
        	TIM2HandlerFunction();
 800102a:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <TIM2_IRQHandler+0x38>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4798      	blx	r3
        }
    }
    return;
 8001030:	bf00      	nop
 8001032:	bf00      	nop
}
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001b0 	.word	0x200001b0

0800103c <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_UIF) {
 8001040:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <TIM3_IRQHandler+0x48>)
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d018      	beq.n	800107e <TIM3_IRQHandler+0x42>
		TIM3->SR &= ~TIM_SR_UIF;
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <TIM3_IRQHandler+0x48>)
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	4a0c      	ldr	r2, [pc, #48]	@ (8001084 <TIM3_IRQHandler+0x48>)
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	6113      	str	r3, [r2, #16]

		TIM3->CR1 &= ~TIM_CR1_CEN;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <TIM3_IRQHandler+0x48>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a09      	ldr	r2, [pc, #36]	@ (8001084 <TIM3_IRQHandler+0x48>)
 800105e:	f023 0301 	bic.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]
		TIM3->DIER &= ~TIM_DIER_UIE;
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <TIM3_IRQHandler+0x48>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <TIM3_IRQHandler+0x48>)
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	60d3      	str	r3, [r2, #12]

		if (TIM3HandlerFunction) TIM3HandlerFunction();
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <TIM3_IRQHandler+0x4c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <TIM3_IRQHandler+0x42>
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <TIM3_IRQHandler+0x4c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4798      	blx	r3
	}
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40000400 	.word	0x40000400
 8001088:	200001b4 	.word	0x200001b4

0800108c <invertLEDs>:

void printBuffer(){
	transmitString((uint8_t*)"HELLO FROM timer.c", &USART1_PORT);
}

void invertLEDs() {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	setLEDState(~getLEDState());
 8001090:	f7ff f99a 	bl	80003c8 <getLEDState>
 8001094:	4603      	mov	r3, r0
 8001096:	43db      	mvns	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f982 	bl	80003a4 <setLEDState>

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a4:	480d      	ldr	r0, [pc, #52]	@ (80010dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ae:	490d      	ldr	r1, [pc, #52]	@ (80010e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b0:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <LoopForever+0xe>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c4:	4c0a      	ldr	r4, [pc, #40]	@ (80010f0 <LoopForever+0x16>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010d2:	f000 f9c5 	bl	8001460 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d6:	f7ff fb25 	bl	8000724 <main>

080010da <LoopForever>:

LoopForever:
  b LoopForever
 80010da:	e7fe      	b.n	80010da <LoopForever>
  ldr   r0, =_estack
 80010dc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80010e8:	08002454 	.word	0x08002454
  ldr r2, =_sbss
 80010ec:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80010f0:	20000304 	.word	0x20000304

080010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_2_IRQHandler>

080010f6 <atoi>:
 80010f6:	220a      	movs	r2, #10
 80010f8:	2100      	movs	r1, #0
 80010fa:	f000 b91f 	b.w	800133c <strtol>
	...

08001100 <std>:
 8001100:	2300      	movs	r3, #0
 8001102:	b510      	push	{r4, lr}
 8001104:	4604      	mov	r4, r0
 8001106:	e9c0 3300 	strd	r3, r3, [r0]
 800110a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800110e:	6083      	str	r3, [r0, #8]
 8001110:	8181      	strh	r1, [r0, #12]
 8001112:	6643      	str	r3, [r0, #100]	@ 0x64
 8001114:	81c2      	strh	r2, [r0, #14]
 8001116:	6183      	str	r3, [r0, #24]
 8001118:	4619      	mov	r1, r3
 800111a:	2208      	movs	r2, #8
 800111c:	305c      	adds	r0, #92	@ 0x5c
 800111e:	f000 f935 	bl	800138c <memset>
 8001122:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <std+0x58>)
 8001124:	6263      	str	r3, [r4, #36]	@ 0x24
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <std+0x5c>)
 8001128:	62a3      	str	r3, [r4, #40]	@ 0x28
 800112a:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <std+0x60>)
 800112c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800112e:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <std+0x64>)
 8001130:	6323      	str	r3, [r4, #48]	@ 0x30
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <std+0x68>)
 8001134:	6224      	str	r4, [r4, #32]
 8001136:	429c      	cmp	r4, r3
 8001138:	d006      	beq.n	8001148 <std+0x48>
 800113a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800113e:	4294      	cmp	r4, r2
 8001140:	d002      	beq.n	8001148 <std+0x48>
 8001142:	33d0      	adds	r3, #208	@ 0xd0
 8001144:	429c      	cmp	r4, r3
 8001146:	d105      	bne.n	8001154 <std+0x54>
 8001148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800114c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001150:	f000 b9aa 	b.w	80014a8 <__retarget_lock_init_recursive>
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	08001ad9 	.word	0x08001ad9
 800115c:	08001afb 	.word	0x08001afb
 8001160:	08001b33 	.word	0x08001b33
 8001164:	08001b57 	.word	0x08001b57
 8001168:	200001b8 	.word	0x200001b8

0800116c <stdio_exit_handler>:
 800116c:	4a02      	ldr	r2, [pc, #8]	@ (8001178 <stdio_exit_handler+0xc>)
 800116e:	4903      	ldr	r1, [pc, #12]	@ (800117c <stdio_exit_handler+0x10>)
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <stdio_exit_handler+0x14>)
 8001172:	f000 b8ed 	b.w	8001350 <_fwalk_sglue>
 8001176:	bf00      	nop
 8001178:	2000012c 	.word	0x2000012c
 800117c:	08001a71 	.word	0x08001a71
 8001180:	2000013c 	.word	0x2000013c

08001184 <cleanup_stdio>:
 8001184:	6841      	ldr	r1, [r0, #4]
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <cleanup_stdio+0x34>)
 8001188:	4299      	cmp	r1, r3
 800118a:	b510      	push	{r4, lr}
 800118c:	4604      	mov	r4, r0
 800118e:	d001      	beq.n	8001194 <cleanup_stdio+0x10>
 8001190:	f000 fc6e 	bl	8001a70 <_fflush_r>
 8001194:	68a1      	ldr	r1, [r4, #8]
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <cleanup_stdio+0x38>)
 8001198:	4299      	cmp	r1, r3
 800119a:	d002      	beq.n	80011a2 <cleanup_stdio+0x1e>
 800119c:	4620      	mov	r0, r4
 800119e:	f000 fc67 	bl	8001a70 <_fflush_r>
 80011a2:	68e1      	ldr	r1, [r4, #12]
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <cleanup_stdio+0x3c>)
 80011a6:	4299      	cmp	r1, r3
 80011a8:	d004      	beq.n	80011b4 <cleanup_stdio+0x30>
 80011aa:	4620      	mov	r0, r4
 80011ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b0:	f000 bc5e 	b.w	8001a70 <_fflush_r>
 80011b4:	bd10      	pop	{r4, pc}
 80011b6:	bf00      	nop
 80011b8:	200001b8 	.word	0x200001b8
 80011bc:	20000220 	.word	0x20000220
 80011c0:	20000288 	.word	0x20000288

080011c4 <global_stdio_init.part.0>:
 80011c4:	b510      	push	{r4, lr}
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <global_stdio_init.part.0+0x30>)
 80011c8:	4c0b      	ldr	r4, [pc, #44]	@ (80011f8 <global_stdio_init.part.0+0x34>)
 80011ca:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <global_stdio_init.part.0+0x38>)
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	4620      	mov	r0, r4
 80011d0:	2200      	movs	r2, #0
 80011d2:	2104      	movs	r1, #4
 80011d4:	f7ff ff94 	bl	8001100 <std>
 80011d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80011dc:	2201      	movs	r2, #1
 80011de:	2109      	movs	r1, #9
 80011e0:	f7ff ff8e 	bl	8001100 <std>
 80011e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80011e8:	2202      	movs	r2, #2
 80011ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011ee:	2112      	movs	r1, #18
 80011f0:	f7ff bf86 	b.w	8001100 <std>
 80011f4:	200002f0 	.word	0x200002f0
 80011f8:	200001b8 	.word	0x200001b8
 80011fc:	0800116d 	.word	0x0800116d

08001200 <__sfp_lock_acquire>:
 8001200:	4801      	ldr	r0, [pc, #4]	@ (8001208 <__sfp_lock_acquire+0x8>)
 8001202:	f000 b952 	b.w	80014aa <__retarget_lock_acquire_recursive>
 8001206:	bf00      	nop
 8001208:	200002f5 	.word	0x200002f5

0800120c <__sfp_lock_release>:
 800120c:	4801      	ldr	r0, [pc, #4]	@ (8001214 <__sfp_lock_release+0x8>)
 800120e:	f000 b94d 	b.w	80014ac <__retarget_lock_release_recursive>
 8001212:	bf00      	nop
 8001214:	200002f5 	.word	0x200002f5

08001218 <__sinit>:
 8001218:	b510      	push	{r4, lr}
 800121a:	4604      	mov	r4, r0
 800121c:	f7ff fff0 	bl	8001200 <__sfp_lock_acquire>
 8001220:	6a23      	ldr	r3, [r4, #32]
 8001222:	b11b      	cbz	r3, 800122c <__sinit+0x14>
 8001224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001228:	f7ff bff0 	b.w	800120c <__sfp_lock_release>
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__sinit+0x28>)
 800122e:	6223      	str	r3, [r4, #32]
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__sinit+0x2c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f5      	bne.n	8001224 <__sinit+0xc>
 8001238:	f7ff ffc4 	bl	80011c4 <global_stdio_init.part.0>
 800123c:	e7f2      	b.n	8001224 <__sinit+0xc>
 800123e:	bf00      	nop
 8001240:	08001185 	.word	0x08001185
 8001244:	200002f0 	.word	0x200002f0

08001248 <_strtol_l.isra.0>:
 8001248:	2b24      	cmp	r3, #36	@ 0x24
 800124a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800124e:	4686      	mov	lr, r0
 8001250:	4690      	mov	r8, r2
 8001252:	d801      	bhi.n	8001258 <_strtol_l.isra.0+0x10>
 8001254:	2b01      	cmp	r3, #1
 8001256:	d106      	bne.n	8001266 <_strtol_l.isra.0+0x1e>
 8001258:	f000 f8fc 	bl	8001454 <__errno>
 800125c:	2316      	movs	r3, #22
 800125e:	6003      	str	r3, [r0, #0]
 8001260:	2000      	movs	r0, #0
 8001262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001266:	4834      	ldr	r0, [pc, #208]	@ (8001338 <_strtol_l.isra.0+0xf0>)
 8001268:	460d      	mov	r5, r1
 800126a:	462a      	mov	r2, r5
 800126c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001270:	5d06      	ldrb	r6, [r0, r4]
 8001272:	f016 0608 	ands.w	r6, r6, #8
 8001276:	d1f8      	bne.n	800126a <_strtol_l.isra.0+0x22>
 8001278:	2c2d      	cmp	r4, #45	@ 0x2d
 800127a:	d110      	bne.n	800129e <_strtol_l.isra.0+0x56>
 800127c:	782c      	ldrb	r4, [r5, #0]
 800127e:	2601      	movs	r6, #1
 8001280:	1c95      	adds	r5, r2, #2
 8001282:	f033 0210 	bics.w	r2, r3, #16
 8001286:	d115      	bne.n	80012b4 <_strtol_l.isra.0+0x6c>
 8001288:	2c30      	cmp	r4, #48	@ 0x30
 800128a:	d10d      	bne.n	80012a8 <_strtol_l.isra.0+0x60>
 800128c:	782a      	ldrb	r2, [r5, #0]
 800128e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001292:	2a58      	cmp	r2, #88	@ 0x58
 8001294:	d108      	bne.n	80012a8 <_strtol_l.isra.0+0x60>
 8001296:	786c      	ldrb	r4, [r5, #1]
 8001298:	3502      	adds	r5, #2
 800129a:	2310      	movs	r3, #16
 800129c:	e00a      	b.n	80012b4 <_strtol_l.isra.0+0x6c>
 800129e:	2c2b      	cmp	r4, #43	@ 0x2b
 80012a0:	bf04      	itt	eq
 80012a2:	782c      	ldrbeq	r4, [r5, #0]
 80012a4:	1c95      	addeq	r5, r2, #2
 80012a6:	e7ec      	b.n	8001282 <_strtol_l.isra.0+0x3a>
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f6      	bne.n	800129a <_strtol_l.isra.0+0x52>
 80012ac:	2c30      	cmp	r4, #48	@ 0x30
 80012ae:	bf14      	ite	ne
 80012b0:	230a      	movne	r3, #10
 80012b2:	2308      	moveq	r3, #8
 80012b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80012b8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80012bc:	2200      	movs	r2, #0
 80012be:	fbbc f9f3 	udiv	r9, ip, r3
 80012c2:	4610      	mov	r0, r2
 80012c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80012c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80012cc:	2f09      	cmp	r7, #9
 80012ce:	d80f      	bhi.n	80012f0 <_strtol_l.isra.0+0xa8>
 80012d0:	463c      	mov	r4, r7
 80012d2:	42a3      	cmp	r3, r4
 80012d4:	dd1b      	ble.n	800130e <_strtol_l.isra.0+0xc6>
 80012d6:	1c57      	adds	r7, r2, #1
 80012d8:	d007      	beq.n	80012ea <_strtol_l.isra.0+0xa2>
 80012da:	4581      	cmp	r9, r0
 80012dc:	d314      	bcc.n	8001308 <_strtol_l.isra.0+0xc0>
 80012de:	d101      	bne.n	80012e4 <_strtol_l.isra.0+0x9c>
 80012e0:	45a2      	cmp	sl, r4
 80012e2:	db11      	blt.n	8001308 <_strtol_l.isra.0+0xc0>
 80012e4:	fb00 4003 	mla	r0, r0, r3, r4
 80012e8:	2201      	movs	r2, #1
 80012ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80012ee:	e7eb      	b.n	80012c8 <_strtol_l.isra.0+0x80>
 80012f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80012f4:	2f19      	cmp	r7, #25
 80012f6:	d801      	bhi.n	80012fc <_strtol_l.isra.0+0xb4>
 80012f8:	3c37      	subs	r4, #55	@ 0x37
 80012fa:	e7ea      	b.n	80012d2 <_strtol_l.isra.0+0x8a>
 80012fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001300:	2f19      	cmp	r7, #25
 8001302:	d804      	bhi.n	800130e <_strtol_l.isra.0+0xc6>
 8001304:	3c57      	subs	r4, #87	@ 0x57
 8001306:	e7e4      	b.n	80012d2 <_strtol_l.isra.0+0x8a>
 8001308:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800130c:	e7ed      	b.n	80012ea <_strtol_l.isra.0+0xa2>
 800130e:	1c53      	adds	r3, r2, #1
 8001310:	d108      	bne.n	8001324 <_strtol_l.isra.0+0xdc>
 8001312:	2322      	movs	r3, #34	@ 0x22
 8001314:	f8ce 3000 	str.w	r3, [lr]
 8001318:	4660      	mov	r0, ip
 800131a:	f1b8 0f00 	cmp.w	r8, #0
 800131e:	d0a0      	beq.n	8001262 <_strtol_l.isra.0+0x1a>
 8001320:	1e69      	subs	r1, r5, #1
 8001322:	e006      	b.n	8001332 <_strtol_l.isra.0+0xea>
 8001324:	b106      	cbz	r6, 8001328 <_strtol_l.isra.0+0xe0>
 8001326:	4240      	negs	r0, r0
 8001328:	f1b8 0f00 	cmp.w	r8, #0
 800132c:	d099      	beq.n	8001262 <_strtol_l.isra.0+0x1a>
 800132e:	2a00      	cmp	r2, #0
 8001330:	d1f6      	bne.n	8001320 <_strtol_l.isra.0+0xd8>
 8001332:	f8c8 1000 	str.w	r1, [r8]
 8001336:	e794      	b.n	8001262 <_strtol_l.isra.0+0x1a>
 8001338:	08002343 	.word	0x08002343

0800133c <strtol>:
 800133c:	4613      	mov	r3, r2
 800133e:	460a      	mov	r2, r1
 8001340:	4601      	mov	r1, r0
 8001342:	4802      	ldr	r0, [pc, #8]	@ (800134c <strtol+0x10>)
 8001344:	6800      	ldr	r0, [r0, #0]
 8001346:	f7ff bf7f 	b.w	8001248 <_strtol_l.isra.0>
 800134a:	bf00      	nop
 800134c:	20000138 	.word	0x20000138

08001350 <_fwalk_sglue>:
 8001350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001354:	4607      	mov	r7, r0
 8001356:	4688      	mov	r8, r1
 8001358:	4614      	mov	r4, r2
 800135a:	2600      	movs	r6, #0
 800135c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001360:	f1b9 0901 	subs.w	r9, r9, #1
 8001364:	d505      	bpl.n	8001372 <_fwalk_sglue+0x22>
 8001366:	6824      	ldr	r4, [r4, #0]
 8001368:	2c00      	cmp	r4, #0
 800136a:	d1f7      	bne.n	800135c <_fwalk_sglue+0xc>
 800136c:	4630      	mov	r0, r6
 800136e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001372:	89ab      	ldrh	r3, [r5, #12]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d907      	bls.n	8001388 <_fwalk_sglue+0x38>
 8001378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800137c:	3301      	adds	r3, #1
 800137e:	d003      	beq.n	8001388 <_fwalk_sglue+0x38>
 8001380:	4629      	mov	r1, r5
 8001382:	4638      	mov	r0, r7
 8001384:	47c0      	blx	r8
 8001386:	4306      	orrs	r6, r0
 8001388:	3568      	adds	r5, #104	@ 0x68
 800138a:	e7e9      	b.n	8001360 <_fwalk_sglue+0x10>

0800138c <memset>:
 800138c:	4402      	add	r2, r0
 800138e:	4603      	mov	r3, r0
 8001390:	4293      	cmp	r3, r2
 8001392:	d100      	bne.n	8001396 <memset+0xa>
 8001394:	4770      	bx	lr
 8001396:	f803 1b01 	strb.w	r1, [r3], #1
 800139a:	e7f9      	b.n	8001390 <memset+0x4>

0800139c <strtok>:
 800139c:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <strtok+0x5c>)
 800139e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a2:	681f      	ldr	r7, [r3, #0]
 80013a4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80013a6:	4605      	mov	r5, r0
 80013a8:	460e      	mov	r6, r1
 80013aa:	b9ec      	cbnz	r4, 80013e8 <strtok+0x4c>
 80013ac:	2050      	movs	r0, #80	@ 0x50
 80013ae:	f000 f8a5 	bl	80014fc <malloc>
 80013b2:	4602      	mov	r2, r0
 80013b4:	6478      	str	r0, [r7, #68]	@ 0x44
 80013b6:	b920      	cbnz	r0, 80013c2 <strtok+0x26>
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <strtok+0x60>)
 80013ba:	4811      	ldr	r0, [pc, #68]	@ (8001400 <strtok+0x64>)
 80013bc:	215b      	movs	r1, #91	@ 0x5b
 80013be:	f000 f87f 	bl	80014c0 <__assert_func>
 80013c2:	e9c0 4400 	strd	r4, r4, [r0]
 80013c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80013ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80013ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80013d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80013d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80013da:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80013de:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80013e2:	6184      	str	r4, [r0, #24]
 80013e4:	7704      	strb	r4, [r0, #28]
 80013e6:	6244      	str	r4, [r0, #36]	@ 0x24
 80013e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80013ea:	4631      	mov	r1, r6
 80013ec:	4628      	mov	r0, r5
 80013ee:	2301      	movs	r3, #1
 80013f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013f4:	f000 b806 	b.w	8001404 <__strtok_r>
 80013f8:	20000138 	.word	0x20000138
 80013fc:	08002262 	.word	0x08002262
 8001400:	08002279 	.word	0x08002279

08001404 <__strtok_r>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4604      	mov	r4, r0
 8001408:	b908      	cbnz	r0, 800140e <__strtok_r+0xa>
 800140a:	6814      	ldr	r4, [r2, #0]
 800140c:	b144      	cbz	r4, 8001420 <__strtok_r+0x1c>
 800140e:	4620      	mov	r0, r4
 8001410:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001414:	460f      	mov	r7, r1
 8001416:	f817 6b01 	ldrb.w	r6, [r7], #1
 800141a:	b91e      	cbnz	r6, 8001424 <__strtok_r+0x20>
 800141c:	b965      	cbnz	r5, 8001438 <__strtok_r+0x34>
 800141e:	6015      	str	r5, [r2, #0]
 8001420:	2000      	movs	r0, #0
 8001422:	e005      	b.n	8001430 <__strtok_r+0x2c>
 8001424:	42b5      	cmp	r5, r6
 8001426:	d1f6      	bne.n	8001416 <__strtok_r+0x12>
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <__strtok_r+0xa>
 800142c:	6014      	str	r4, [r2, #0]
 800142e:	7003      	strb	r3, [r0, #0]
 8001430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001432:	461c      	mov	r4, r3
 8001434:	e00c      	b.n	8001450 <__strtok_r+0x4c>
 8001436:	b91d      	cbnz	r5, 8001440 <__strtok_r+0x3c>
 8001438:	4627      	mov	r7, r4
 800143a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800143e:	460e      	mov	r6, r1
 8001440:	f816 5b01 	ldrb.w	r5, [r6], #1
 8001444:	42ab      	cmp	r3, r5
 8001446:	d1f6      	bne.n	8001436 <__strtok_r+0x32>
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f2      	beq.n	8001432 <__strtok_r+0x2e>
 800144c:	2300      	movs	r3, #0
 800144e:	703b      	strb	r3, [r7, #0]
 8001450:	6014      	str	r4, [r2, #0]
 8001452:	e7ed      	b.n	8001430 <__strtok_r+0x2c>

08001454 <__errno>:
 8001454:	4b01      	ldr	r3, [pc, #4]	@ (800145c <__errno+0x8>)
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000138 	.word	0x20000138

08001460 <__libc_init_array>:
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	4d0d      	ldr	r5, [pc, #52]	@ (8001498 <__libc_init_array+0x38>)
 8001464:	4c0d      	ldr	r4, [pc, #52]	@ (800149c <__libc_init_array+0x3c>)
 8001466:	1b64      	subs	r4, r4, r5
 8001468:	10a4      	asrs	r4, r4, #2
 800146a:	2600      	movs	r6, #0
 800146c:	42a6      	cmp	r6, r4
 800146e:	d109      	bne.n	8001484 <__libc_init_array+0x24>
 8001470:	4d0b      	ldr	r5, [pc, #44]	@ (80014a0 <__libc_init_array+0x40>)
 8001472:	4c0c      	ldr	r4, [pc, #48]	@ (80014a4 <__libc_init_array+0x44>)
 8001474:	f000 fecc 	bl	8002210 <_init>
 8001478:	1b64      	subs	r4, r4, r5
 800147a:	10a4      	asrs	r4, r4, #2
 800147c:	2600      	movs	r6, #0
 800147e:	42a6      	cmp	r6, r4
 8001480:	d105      	bne.n	800148e <__libc_init_array+0x2e>
 8001482:	bd70      	pop	{r4, r5, r6, pc}
 8001484:	f855 3b04 	ldr.w	r3, [r5], #4
 8001488:	4798      	blx	r3
 800148a:	3601      	adds	r6, #1
 800148c:	e7ee      	b.n	800146c <__libc_init_array+0xc>
 800148e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001492:	4798      	blx	r3
 8001494:	3601      	adds	r6, #1
 8001496:	e7f2      	b.n	800147e <__libc_init_array+0x1e>
 8001498:	0800244c 	.word	0x0800244c
 800149c:	0800244c 	.word	0x0800244c
 80014a0:	0800244c 	.word	0x0800244c
 80014a4:	08002450 	.word	0x08002450

080014a8 <__retarget_lock_init_recursive>:
 80014a8:	4770      	bx	lr

080014aa <__retarget_lock_acquire_recursive>:
 80014aa:	4770      	bx	lr

080014ac <__retarget_lock_release_recursive>:
 80014ac:	4770      	bx	lr

080014ae <strcpy>:
 80014ae:	4603      	mov	r3, r0
 80014b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80014b4:	f803 2b01 	strb.w	r2, [r3], #1
 80014b8:	2a00      	cmp	r2, #0
 80014ba:	d1f9      	bne.n	80014b0 <strcpy+0x2>
 80014bc:	4770      	bx	lr
	...

080014c0 <__assert_func>:
 80014c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80014c2:	4614      	mov	r4, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <__assert_func+0x2c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4605      	mov	r5, r0
 80014cc:	68d8      	ldr	r0, [r3, #12]
 80014ce:	b14c      	cbz	r4, 80014e4 <__assert_func+0x24>
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <__assert_func+0x30>)
 80014d2:	9100      	str	r1, [sp, #0]
 80014d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80014d8:	4906      	ldr	r1, [pc, #24]	@ (80014f4 <__assert_func+0x34>)
 80014da:	462b      	mov	r3, r5
 80014dc:	f000 fb40 	bl	8001b60 <fiprintf>
 80014e0:	f000 fba6 	bl	8001c30 <abort>
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <__assert_func+0x38>)
 80014e6:	461c      	mov	r4, r3
 80014e8:	e7f3      	b.n	80014d2 <__assert_func+0x12>
 80014ea:	bf00      	nop
 80014ec:	20000138 	.word	0x20000138
 80014f0:	080022d3 	.word	0x080022d3
 80014f4:	080022e0 	.word	0x080022e0
 80014f8:	0800230e 	.word	0x0800230e

080014fc <malloc>:
 80014fc:	4b02      	ldr	r3, [pc, #8]	@ (8001508 <malloc+0xc>)
 80014fe:	4601      	mov	r1, r0
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	f000 b825 	b.w	8001550 <_malloc_r>
 8001506:	bf00      	nop
 8001508:	20000138 	.word	0x20000138

0800150c <sbrk_aligned>:
 800150c:	b570      	push	{r4, r5, r6, lr}
 800150e:	4e0f      	ldr	r6, [pc, #60]	@ (800154c <sbrk_aligned+0x40>)
 8001510:	460c      	mov	r4, r1
 8001512:	6831      	ldr	r1, [r6, #0]
 8001514:	4605      	mov	r5, r0
 8001516:	b911      	cbnz	r1, 800151e <sbrk_aligned+0x12>
 8001518:	f000 fb58 	bl	8001bcc <_sbrk_r>
 800151c:	6030      	str	r0, [r6, #0]
 800151e:	4621      	mov	r1, r4
 8001520:	4628      	mov	r0, r5
 8001522:	f000 fb53 	bl	8001bcc <_sbrk_r>
 8001526:	1c43      	adds	r3, r0, #1
 8001528:	d103      	bne.n	8001532 <sbrk_aligned+0x26>
 800152a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800152e:	4620      	mov	r0, r4
 8001530:	bd70      	pop	{r4, r5, r6, pc}
 8001532:	1cc4      	adds	r4, r0, #3
 8001534:	f024 0403 	bic.w	r4, r4, #3
 8001538:	42a0      	cmp	r0, r4
 800153a:	d0f8      	beq.n	800152e <sbrk_aligned+0x22>
 800153c:	1a21      	subs	r1, r4, r0
 800153e:	4628      	mov	r0, r5
 8001540:	f000 fb44 	bl	8001bcc <_sbrk_r>
 8001544:	3001      	adds	r0, #1
 8001546:	d1f2      	bne.n	800152e <sbrk_aligned+0x22>
 8001548:	e7ef      	b.n	800152a <sbrk_aligned+0x1e>
 800154a:	bf00      	nop
 800154c:	200002f8 	.word	0x200002f8

08001550 <_malloc_r>:
 8001550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001554:	1ccd      	adds	r5, r1, #3
 8001556:	f025 0503 	bic.w	r5, r5, #3
 800155a:	3508      	adds	r5, #8
 800155c:	2d0c      	cmp	r5, #12
 800155e:	bf38      	it	cc
 8001560:	250c      	movcc	r5, #12
 8001562:	2d00      	cmp	r5, #0
 8001564:	4606      	mov	r6, r0
 8001566:	db01      	blt.n	800156c <_malloc_r+0x1c>
 8001568:	42a9      	cmp	r1, r5
 800156a:	d904      	bls.n	8001576 <_malloc_r+0x26>
 800156c:	230c      	movs	r3, #12
 800156e:	6033      	str	r3, [r6, #0]
 8001570:	2000      	movs	r0, #0
 8001572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800164c <_malloc_r+0xfc>
 800157a:	f000 faa1 	bl	8001ac0 <__malloc_lock>
 800157e:	f8d8 3000 	ldr.w	r3, [r8]
 8001582:	461c      	mov	r4, r3
 8001584:	bb44      	cbnz	r4, 80015d8 <_malloc_r+0x88>
 8001586:	4629      	mov	r1, r5
 8001588:	4630      	mov	r0, r6
 800158a:	f7ff ffbf 	bl	800150c <sbrk_aligned>
 800158e:	1c43      	adds	r3, r0, #1
 8001590:	4604      	mov	r4, r0
 8001592:	d158      	bne.n	8001646 <_malloc_r+0xf6>
 8001594:	f8d8 4000 	ldr.w	r4, [r8]
 8001598:	4627      	mov	r7, r4
 800159a:	2f00      	cmp	r7, #0
 800159c:	d143      	bne.n	8001626 <_malloc_r+0xd6>
 800159e:	2c00      	cmp	r4, #0
 80015a0:	d04b      	beq.n	800163a <_malloc_r+0xea>
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	4639      	mov	r1, r7
 80015a6:	4630      	mov	r0, r6
 80015a8:	eb04 0903 	add.w	r9, r4, r3
 80015ac:	f000 fb0e 	bl	8001bcc <_sbrk_r>
 80015b0:	4581      	cmp	r9, r0
 80015b2:	d142      	bne.n	800163a <_malloc_r+0xea>
 80015b4:	6821      	ldr	r1, [r4, #0]
 80015b6:	1a6d      	subs	r5, r5, r1
 80015b8:	4629      	mov	r1, r5
 80015ba:	4630      	mov	r0, r6
 80015bc:	f7ff ffa6 	bl	800150c <sbrk_aligned>
 80015c0:	3001      	adds	r0, #1
 80015c2:	d03a      	beq.n	800163a <_malloc_r+0xea>
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	442b      	add	r3, r5
 80015c8:	6023      	str	r3, [r4, #0]
 80015ca:	f8d8 3000 	ldr.w	r3, [r8]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	bb62      	cbnz	r2, 800162c <_malloc_r+0xdc>
 80015d2:	f8c8 7000 	str.w	r7, [r8]
 80015d6:	e00f      	b.n	80015f8 <_malloc_r+0xa8>
 80015d8:	6822      	ldr	r2, [r4, #0]
 80015da:	1b52      	subs	r2, r2, r5
 80015dc:	d420      	bmi.n	8001620 <_malloc_r+0xd0>
 80015de:	2a0b      	cmp	r2, #11
 80015e0:	d917      	bls.n	8001612 <_malloc_r+0xc2>
 80015e2:	1961      	adds	r1, r4, r5
 80015e4:	42a3      	cmp	r3, r4
 80015e6:	6025      	str	r5, [r4, #0]
 80015e8:	bf18      	it	ne
 80015ea:	6059      	strne	r1, [r3, #4]
 80015ec:	6863      	ldr	r3, [r4, #4]
 80015ee:	bf08      	it	eq
 80015f0:	f8c8 1000 	streq.w	r1, [r8]
 80015f4:	5162      	str	r2, [r4, r5]
 80015f6:	604b      	str	r3, [r1, #4]
 80015f8:	4630      	mov	r0, r6
 80015fa:	f000 fa67 	bl	8001acc <__malloc_unlock>
 80015fe:	f104 000b 	add.w	r0, r4, #11
 8001602:	1d23      	adds	r3, r4, #4
 8001604:	f020 0007 	bic.w	r0, r0, #7
 8001608:	1ac2      	subs	r2, r0, r3
 800160a:	bf1c      	itt	ne
 800160c:	1a1b      	subne	r3, r3, r0
 800160e:	50a3      	strne	r3, [r4, r2]
 8001610:	e7af      	b.n	8001572 <_malloc_r+0x22>
 8001612:	6862      	ldr	r2, [r4, #4]
 8001614:	42a3      	cmp	r3, r4
 8001616:	bf0c      	ite	eq
 8001618:	f8c8 2000 	streq.w	r2, [r8]
 800161c:	605a      	strne	r2, [r3, #4]
 800161e:	e7eb      	b.n	80015f8 <_malloc_r+0xa8>
 8001620:	4623      	mov	r3, r4
 8001622:	6864      	ldr	r4, [r4, #4]
 8001624:	e7ae      	b.n	8001584 <_malloc_r+0x34>
 8001626:	463c      	mov	r4, r7
 8001628:	687f      	ldr	r7, [r7, #4]
 800162a:	e7b6      	b.n	800159a <_malloc_r+0x4a>
 800162c:	461a      	mov	r2, r3
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	42a3      	cmp	r3, r4
 8001632:	d1fb      	bne.n	800162c <_malloc_r+0xdc>
 8001634:	2300      	movs	r3, #0
 8001636:	6053      	str	r3, [r2, #4]
 8001638:	e7de      	b.n	80015f8 <_malloc_r+0xa8>
 800163a:	230c      	movs	r3, #12
 800163c:	6033      	str	r3, [r6, #0]
 800163e:	4630      	mov	r0, r6
 8001640:	f000 fa44 	bl	8001acc <__malloc_unlock>
 8001644:	e794      	b.n	8001570 <_malloc_r+0x20>
 8001646:	6005      	str	r5, [r0, #0]
 8001648:	e7d6      	b.n	80015f8 <_malloc_r+0xa8>
 800164a:	bf00      	nop
 800164c:	200002fc 	.word	0x200002fc

08001650 <_printf_common>:
 8001650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001654:	4616      	mov	r6, r2
 8001656:	4698      	mov	r8, r3
 8001658:	688a      	ldr	r2, [r1, #8]
 800165a:	690b      	ldr	r3, [r1, #16]
 800165c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001660:	4293      	cmp	r3, r2
 8001662:	bfb8      	it	lt
 8001664:	4613      	movlt	r3, r2
 8001666:	6033      	str	r3, [r6, #0]
 8001668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800166c:	4607      	mov	r7, r0
 800166e:	460c      	mov	r4, r1
 8001670:	b10a      	cbz	r2, 8001676 <_printf_common+0x26>
 8001672:	3301      	adds	r3, #1
 8001674:	6033      	str	r3, [r6, #0]
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	0699      	lsls	r1, r3, #26
 800167a:	bf42      	ittt	mi
 800167c:	6833      	ldrmi	r3, [r6, #0]
 800167e:	3302      	addmi	r3, #2
 8001680:	6033      	strmi	r3, [r6, #0]
 8001682:	6825      	ldr	r5, [r4, #0]
 8001684:	f015 0506 	ands.w	r5, r5, #6
 8001688:	d106      	bne.n	8001698 <_printf_common+0x48>
 800168a:	f104 0a19 	add.w	sl, r4, #25
 800168e:	68e3      	ldr	r3, [r4, #12]
 8001690:	6832      	ldr	r2, [r6, #0]
 8001692:	1a9b      	subs	r3, r3, r2
 8001694:	42ab      	cmp	r3, r5
 8001696:	dc26      	bgt.n	80016e6 <_printf_common+0x96>
 8001698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	3b00      	subs	r3, #0
 80016a0:	bf18      	it	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	0692      	lsls	r2, r2, #26
 80016a6:	d42b      	bmi.n	8001700 <_printf_common+0xb0>
 80016a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80016ac:	4641      	mov	r1, r8
 80016ae:	4638      	mov	r0, r7
 80016b0:	47c8      	blx	r9
 80016b2:	3001      	adds	r0, #1
 80016b4:	d01e      	beq.n	80016f4 <_printf_common+0xa4>
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	6922      	ldr	r2, [r4, #16]
 80016ba:	f003 0306 	and.w	r3, r3, #6
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf02      	ittt	eq
 80016c2:	68e5      	ldreq	r5, [r4, #12]
 80016c4:	6833      	ldreq	r3, [r6, #0]
 80016c6:	1aed      	subeq	r5, r5, r3
 80016c8:	68a3      	ldr	r3, [r4, #8]
 80016ca:	bf0c      	ite	eq
 80016cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016d0:	2500      	movne	r5, #0
 80016d2:	4293      	cmp	r3, r2
 80016d4:	bfc4      	itt	gt
 80016d6:	1a9b      	subgt	r3, r3, r2
 80016d8:	18ed      	addgt	r5, r5, r3
 80016da:	2600      	movs	r6, #0
 80016dc:	341a      	adds	r4, #26
 80016de:	42b5      	cmp	r5, r6
 80016e0:	d11a      	bne.n	8001718 <_printf_common+0xc8>
 80016e2:	2000      	movs	r0, #0
 80016e4:	e008      	b.n	80016f8 <_printf_common+0xa8>
 80016e6:	2301      	movs	r3, #1
 80016e8:	4652      	mov	r2, sl
 80016ea:	4641      	mov	r1, r8
 80016ec:	4638      	mov	r0, r7
 80016ee:	47c8      	blx	r9
 80016f0:	3001      	adds	r0, #1
 80016f2:	d103      	bne.n	80016fc <_printf_common+0xac>
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016fc:	3501      	adds	r5, #1
 80016fe:	e7c6      	b.n	800168e <_printf_common+0x3e>
 8001700:	18e1      	adds	r1, r4, r3
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	2030      	movs	r0, #48	@ 0x30
 8001706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800170a:	4422      	add	r2, r4
 800170c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001714:	3302      	adds	r3, #2
 8001716:	e7c7      	b.n	80016a8 <_printf_common+0x58>
 8001718:	2301      	movs	r3, #1
 800171a:	4622      	mov	r2, r4
 800171c:	4641      	mov	r1, r8
 800171e:	4638      	mov	r0, r7
 8001720:	47c8      	blx	r9
 8001722:	3001      	adds	r0, #1
 8001724:	d0e6      	beq.n	80016f4 <_printf_common+0xa4>
 8001726:	3601      	adds	r6, #1
 8001728:	e7d9      	b.n	80016de <_printf_common+0x8e>
	...

0800172c <_printf_i>:
 800172c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001730:	7e0f      	ldrb	r7, [r1, #24]
 8001732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001734:	2f78      	cmp	r7, #120	@ 0x78
 8001736:	4691      	mov	r9, r2
 8001738:	4680      	mov	r8, r0
 800173a:	460c      	mov	r4, r1
 800173c:	469a      	mov	sl, r3
 800173e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001742:	d807      	bhi.n	8001754 <_printf_i+0x28>
 8001744:	2f62      	cmp	r7, #98	@ 0x62
 8001746:	d80a      	bhi.n	800175e <_printf_i+0x32>
 8001748:	2f00      	cmp	r7, #0
 800174a:	f000 80d1 	beq.w	80018f0 <_printf_i+0x1c4>
 800174e:	2f58      	cmp	r7, #88	@ 0x58
 8001750:	f000 80b8 	beq.w	80018c4 <_printf_i+0x198>
 8001754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800175c:	e03a      	b.n	80017d4 <_printf_i+0xa8>
 800175e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001762:	2b15      	cmp	r3, #21
 8001764:	d8f6      	bhi.n	8001754 <_printf_i+0x28>
 8001766:	a101      	add	r1, pc, #4	@ (adr r1, 800176c <_printf_i+0x40>)
 8001768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800176c:	080017c5 	.word	0x080017c5
 8001770:	080017d9 	.word	0x080017d9
 8001774:	08001755 	.word	0x08001755
 8001778:	08001755 	.word	0x08001755
 800177c:	08001755 	.word	0x08001755
 8001780:	08001755 	.word	0x08001755
 8001784:	080017d9 	.word	0x080017d9
 8001788:	08001755 	.word	0x08001755
 800178c:	08001755 	.word	0x08001755
 8001790:	08001755 	.word	0x08001755
 8001794:	08001755 	.word	0x08001755
 8001798:	080018d7 	.word	0x080018d7
 800179c:	08001803 	.word	0x08001803
 80017a0:	08001891 	.word	0x08001891
 80017a4:	08001755 	.word	0x08001755
 80017a8:	08001755 	.word	0x08001755
 80017ac:	080018f9 	.word	0x080018f9
 80017b0:	08001755 	.word	0x08001755
 80017b4:	08001803 	.word	0x08001803
 80017b8:	08001755 	.word	0x08001755
 80017bc:	08001755 	.word	0x08001755
 80017c0:	08001899 	.word	0x08001899
 80017c4:	6833      	ldr	r3, [r6, #0]
 80017c6:	1d1a      	adds	r2, r3, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6032      	str	r2, [r6, #0]
 80017cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80017d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80017d4:	2301      	movs	r3, #1
 80017d6:	e09c      	b.n	8001912 <_printf_i+0x1e6>
 80017d8:	6833      	ldr	r3, [r6, #0]
 80017da:	6820      	ldr	r0, [r4, #0]
 80017dc:	1d19      	adds	r1, r3, #4
 80017de:	6031      	str	r1, [r6, #0]
 80017e0:	0606      	lsls	r6, r0, #24
 80017e2:	d501      	bpl.n	80017e8 <_printf_i+0xbc>
 80017e4:	681d      	ldr	r5, [r3, #0]
 80017e6:	e003      	b.n	80017f0 <_printf_i+0xc4>
 80017e8:	0645      	lsls	r5, r0, #25
 80017ea:	d5fb      	bpl.n	80017e4 <_printf_i+0xb8>
 80017ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80017f0:	2d00      	cmp	r5, #0
 80017f2:	da03      	bge.n	80017fc <_printf_i+0xd0>
 80017f4:	232d      	movs	r3, #45	@ 0x2d
 80017f6:	426d      	negs	r5, r5
 80017f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017fc:	4858      	ldr	r0, [pc, #352]	@ (8001960 <_printf_i+0x234>)
 80017fe:	230a      	movs	r3, #10
 8001800:	e011      	b.n	8001826 <_printf_i+0xfa>
 8001802:	6821      	ldr	r1, [r4, #0]
 8001804:	6833      	ldr	r3, [r6, #0]
 8001806:	0608      	lsls	r0, r1, #24
 8001808:	f853 5b04 	ldr.w	r5, [r3], #4
 800180c:	d402      	bmi.n	8001814 <_printf_i+0xe8>
 800180e:	0649      	lsls	r1, r1, #25
 8001810:	bf48      	it	mi
 8001812:	b2ad      	uxthmi	r5, r5
 8001814:	2f6f      	cmp	r7, #111	@ 0x6f
 8001816:	4852      	ldr	r0, [pc, #328]	@ (8001960 <_printf_i+0x234>)
 8001818:	6033      	str	r3, [r6, #0]
 800181a:	bf14      	ite	ne
 800181c:	230a      	movne	r3, #10
 800181e:	2308      	moveq	r3, #8
 8001820:	2100      	movs	r1, #0
 8001822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001826:	6866      	ldr	r6, [r4, #4]
 8001828:	60a6      	str	r6, [r4, #8]
 800182a:	2e00      	cmp	r6, #0
 800182c:	db05      	blt.n	800183a <_printf_i+0x10e>
 800182e:	6821      	ldr	r1, [r4, #0]
 8001830:	432e      	orrs	r6, r5
 8001832:	f021 0104 	bic.w	r1, r1, #4
 8001836:	6021      	str	r1, [r4, #0]
 8001838:	d04b      	beq.n	80018d2 <_printf_i+0x1a6>
 800183a:	4616      	mov	r6, r2
 800183c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001840:	fb03 5711 	mls	r7, r3, r1, r5
 8001844:	5dc7      	ldrb	r7, [r0, r7]
 8001846:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800184a:	462f      	mov	r7, r5
 800184c:	42bb      	cmp	r3, r7
 800184e:	460d      	mov	r5, r1
 8001850:	d9f4      	bls.n	800183c <_printf_i+0x110>
 8001852:	2b08      	cmp	r3, #8
 8001854:	d10b      	bne.n	800186e <_printf_i+0x142>
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	07df      	lsls	r7, r3, #31
 800185a:	d508      	bpl.n	800186e <_printf_i+0x142>
 800185c:	6923      	ldr	r3, [r4, #16]
 800185e:	6861      	ldr	r1, [r4, #4]
 8001860:	4299      	cmp	r1, r3
 8001862:	bfde      	ittt	le
 8001864:	2330      	movle	r3, #48	@ 0x30
 8001866:	f806 3c01 	strble.w	r3, [r6, #-1]
 800186a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800186e:	1b92      	subs	r2, r2, r6
 8001870:	6122      	str	r2, [r4, #16]
 8001872:	f8cd a000 	str.w	sl, [sp]
 8001876:	464b      	mov	r3, r9
 8001878:	aa03      	add	r2, sp, #12
 800187a:	4621      	mov	r1, r4
 800187c:	4640      	mov	r0, r8
 800187e:	f7ff fee7 	bl	8001650 <_printf_common>
 8001882:	3001      	adds	r0, #1
 8001884:	d14a      	bne.n	800191c <_printf_i+0x1f0>
 8001886:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800188a:	b004      	add	sp, #16
 800188c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	6023      	str	r3, [r4, #0]
 8001898:	4832      	ldr	r0, [pc, #200]	@ (8001964 <_printf_i+0x238>)
 800189a:	2778      	movs	r7, #120	@ 0x78
 800189c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	6831      	ldr	r1, [r6, #0]
 80018a4:	061f      	lsls	r7, r3, #24
 80018a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80018aa:	d402      	bmi.n	80018b2 <_printf_i+0x186>
 80018ac:	065f      	lsls	r7, r3, #25
 80018ae:	bf48      	it	mi
 80018b0:	b2ad      	uxthmi	r5, r5
 80018b2:	6031      	str	r1, [r6, #0]
 80018b4:	07d9      	lsls	r1, r3, #31
 80018b6:	bf44      	itt	mi
 80018b8:	f043 0320 	orrmi.w	r3, r3, #32
 80018bc:	6023      	strmi	r3, [r4, #0]
 80018be:	b11d      	cbz	r5, 80018c8 <_printf_i+0x19c>
 80018c0:	2310      	movs	r3, #16
 80018c2:	e7ad      	b.n	8001820 <_printf_i+0xf4>
 80018c4:	4826      	ldr	r0, [pc, #152]	@ (8001960 <_printf_i+0x234>)
 80018c6:	e7e9      	b.n	800189c <_printf_i+0x170>
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	f023 0320 	bic.w	r3, r3, #32
 80018ce:	6023      	str	r3, [r4, #0]
 80018d0:	e7f6      	b.n	80018c0 <_printf_i+0x194>
 80018d2:	4616      	mov	r6, r2
 80018d4:	e7bd      	b.n	8001852 <_printf_i+0x126>
 80018d6:	6833      	ldr	r3, [r6, #0]
 80018d8:	6825      	ldr	r5, [r4, #0]
 80018da:	6961      	ldr	r1, [r4, #20]
 80018dc:	1d18      	adds	r0, r3, #4
 80018de:	6030      	str	r0, [r6, #0]
 80018e0:	062e      	lsls	r6, r5, #24
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	d501      	bpl.n	80018ea <_printf_i+0x1be>
 80018e6:	6019      	str	r1, [r3, #0]
 80018e8:	e002      	b.n	80018f0 <_printf_i+0x1c4>
 80018ea:	0668      	lsls	r0, r5, #25
 80018ec:	d5fb      	bpl.n	80018e6 <_printf_i+0x1ba>
 80018ee:	8019      	strh	r1, [r3, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	6123      	str	r3, [r4, #16]
 80018f4:	4616      	mov	r6, r2
 80018f6:	e7bc      	b.n	8001872 <_printf_i+0x146>
 80018f8:	6833      	ldr	r3, [r6, #0]
 80018fa:	1d1a      	adds	r2, r3, #4
 80018fc:	6032      	str	r2, [r6, #0]
 80018fe:	681e      	ldr	r6, [r3, #0]
 8001900:	6862      	ldr	r2, [r4, #4]
 8001902:	2100      	movs	r1, #0
 8001904:	4630      	mov	r0, r6
 8001906:	f7fe fc83 	bl	8000210 <memchr>
 800190a:	b108      	cbz	r0, 8001910 <_printf_i+0x1e4>
 800190c:	1b80      	subs	r0, r0, r6
 800190e:	6060      	str	r0, [r4, #4]
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	6123      	str	r3, [r4, #16]
 8001914:	2300      	movs	r3, #0
 8001916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800191a:	e7aa      	b.n	8001872 <_printf_i+0x146>
 800191c:	6923      	ldr	r3, [r4, #16]
 800191e:	4632      	mov	r2, r6
 8001920:	4649      	mov	r1, r9
 8001922:	4640      	mov	r0, r8
 8001924:	47d0      	blx	sl
 8001926:	3001      	adds	r0, #1
 8001928:	d0ad      	beq.n	8001886 <_printf_i+0x15a>
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	079b      	lsls	r3, r3, #30
 800192e:	d413      	bmi.n	8001958 <_printf_i+0x22c>
 8001930:	68e0      	ldr	r0, [r4, #12]
 8001932:	9b03      	ldr	r3, [sp, #12]
 8001934:	4298      	cmp	r0, r3
 8001936:	bfb8      	it	lt
 8001938:	4618      	movlt	r0, r3
 800193a:	e7a6      	b.n	800188a <_printf_i+0x15e>
 800193c:	2301      	movs	r3, #1
 800193e:	4632      	mov	r2, r6
 8001940:	4649      	mov	r1, r9
 8001942:	4640      	mov	r0, r8
 8001944:	47d0      	blx	sl
 8001946:	3001      	adds	r0, #1
 8001948:	d09d      	beq.n	8001886 <_printf_i+0x15a>
 800194a:	3501      	adds	r5, #1
 800194c:	68e3      	ldr	r3, [r4, #12]
 800194e:	9903      	ldr	r1, [sp, #12]
 8001950:	1a5b      	subs	r3, r3, r1
 8001952:	42ab      	cmp	r3, r5
 8001954:	dcf2      	bgt.n	800193c <_printf_i+0x210>
 8001956:	e7eb      	b.n	8001930 <_printf_i+0x204>
 8001958:	2500      	movs	r5, #0
 800195a:	f104 0619 	add.w	r6, r4, #25
 800195e:	e7f5      	b.n	800194c <_printf_i+0x220>
 8001960:	0800230f 	.word	0x0800230f
 8001964:	08002320 	.word	0x08002320

08001968 <__sflush_r>:
 8001968:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800196c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001970:	0716      	lsls	r6, r2, #28
 8001972:	4605      	mov	r5, r0
 8001974:	460c      	mov	r4, r1
 8001976:	d454      	bmi.n	8001a22 <__sflush_r+0xba>
 8001978:	684b      	ldr	r3, [r1, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	dc02      	bgt.n	8001984 <__sflush_r+0x1c>
 800197e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001980:	2b00      	cmp	r3, #0
 8001982:	dd48      	ble.n	8001a16 <__sflush_r+0xae>
 8001984:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001986:	2e00      	cmp	r6, #0
 8001988:	d045      	beq.n	8001a16 <__sflush_r+0xae>
 800198a:	2300      	movs	r3, #0
 800198c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001990:	682f      	ldr	r7, [r5, #0]
 8001992:	6a21      	ldr	r1, [r4, #32]
 8001994:	602b      	str	r3, [r5, #0]
 8001996:	d030      	beq.n	80019fa <__sflush_r+0x92>
 8001998:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	0759      	lsls	r1, r3, #29
 800199e:	d505      	bpl.n	80019ac <__sflush_r+0x44>
 80019a0:	6863      	ldr	r3, [r4, #4]
 80019a2:	1ad2      	subs	r2, r2, r3
 80019a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80019a6:	b10b      	cbz	r3, 80019ac <__sflush_r+0x44>
 80019a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019aa:	1ad2      	subs	r2, r2, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80019b0:	6a21      	ldr	r1, [r4, #32]
 80019b2:	4628      	mov	r0, r5
 80019b4:	47b0      	blx	r6
 80019b6:	1c43      	adds	r3, r0, #1
 80019b8:	89a3      	ldrh	r3, [r4, #12]
 80019ba:	d106      	bne.n	80019ca <__sflush_r+0x62>
 80019bc:	6829      	ldr	r1, [r5, #0]
 80019be:	291d      	cmp	r1, #29
 80019c0:	d82b      	bhi.n	8001a1a <__sflush_r+0xb2>
 80019c2:	4a2a      	ldr	r2, [pc, #168]	@ (8001a6c <__sflush_r+0x104>)
 80019c4:	40ca      	lsrs	r2, r1
 80019c6:	07d6      	lsls	r6, r2, #31
 80019c8:	d527      	bpl.n	8001a1a <__sflush_r+0xb2>
 80019ca:	2200      	movs	r2, #0
 80019cc:	6062      	str	r2, [r4, #4]
 80019ce:	04d9      	lsls	r1, r3, #19
 80019d0:	6922      	ldr	r2, [r4, #16]
 80019d2:	6022      	str	r2, [r4, #0]
 80019d4:	d504      	bpl.n	80019e0 <__sflush_r+0x78>
 80019d6:	1c42      	adds	r2, r0, #1
 80019d8:	d101      	bne.n	80019de <__sflush_r+0x76>
 80019da:	682b      	ldr	r3, [r5, #0]
 80019dc:	b903      	cbnz	r3, 80019e0 <__sflush_r+0x78>
 80019de:	6560      	str	r0, [r4, #84]	@ 0x54
 80019e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80019e2:	602f      	str	r7, [r5, #0]
 80019e4:	b1b9      	cbz	r1, 8001a16 <__sflush_r+0xae>
 80019e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80019ea:	4299      	cmp	r1, r3
 80019ec:	d002      	beq.n	80019f4 <__sflush_r+0x8c>
 80019ee:	4628      	mov	r0, r5
 80019f0:	f000 f926 	bl	8001c40 <_free_r>
 80019f4:	2300      	movs	r3, #0
 80019f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80019f8:	e00d      	b.n	8001a16 <__sflush_r+0xae>
 80019fa:	2301      	movs	r3, #1
 80019fc:	4628      	mov	r0, r5
 80019fe:	47b0      	blx	r6
 8001a00:	4602      	mov	r2, r0
 8001a02:	1c50      	adds	r0, r2, #1
 8001a04:	d1c9      	bne.n	800199a <__sflush_r+0x32>
 8001a06:	682b      	ldr	r3, [r5, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0c6      	beq.n	800199a <__sflush_r+0x32>
 8001a0c:	2b1d      	cmp	r3, #29
 8001a0e:	d001      	beq.n	8001a14 <__sflush_r+0xac>
 8001a10:	2b16      	cmp	r3, #22
 8001a12:	d11e      	bne.n	8001a52 <__sflush_r+0xea>
 8001a14:	602f      	str	r7, [r5, #0]
 8001a16:	2000      	movs	r0, #0
 8001a18:	e022      	b.n	8001a60 <__sflush_r+0xf8>
 8001a1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	e01b      	b.n	8001a5a <__sflush_r+0xf2>
 8001a22:	690f      	ldr	r7, [r1, #16]
 8001a24:	2f00      	cmp	r7, #0
 8001a26:	d0f6      	beq.n	8001a16 <__sflush_r+0xae>
 8001a28:	0793      	lsls	r3, r2, #30
 8001a2a:	680e      	ldr	r6, [r1, #0]
 8001a2c:	bf08      	it	eq
 8001a2e:	694b      	ldreq	r3, [r1, #20]
 8001a30:	600f      	str	r7, [r1, #0]
 8001a32:	bf18      	it	ne
 8001a34:	2300      	movne	r3, #0
 8001a36:	eba6 0807 	sub.w	r8, r6, r7
 8001a3a:	608b      	str	r3, [r1, #8]
 8001a3c:	f1b8 0f00 	cmp.w	r8, #0
 8001a40:	dde9      	ble.n	8001a16 <__sflush_r+0xae>
 8001a42:	6a21      	ldr	r1, [r4, #32]
 8001a44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001a46:	4643      	mov	r3, r8
 8001a48:	463a      	mov	r2, r7
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	47b0      	blx	r6
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	dc08      	bgt.n	8001a64 <__sflush_r+0xfc>
 8001a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a5a:	81a3      	strh	r3, [r4, #12]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a64:	4407      	add	r7, r0
 8001a66:	eba8 0800 	sub.w	r8, r8, r0
 8001a6a:	e7e7      	b.n	8001a3c <__sflush_r+0xd4>
 8001a6c:	20400001 	.word	0x20400001

08001a70 <_fflush_r>:
 8001a70:	b538      	push	{r3, r4, r5, lr}
 8001a72:	690b      	ldr	r3, [r1, #16]
 8001a74:	4605      	mov	r5, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	b913      	cbnz	r3, 8001a80 <_fflush_r+0x10>
 8001a7a:	2500      	movs	r5, #0
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	bd38      	pop	{r3, r4, r5, pc}
 8001a80:	b118      	cbz	r0, 8001a8a <_fflush_r+0x1a>
 8001a82:	6a03      	ldr	r3, [r0, #32]
 8001a84:	b90b      	cbnz	r3, 8001a8a <_fflush_r+0x1a>
 8001a86:	f7ff fbc7 	bl	8001218 <__sinit>
 8001a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f3      	beq.n	8001a7a <_fflush_r+0xa>
 8001a92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001a94:	07d0      	lsls	r0, r2, #31
 8001a96:	d404      	bmi.n	8001aa2 <_fflush_r+0x32>
 8001a98:	0599      	lsls	r1, r3, #22
 8001a9a:	d402      	bmi.n	8001aa2 <_fflush_r+0x32>
 8001a9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a9e:	f7ff fd04 	bl	80014aa <__retarget_lock_acquire_recursive>
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	f7ff ff5f 	bl	8001968 <__sflush_r>
 8001aaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001aac:	07da      	lsls	r2, r3, #31
 8001aae:	4605      	mov	r5, r0
 8001ab0:	d4e4      	bmi.n	8001a7c <_fflush_r+0xc>
 8001ab2:	89a3      	ldrh	r3, [r4, #12]
 8001ab4:	059b      	lsls	r3, r3, #22
 8001ab6:	d4e1      	bmi.n	8001a7c <_fflush_r+0xc>
 8001ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001aba:	f7ff fcf7 	bl	80014ac <__retarget_lock_release_recursive>
 8001abe:	e7dd      	b.n	8001a7c <_fflush_r+0xc>

08001ac0 <__malloc_lock>:
 8001ac0:	4801      	ldr	r0, [pc, #4]	@ (8001ac8 <__malloc_lock+0x8>)
 8001ac2:	f7ff bcf2 	b.w	80014aa <__retarget_lock_acquire_recursive>
 8001ac6:	bf00      	nop
 8001ac8:	200002f4 	.word	0x200002f4

08001acc <__malloc_unlock>:
 8001acc:	4801      	ldr	r0, [pc, #4]	@ (8001ad4 <__malloc_unlock+0x8>)
 8001ace:	f7ff bced 	b.w	80014ac <__retarget_lock_release_recursive>
 8001ad2:	bf00      	nop
 8001ad4:	200002f4 	.word	0x200002f4

08001ad8 <__sread>:
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	460c      	mov	r4, r1
 8001adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ae0:	f000 f862 	bl	8001ba8 <_read_r>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	bfab      	itete	ge
 8001ae8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001aea:	89a3      	ldrhlt	r3, [r4, #12]
 8001aec:	181b      	addge	r3, r3, r0
 8001aee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001af2:	bfac      	ite	ge
 8001af4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001af6:	81a3      	strhlt	r3, [r4, #12]
 8001af8:	bd10      	pop	{r4, pc}

08001afa <__swrite>:
 8001afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001afe:	461f      	mov	r7, r3
 8001b00:	898b      	ldrh	r3, [r1, #12]
 8001b02:	05db      	lsls	r3, r3, #23
 8001b04:	4605      	mov	r5, r0
 8001b06:	460c      	mov	r4, r1
 8001b08:	4616      	mov	r6, r2
 8001b0a:	d505      	bpl.n	8001b18 <__swrite+0x1e>
 8001b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b10:	2302      	movs	r3, #2
 8001b12:	2200      	movs	r2, #0
 8001b14:	f000 f836 	bl	8001b84 <_lseek_r>
 8001b18:	89a3      	ldrh	r3, [r4, #12]
 8001b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b22:	81a3      	strh	r3, [r4, #12]
 8001b24:	4632      	mov	r2, r6
 8001b26:	463b      	mov	r3, r7
 8001b28:	4628      	mov	r0, r5
 8001b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b2e:	f000 b85d 	b.w	8001bec <_write_r>

08001b32 <__sseek>:
 8001b32:	b510      	push	{r4, lr}
 8001b34:	460c      	mov	r4, r1
 8001b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b3a:	f000 f823 	bl	8001b84 <_lseek_r>
 8001b3e:	1c43      	adds	r3, r0, #1
 8001b40:	89a3      	ldrh	r3, [r4, #12]
 8001b42:	bf15      	itete	ne
 8001b44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001b46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001b4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001b4e:	81a3      	strheq	r3, [r4, #12]
 8001b50:	bf18      	it	ne
 8001b52:	81a3      	strhne	r3, [r4, #12]
 8001b54:	bd10      	pop	{r4, pc}

08001b56 <__sclose>:
 8001b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b5a:	f000 b859 	b.w	8001c10 <_close_r>
	...

08001b60 <fiprintf>:
 8001b60:	b40e      	push	{r1, r2, r3}
 8001b62:	b503      	push	{r0, r1, lr}
 8001b64:	4601      	mov	r1, r0
 8001b66:	ab03      	add	r3, sp, #12
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <fiprintf+0x20>)
 8001b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b6e:	6800      	ldr	r0, [r0, #0]
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	f000 f8d9 	bl	8001d28 <_vfiprintf_r>
 8001b76:	b002      	add	sp, #8
 8001b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b7c:	b003      	add	sp, #12
 8001b7e:	4770      	bx	lr
 8001b80:	20000138 	.word	0x20000138

08001b84 <_lseek_r>:
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4d07      	ldr	r5, [pc, #28]	@ (8001ba4 <_lseek_r+0x20>)
 8001b88:	4604      	mov	r4, r0
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	602a      	str	r2, [r5, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f7ff f898 	bl	8000cc8 <_lseek>
 8001b98:	1c43      	adds	r3, r0, #1
 8001b9a:	d102      	bne.n	8001ba2 <_lseek_r+0x1e>
 8001b9c:	682b      	ldr	r3, [r5, #0]
 8001b9e:	b103      	cbz	r3, 8001ba2 <_lseek_r+0x1e>
 8001ba0:	6023      	str	r3, [r4, #0]
 8001ba2:	bd38      	pop	{r3, r4, r5, pc}
 8001ba4:	20000300 	.word	0x20000300

08001ba8 <_read_r>:
 8001ba8:	b538      	push	{r3, r4, r5, lr}
 8001baa:	4d07      	ldr	r5, [pc, #28]	@ (8001bc8 <_read_r+0x20>)
 8001bac:	4604      	mov	r4, r0
 8001bae:	4608      	mov	r0, r1
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	602a      	str	r2, [r5, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f7ff f826 	bl	8000c08 <_read>
 8001bbc:	1c43      	adds	r3, r0, #1
 8001bbe:	d102      	bne.n	8001bc6 <_read_r+0x1e>
 8001bc0:	682b      	ldr	r3, [r5, #0]
 8001bc2:	b103      	cbz	r3, 8001bc6 <_read_r+0x1e>
 8001bc4:	6023      	str	r3, [r4, #0]
 8001bc6:	bd38      	pop	{r3, r4, r5, pc}
 8001bc8:	20000300 	.word	0x20000300

08001bcc <_sbrk_r>:
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4d06      	ldr	r5, [pc, #24]	@ (8001be8 <_sbrk_r+0x1c>)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	602b      	str	r3, [r5, #0]
 8001bd8:	f7ff f884 	bl	8000ce4 <_sbrk>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d102      	bne.n	8001be6 <_sbrk_r+0x1a>
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	b103      	cbz	r3, 8001be6 <_sbrk_r+0x1a>
 8001be4:	6023      	str	r3, [r4, #0]
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
 8001be8:	20000300 	.word	0x20000300

08001bec <_write_r>:
 8001bec:	b538      	push	{r3, r4, r5, lr}
 8001bee:	4d07      	ldr	r5, [pc, #28]	@ (8001c0c <_write_r+0x20>)
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	4608      	mov	r0, r1
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	602a      	str	r2, [r5, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	f7ff f821 	bl	8000c42 <_write>
 8001c00:	1c43      	adds	r3, r0, #1
 8001c02:	d102      	bne.n	8001c0a <_write_r+0x1e>
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	b103      	cbz	r3, 8001c0a <_write_r+0x1e>
 8001c08:	6023      	str	r3, [r4, #0]
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
 8001c0c:	20000300 	.word	0x20000300

08001c10 <_close_r>:
 8001c10:	b538      	push	{r3, r4, r5, lr}
 8001c12:	4d06      	ldr	r5, [pc, #24]	@ (8001c2c <_close_r+0x1c>)
 8001c14:	2300      	movs	r3, #0
 8001c16:	4604      	mov	r4, r0
 8001c18:	4608      	mov	r0, r1
 8001c1a:	602b      	str	r3, [r5, #0]
 8001c1c:	f7ff f82d 	bl	8000c7a <_close>
 8001c20:	1c43      	adds	r3, r0, #1
 8001c22:	d102      	bne.n	8001c2a <_close_r+0x1a>
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	b103      	cbz	r3, 8001c2a <_close_r+0x1a>
 8001c28:	6023      	str	r3, [r4, #0]
 8001c2a:	bd38      	pop	{r3, r4, r5, pc}
 8001c2c:	20000300 	.word	0x20000300

08001c30 <abort>:
 8001c30:	b508      	push	{r3, lr}
 8001c32:	2006      	movs	r0, #6
 8001c34:	f000 faae 	bl	8002194 <raise>
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7fe ffda 	bl	8000bf2 <_exit>
	...

08001c40 <_free_r>:
 8001c40:	b538      	push	{r3, r4, r5, lr}
 8001c42:	4605      	mov	r5, r0
 8001c44:	2900      	cmp	r1, #0
 8001c46:	d041      	beq.n	8001ccc <_free_r+0x8c>
 8001c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c4c:	1f0c      	subs	r4, r1, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bfb8      	it	lt
 8001c52:	18e4      	addlt	r4, r4, r3
 8001c54:	f7ff ff34 	bl	8001ac0 <__malloc_lock>
 8001c58:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd0 <_free_r+0x90>)
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	b933      	cbnz	r3, 8001c6c <_free_r+0x2c>
 8001c5e:	6063      	str	r3, [r4, #4]
 8001c60:	6014      	str	r4, [r2, #0]
 8001c62:	4628      	mov	r0, r5
 8001c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c68:	f7ff bf30 	b.w	8001acc <__malloc_unlock>
 8001c6c:	42a3      	cmp	r3, r4
 8001c6e:	d908      	bls.n	8001c82 <_free_r+0x42>
 8001c70:	6820      	ldr	r0, [r4, #0]
 8001c72:	1821      	adds	r1, r4, r0
 8001c74:	428b      	cmp	r3, r1
 8001c76:	bf01      	itttt	eq
 8001c78:	6819      	ldreq	r1, [r3, #0]
 8001c7a:	685b      	ldreq	r3, [r3, #4]
 8001c7c:	1809      	addeq	r1, r1, r0
 8001c7e:	6021      	streq	r1, [r4, #0]
 8001c80:	e7ed      	b.n	8001c5e <_free_r+0x1e>
 8001c82:	461a      	mov	r2, r3
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	b10b      	cbz	r3, 8001c8c <_free_r+0x4c>
 8001c88:	42a3      	cmp	r3, r4
 8001c8a:	d9fa      	bls.n	8001c82 <_free_r+0x42>
 8001c8c:	6811      	ldr	r1, [r2, #0]
 8001c8e:	1850      	adds	r0, r2, r1
 8001c90:	42a0      	cmp	r0, r4
 8001c92:	d10b      	bne.n	8001cac <_free_r+0x6c>
 8001c94:	6820      	ldr	r0, [r4, #0]
 8001c96:	4401      	add	r1, r0
 8001c98:	1850      	adds	r0, r2, r1
 8001c9a:	4283      	cmp	r3, r0
 8001c9c:	6011      	str	r1, [r2, #0]
 8001c9e:	d1e0      	bne.n	8001c62 <_free_r+0x22>
 8001ca0:	6818      	ldr	r0, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	6053      	str	r3, [r2, #4]
 8001ca6:	4408      	add	r0, r1
 8001ca8:	6010      	str	r0, [r2, #0]
 8001caa:	e7da      	b.n	8001c62 <_free_r+0x22>
 8001cac:	d902      	bls.n	8001cb4 <_free_r+0x74>
 8001cae:	230c      	movs	r3, #12
 8001cb0:	602b      	str	r3, [r5, #0]
 8001cb2:	e7d6      	b.n	8001c62 <_free_r+0x22>
 8001cb4:	6820      	ldr	r0, [r4, #0]
 8001cb6:	1821      	adds	r1, r4, r0
 8001cb8:	428b      	cmp	r3, r1
 8001cba:	bf04      	itt	eq
 8001cbc:	6819      	ldreq	r1, [r3, #0]
 8001cbe:	685b      	ldreq	r3, [r3, #4]
 8001cc0:	6063      	str	r3, [r4, #4]
 8001cc2:	bf04      	itt	eq
 8001cc4:	1809      	addeq	r1, r1, r0
 8001cc6:	6021      	streq	r1, [r4, #0]
 8001cc8:	6054      	str	r4, [r2, #4]
 8001cca:	e7ca      	b.n	8001c62 <_free_r+0x22>
 8001ccc:	bd38      	pop	{r3, r4, r5, pc}
 8001cce:	bf00      	nop
 8001cd0:	200002fc 	.word	0x200002fc

08001cd4 <__sfputc_r>:
 8001cd4:	6893      	ldr	r3, [r2, #8]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	b410      	push	{r4}
 8001cdc:	6093      	str	r3, [r2, #8]
 8001cde:	da08      	bge.n	8001cf2 <__sfputc_r+0x1e>
 8001ce0:	6994      	ldr	r4, [r2, #24]
 8001ce2:	42a3      	cmp	r3, r4
 8001ce4:	db01      	blt.n	8001cea <__sfputc_r+0x16>
 8001ce6:	290a      	cmp	r1, #10
 8001ce8:	d103      	bne.n	8001cf2 <__sfputc_r+0x1e>
 8001cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cee:	f000 b933 	b.w	8001f58 <__swbuf_r>
 8001cf2:	6813      	ldr	r3, [r2, #0]
 8001cf4:	1c58      	adds	r0, r3, #1
 8001cf6:	6010      	str	r0, [r2, #0]
 8001cf8:	7019      	strb	r1, [r3, #0]
 8001cfa:	4608      	mov	r0, r1
 8001cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <__sfputs_r>:
 8001d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d04:	4606      	mov	r6, r0
 8001d06:	460f      	mov	r7, r1
 8001d08:	4614      	mov	r4, r2
 8001d0a:	18d5      	adds	r5, r2, r3
 8001d0c:	42ac      	cmp	r4, r5
 8001d0e:	d101      	bne.n	8001d14 <__sfputs_r+0x12>
 8001d10:	2000      	movs	r0, #0
 8001d12:	e007      	b.n	8001d24 <__sfputs_r+0x22>
 8001d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d18:	463a      	mov	r2, r7
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff ffda 	bl	8001cd4 <__sfputc_r>
 8001d20:	1c43      	adds	r3, r0, #1
 8001d22:	d1f3      	bne.n	8001d0c <__sfputs_r+0xa>
 8001d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d28 <_vfiprintf_r>:
 8001d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d2c:	460d      	mov	r5, r1
 8001d2e:	b09d      	sub	sp, #116	@ 0x74
 8001d30:	4614      	mov	r4, r2
 8001d32:	4698      	mov	r8, r3
 8001d34:	4606      	mov	r6, r0
 8001d36:	b118      	cbz	r0, 8001d40 <_vfiprintf_r+0x18>
 8001d38:	6a03      	ldr	r3, [r0, #32]
 8001d3a:	b90b      	cbnz	r3, 8001d40 <_vfiprintf_r+0x18>
 8001d3c:	f7ff fa6c 	bl	8001218 <__sinit>
 8001d40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d42:	07d9      	lsls	r1, r3, #31
 8001d44:	d405      	bmi.n	8001d52 <_vfiprintf_r+0x2a>
 8001d46:	89ab      	ldrh	r3, [r5, #12]
 8001d48:	059a      	lsls	r2, r3, #22
 8001d4a:	d402      	bmi.n	8001d52 <_vfiprintf_r+0x2a>
 8001d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d4e:	f7ff fbac 	bl	80014aa <__retarget_lock_acquire_recursive>
 8001d52:	89ab      	ldrh	r3, [r5, #12]
 8001d54:	071b      	lsls	r3, r3, #28
 8001d56:	d501      	bpl.n	8001d5c <_vfiprintf_r+0x34>
 8001d58:	692b      	ldr	r3, [r5, #16]
 8001d5a:	b99b      	cbnz	r3, 8001d84 <_vfiprintf_r+0x5c>
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f000 f938 	bl	8001fd4 <__swsetup_r>
 8001d64:	b170      	cbz	r0, 8001d84 <_vfiprintf_r+0x5c>
 8001d66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d68:	07dc      	lsls	r4, r3, #31
 8001d6a:	d504      	bpl.n	8001d76 <_vfiprintf_r+0x4e>
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d70:	b01d      	add	sp, #116	@ 0x74
 8001d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d76:	89ab      	ldrh	r3, [r5, #12]
 8001d78:	0598      	lsls	r0, r3, #22
 8001d7a:	d4f7      	bmi.n	8001d6c <_vfiprintf_r+0x44>
 8001d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d7e:	f7ff fb95 	bl	80014ac <__retarget_lock_release_recursive>
 8001d82:	e7f3      	b.n	8001d6c <_vfiprintf_r+0x44>
 8001d84:	2300      	movs	r3, #0
 8001d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d88:	2320      	movs	r3, #32
 8001d8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d92:	2330      	movs	r3, #48	@ 0x30
 8001d94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001f44 <_vfiprintf_r+0x21c>
 8001d98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d9c:	f04f 0901 	mov.w	r9, #1
 8001da0:	4623      	mov	r3, r4
 8001da2:	469a      	mov	sl, r3
 8001da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001da8:	b10a      	cbz	r2, 8001dae <_vfiprintf_r+0x86>
 8001daa:	2a25      	cmp	r2, #37	@ 0x25
 8001dac:	d1f9      	bne.n	8001da2 <_vfiprintf_r+0x7a>
 8001dae:	ebba 0b04 	subs.w	fp, sl, r4
 8001db2:	d00b      	beq.n	8001dcc <_vfiprintf_r+0xa4>
 8001db4:	465b      	mov	r3, fp
 8001db6:	4622      	mov	r2, r4
 8001db8:	4629      	mov	r1, r5
 8001dba:	4630      	mov	r0, r6
 8001dbc:	f7ff ffa1 	bl	8001d02 <__sfputs_r>
 8001dc0:	3001      	adds	r0, #1
 8001dc2:	f000 80a7 	beq.w	8001f14 <_vfiprintf_r+0x1ec>
 8001dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001dc8:	445a      	add	r2, fp
 8001dca:	9209      	str	r2, [sp, #36]	@ 0x24
 8001dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 809f 	beq.w	8001f14 <_vfiprintf_r+0x1ec>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001de0:	f10a 0a01 	add.w	sl, sl, #1
 8001de4:	9304      	str	r3, [sp, #16]
 8001de6:	9307      	str	r3, [sp, #28]
 8001de8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001dec:	931a      	str	r3, [sp, #104]	@ 0x68
 8001dee:	4654      	mov	r4, sl
 8001df0:	2205      	movs	r2, #5
 8001df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001df6:	4853      	ldr	r0, [pc, #332]	@ (8001f44 <_vfiprintf_r+0x21c>)
 8001df8:	f7fe fa0a 	bl	8000210 <memchr>
 8001dfc:	9a04      	ldr	r2, [sp, #16]
 8001dfe:	b9d8      	cbnz	r0, 8001e38 <_vfiprintf_r+0x110>
 8001e00:	06d1      	lsls	r1, r2, #27
 8001e02:	bf44      	itt	mi
 8001e04:	2320      	movmi	r3, #32
 8001e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e0a:	0713      	lsls	r3, r2, #28
 8001e0c:	bf44      	itt	mi
 8001e0e:	232b      	movmi	r3, #43	@ 0x2b
 8001e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e14:	f89a 3000 	ldrb.w	r3, [sl]
 8001e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e1a:	d015      	beq.n	8001e48 <_vfiprintf_r+0x120>
 8001e1c:	9a07      	ldr	r2, [sp, #28]
 8001e1e:	4654      	mov	r4, sl
 8001e20:	2000      	movs	r0, #0
 8001e22:	f04f 0c0a 	mov.w	ip, #10
 8001e26:	4621      	mov	r1, r4
 8001e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e2c:	3b30      	subs	r3, #48	@ 0x30
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	d94b      	bls.n	8001eca <_vfiprintf_r+0x1a2>
 8001e32:	b1b0      	cbz	r0, 8001e62 <_vfiprintf_r+0x13a>
 8001e34:	9207      	str	r2, [sp, #28]
 8001e36:	e014      	b.n	8001e62 <_vfiprintf_r+0x13a>
 8001e38:	eba0 0308 	sub.w	r3, r0, r8
 8001e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	9304      	str	r3, [sp, #16]
 8001e44:	46a2      	mov	sl, r4
 8001e46:	e7d2      	b.n	8001dee <_vfiprintf_r+0xc6>
 8001e48:	9b03      	ldr	r3, [sp, #12]
 8001e4a:	1d19      	adds	r1, r3, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	9103      	str	r1, [sp, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bfbb      	ittet	lt
 8001e54:	425b      	neglt	r3, r3
 8001e56:	f042 0202 	orrlt.w	r2, r2, #2
 8001e5a:	9307      	strge	r3, [sp, #28]
 8001e5c:	9307      	strlt	r3, [sp, #28]
 8001e5e:	bfb8      	it	lt
 8001e60:	9204      	strlt	r2, [sp, #16]
 8001e62:	7823      	ldrb	r3, [r4, #0]
 8001e64:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e66:	d10a      	bne.n	8001e7e <_vfiprintf_r+0x156>
 8001e68:	7863      	ldrb	r3, [r4, #1]
 8001e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e6c:	d132      	bne.n	8001ed4 <_vfiprintf_r+0x1ac>
 8001e6e:	9b03      	ldr	r3, [sp, #12]
 8001e70:	1d1a      	adds	r2, r3, #4
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	9203      	str	r2, [sp, #12]
 8001e76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e7a:	3402      	adds	r4, #2
 8001e7c:	9305      	str	r3, [sp, #20]
 8001e7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001f54 <_vfiprintf_r+0x22c>
 8001e82:	7821      	ldrb	r1, [r4, #0]
 8001e84:	2203      	movs	r2, #3
 8001e86:	4650      	mov	r0, sl
 8001e88:	f7fe f9c2 	bl	8000210 <memchr>
 8001e8c:	b138      	cbz	r0, 8001e9e <_vfiprintf_r+0x176>
 8001e8e:	9b04      	ldr	r3, [sp, #16]
 8001e90:	eba0 000a 	sub.w	r0, r0, sl
 8001e94:	2240      	movs	r2, #64	@ 0x40
 8001e96:	4082      	lsls	r2, r0
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	3401      	adds	r4, #1
 8001e9c:	9304      	str	r3, [sp, #16]
 8001e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ea2:	4829      	ldr	r0, [pc, #164]	@ (8001f48 <_vfiprintf_r+0x220>)
 8001ea4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001ea8:	2206      	movs	r2, #6
 8001eaa:	f7fe f9b1 	bl	8000210 <memchr>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d03f      	beq.n	8001f32 <_vfiprintf_r+0x20a>
 8001eb2:	4b26      	ldr	r3, [pc, #152]	@ (8001f4c <_vfiprintf_r+0x224>)
 8001eb4:	bb1b      	cbnz	r3, 8001efe <_vfiprintf_r+0x1d6>
 8001eb6:	9b03      	ldr	r3, [sp, #12]
 8001eb8:	3307      	adds	r3, #7
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	9303      	str	r3, [sp, #12]
 8001ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ec4:	443b      	add	r3, r7
 8001ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ec8:	e76a      	b.n	8001da0 <_vfiprintf_r+0x78>
 8001eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ece:	460c      	mov	r4, r1
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	e7a8      	b.n	8001e26 <_vfiprintf_r+0xfe>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	3401      	adds	r4, #1
 8001ed8:	9305      	str	r3, [sp, #20]
 8001eda:	4619      	mov	r1, r3
 8001edc:	f04f 0c0a 	mov.w	ip, #10
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ee6:	3a30      	subs	r2, #48	@ 0x30
 8001ee8:	2a09      	cmp	r2, #9
 8001eea:	d903      	bls.n	8001ef4 <_vfiprintf_r+0x1cc>
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0c6      	beq.n	8001e7e <_vfiprintf_r+0x156>
 8001ef0:	9105      	str	r1, [sp, #20]
 8001ef2:	e7c4      	b.n	8001e7e <_vfiprintf_r+0x156>
 8001ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ef8:	4604      	mov	r4, r0
 8001efa:	2301      	movs	r3, #1
 8001efc:	e7f0      	b.n	8001ee0 <_vfiprintf_r+0x1b8>
 8001efe:	ab03      	add	r3, sp, #12
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	462a      	mov	r2, r5
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <_vfiprintf_r+0x228>)
 8001f06:	a904      	add	r1, sp, #16
 8001f08:	4630      	mov	r0, r6
 8001f0a:	f3af 8000 	nop.w
 8001f0e:	4607      	mov	r7, r0
 8001f10:	1c78      	adds	r0, r7, #1
 8001f12:	d1d6      	bne.n	8001ec2 <_vfiprintf_r+0x19a>
 8001f14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f16:	07d9      	lsls	r1, r3, #31
 8001f18:	d405      	bmi.n	8001f26 <_vfiprintf_r+0x1fe>
 8001f1a:	89ab      	ldrh	r3, [r5, #12]
 8001f1c:	059a      	lsls	r2, r3, #22
 8001f1e:	d402      	bmi.n	8001f26 <_vfiprintf_r+0x1fe>
 8001f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f22:	f7ff fac3 	bl	80014ac <__retarget_lock_release_recursive>
 8001f26:	89ab      	ldrh	r3, [r5, #12]
 8001f28:	065b      	lsls	r3, r3, #25
 8001f2a:	f53f af1f 	bmi.w	8001d6c <_vfiprintf_r+0x44>
 8001f2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001f30:	e71e      	b.n	8001d70 <_vfiprintf_r+0x48>
 8001f32:	ab03      	add	r3, sp, #12
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	462a      	mov	r2, r5
 8001f38:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <_vfiprintf_r+0x228>)
 8001f3a:	a904      	add	r1, sp, #16
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	f7ff fbf5 	bl	800172c <_printf_i>
 8001f42:	e7e4      	b.n	8001f0e <_vfiprintf_r+0x1e6>
 8001f44:	08002331 	.word	0x08002331
 8001f48:	0800233b 	.word	0x0800233b
 8001f4c:	00000000 	.word	0x00000000
 8001f50:	08001d03 	.word	0x08001d03
 8001f54:	08002337 	.word	0x08002337

08001f58 <__swbuf_r>:
 8001f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5a:	460e      	mov	r6, r1
 8001f5c:	4614      	mov	r4, r2
 8001f5e:	4605      	mov	r5, r0
 8001f60:	b118      	cbz	r0, 8001f6a <__swbuf_r+0x12>
 8001f62:	6a03      	ldr	r3, [r0, #32]
 8001f64:	b90b      	cbnz	r3, 8001f6a <__swbuf_r+0x12>
 8001f66:	f7ff f957 	bl	8001218 <__sinit>
 8001f6a:	69a3      	ldr	r3, [r4, #24]
 8001f6c:	60a3      	str	r3, [r4, #8]
 8001f6e:	89a3      	ldrh	r3, [r4, #12]
 8001f70:	071a      	lsls	r2, r3, #28
 8001f72:	d501      	bpl.n	8001f78 <__swbuf_r+0x20>
 8001f74:	6923      	ldr	r3, [r4, #16]
 8001f76:	b943      	cbnz	r3, 8001f8a <__swbuf_r+0x32>
 8001f78:	4621      	mov	r1, r4
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	f000 f82a 	bl	8001fd4 <__swsetup_r>
 8001f80:	b118      	cbz	r0, 8001f8a <__swbuf_r+0x32>
 8001f82:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001f86:	4638      	mov	r0, r7
 8001f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	6922      	ldr	r2, [r4, #16]
 8001f8e:	1a98      	subs	r0, r3, r2
 8001f90:	6963      	ldr	r3, [r4, #20]
 8001f92:	b2f6      	uxtb	r6, r6
 8001f94:	4283      	cmp	r3, r0
 8001f96:	4637      	mov	r7, r6
 8001f98:	dc05      	bgt.n	8001fa6 <__swbuf_r+0x4e>
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f7ff fd67 	bl	8001a70 <_fflush_r>
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d1ed      	bne.n	8001f82 <__swbuf_r+0x2a>
 8001fa6:	68a3      	ldr	r3, [r4, #8]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	60a3      	str	r3, [r4, #8]
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	6022      	str	r2, [r4, #0]
 8001fb2:	701e      	strb	r6, [r3, #0]
 8001fb4:	6962      	ldr	r2, [r4, #20]
 8001fb6:	1c43      	adds	r3, r0, #1
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d004      	beq.n	8001fc6 <__swbuf_r+0x6e>
 8001fbc:	89a3      	ldrh	r3, [r4, #12]
 8001fbe:	07db      	lsls	r3, r3, #31
 8001fc0:	d5e1      	bpl.n	8001f86 <__swbuf_r+0x2e>
 8001fc2:	2e0a      	cmp	r6, #10
 8001fc4:	d1df      	bne.n	8001f86 <__swbuf_r+0x2e>
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	4628      	mov	r0, r5
 8001fca:	f7ff fd51 	bl	8001a70 <_fflush_r>
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	d0d9      	beq.n	8001f86 <__swbuf_r+0x2e>
 8001fd2:	e7d6      	b.n	8001f82 <__swbuf_r+0x2a>

08001fd4 <__swsetup_r>:
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	4b29      	ldr	r3, [pc, #164]	@ (800207c <__swsetup_r+0xa8>)
 8001fd8:	4605      	mov	r5, r0
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	460c      	mov	r4, r1
 8001fde:	b118      	cbz	r0, 8001fe8 <__swsetup_r+0x14>
 8001fe0:	6a03      	ldr	r3, [r0, #32]
 8001fe2:	b90b      	cbnz	r3, 8001fe8 <__swsetup_r+0x14>
 8001fe4:	f7ff f918 	bl	8001218 <__sinit>
 8001fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fec:	0719      	lsls	r1, r3, #28
 8001fee:	d422      	bmi.n	8002036 <__swsetup_r+0x62>
 8001ff0:	06da      	lsls	r2, r3, #27
 8001ff2:	d407      	bmi.n	8002004 <__swsetup_r+0x30>
 8001ff4:	2209      	movs	r2, #9
 8001ff6:	602a      	str	r2, [r5, #0]
 8001ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ffc:	81a3      	strh	r3, [r4, #12]
 8001ffe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002002:	e033      	b.n	800206c <__swsetup_r+0x98>
 8002004:	0758      	lsls	r0, r3, #29
 8002006:	d512      	bpl.n	800202e <__swsetup_r+0x5a>
 8002008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800200a:	b141      	cbz	r1, 800201e <__swsetup_r+0x4a>
 800200c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002010:	4299      	cmp	r1, r3
 8002012:	d002      	beq.n	800201a <__swsetup_r+0x46>
 8002014:	4628      	mov	r0, r5
 8002016:	f7ff fe13 	bl	8001c40 <_free_r>
 800201a:	2300      	movs	r3, #0
 800201c:	6363      	str	r3, [r4, #52]	@ 0x34
 800201e:	89a3      	ldrh	r3, [r4, #12]
 8002020:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002024:	81a3      	strh	r3, [r4, #12]
 8002026:	2300      	movs	r3, #0
 8002028:	6063      	str	r3, [r4, #4]
 800202a:	6923      	ldr	r3, [r4, #16]
 800202c:	6023      	str	r3, [r4, #0]
 800202e:	89a3      	ldrh	r3, [r4, #12]
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	81a3      	strh	r3, [r4, #12]
 8002036:	6923      	ldr	r3, [r4, #16]
 8002038:	b94b      	cbnz	r3, 800204e <__swsetup_r+0x7a>
 800203a:	89a3      	ldrh	r3, [r4, #12]
 800203c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002044:	d003      	beq.n	800204e <__swsetup_r+0x7a>
 8002046:	4621      	mov	r1, r4
 8002048:	4628      	mov	r0, r5
 800204a:	f000 f83f 	bl	80020cc <__smakebuf_r>
 800204e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002052:	f013 0201 	ands.w	r2, r3, #1
 8002056:	d00a      	beq.n	800206e <__swsetup_r+0x9a>
 8002058:	2200      	movs	r2, #0
 800205a:	60a2      	str	r2, [r4, #8]
 800205c:	6962      	ldr	r2, [r4, #20]
 800205e:	4252      	negs	r2, r2
 8002060:	61a2      	str	r2, [r4, #24]
 8002062:	6922      	ldr	r2, [r4, #16]
 8002064:	b942      	cbnz	r2, 8002078 <__swsetup_r+0xa4>
 8002066:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800206a:	d1c5      	bne.n	8001ff8 <__swsetup_r+0x24>
 800206c:	bd38      	pop	{r3, r4, r5, pc}
 800206e:	0799      	lsls	r1, r3, #30
 8002070:	bf58      	it	pl
 8002072:	6962      	ldrpl	r2, [r4, #20]
 8002074:	60a2      	str	r2, [r4, #8]
 8002076:	e7f4      	b.n	8002062 <__swsetup_r+0x8e>
 8002078:	2000      	movs	r0, #0
 800207a:	e7f7      	b.n	800206c <__swsetup_r+0x98>
 800207c:	20000138 	.word	0x20000138

08002080 <__swhatbuf_r>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	460c      	mov	r4, r1
 8002084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002088:	2900      	cmp	r1, #0
 800208a:	b096      	sub	sp, #88	@ 0x58
 800208c:	4615      	mov	r5, r2
 800208e:	461e      	mov	r6, r3
 8002090:	da0d      	bge.n	80020ae <__swhatbuf_r+0x2e>
 8002092:	89a3      	ldrh	r3, [r4, #12]
 8002094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	bf14      	ite	ne
 800209e:	2340      	movne	r3, #64	@ 0x40
 80020a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80020a4:	2000      	movs	r0, #0
 80020a6:	6031      	str	r1, [r6, #0]
 80020a8:	602b      	str	r3, [r5, #0]
 80020aa:	b016      	add	sp, #88	@ 0x58
 80020ac:	bd70      	pop	{r4, r5, r6, pc}
 80020ae:	466a      	mov	r2, sp
 80020b0:	f000 f89c 	bl	80021ec <_fstat_r>
 80020b4:	2800      	cmp	r0, #0
 80020b6:	dbec      	blt.n	8002092 <__swhatbuf_r+0x12>
 80020b8:	9901      	ldr	r1, [sp, #4]
 80020ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80020be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80020c2:	4259      	negs	r1, r3
 80020c4:	4159      	adcs	r1, r3
 80020c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ca:	e7eb      	b.n	80020a4 <__swhatbuf_r+0x24>

080020cc <__smakebuf_r>:
 80020cc:	898b      	ldrh	r3, [r1, #12]
 80020ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020d0:	079d      	lsls	r5, r3, #30
 80020d2:	4606      	mov	r6, r0
 80020d4:	460c      	mov	r4, r1
 80020d6:	d507      	bpl.n	80020e8 <__smakebuf_r+0x1c>
 80020d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	6123      	str	r3, [r4, #16]
 80020e0:	2301      	movs	r3, #1
 80020e2:	6163      	str	r3, [r4, #20]
 80020e4:	b003      	add	sp, #12
 80020e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e8:	ab01      	add	r3, sp, #4
 80020ea:	466a      	mov	r2, sp
 80020ec:	f7ff ffc8 	bl	8002080 <__swhatbuf_r>
 80020f0:	9f00      	ldr	r7, [sp, #0]
 80020f2:	4605      	mov	r5, r0
 80020f4:	4639      	mov	r1, r7
 80020f6:	4630      	mov	r0, r6
 80020f8:	f7ff fa2a 	bl	8001550 <_malloc_r>
 80020fc:	b948      	cbnz	r0, 8002112 <__smakebuf_r+0x46>
 80020fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002102:	059a      	lsls	r2, r3, #22
 8002104:	d4ee      	bmi.n	80020e4 <__smakebuf_r+0x18>
 8002106:	f023 0303 	bic.w	r3, r3, #3
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	81a3      	strh	r3, [r4, #12]
 8002110:	e7e2      	b.n	80020d8 <__smakebuf_r+0xc>
 8002112:	89a3      	ldrh	r3, [r4, #12]
 8002114:	6020      	str	r0, [r4, #0]
 8002116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800211a:	81a3      	strh	r3, [r4, #12]
 800211c:	9b01      	ldr	r3, [sp, #4]
 800211e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002122:	b15b      	cbz	r3, 800213c <__smakebuf_r+0x70>
 8002124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002128:	4630      	mov	r0, r6
 800212a:	f000 f83b 	bl	80021a4 <_isatty_r>
 800212e:	b128      	cbz	r0, 800213c <__smakebuf_r+0x70>
 8002130:	89a3      	ldrh	r3, [r4, #12]
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	81a3      	strh	r3, [r4, #12]
 800213c:	89a3      	ldrh	r3, [r4, #12]
 800213e:	431d      	orrs	r5, r3
 8002140:	81a5      	strh	r5, [r4, #12]
 8002142:	e7cf      	b.n	80020e4 <__smakebuf_r+0x18>

08002144 <_raise_r>:
 8002144:	291f      	cmp	r1, #31
 8002146:	b538      	push	{r3, r4, r5, lr}
 8002148:	4605      	mov	r5, r0
 800214a:	460c      	mov	r4, r1
 800214c:	d904      	bls.n	8002158 <_raise_r+0x14>
 800214e:	2316      	movs	r3, #22
 8002150:	6003      	str	r3, [r0, #0]
 8002152:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002156:	bd38      	pop	{r3, r4, r5, pc}
 8002158:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800215a:	b112      	cbz	r2, 8002162 <_raise_r+0x1e>
 800215c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002160:	b94b      	cbnz	r3, 8002176 <_raise_r+0x32>
 8002162:	4628      	mov	r0, r5
 8002164:	f000 f840 	bl	80021e8 <_getpid_r>
 8002168:	4622      	mov	r2, r4
 800216a:	4601      	mov	r1, r0
 800216c:	4628      	mov	r0, r5
 800216e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002172:	f000 b827 	b.w	80021c4 <_kill_r>
 8002176:	2b01      	cmp	r3, #1
 8002178:	d00a      	beq.n	8002190 <_raise_r+0x4c>
 800217a:	1c59      	adds	r1, r3, #1
 800217c:	d103      	bne.n	8002186 <_raise_r+0x42>
 800217e:	2316      	movs	r3, #22
 8002180:	6003      	str	r3, [r0, #0]
 8002182:	2001      	movs	r0, #1
 8002184:	e7e7      	b.n	8002156 <_raise_r+0x12>
 8002186:	2100      	movs	r1, #0
 8002188:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800218c:	4620      	mov	r0, r4
 800218e:	4798      	blx	r3
 8002190:	2000      	movs	r0, #0
 8002192:	e7e0      	b.n	8002156 <_raise_r+0x12>

08002194 <raise>:
 8002194:	4b02      	ldr	r3, [pc, #8]	@ (80021a0 <raise+0xc>)
 8002196:	4601      	mov	r1, r0
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	f7ff bfd3 	b.w	8002144 <_raise_r>
 800219e:	bf00      	nop
 80021a0:	20000138 	.word	0x20000138

080021a4 <_isatty_r>:
 80021a4:	b538      	push	{r3, r4, r5, lr}
 80021a6:	4d06      	ldr	r5, [pc, #24]	@ (80021c0 <_isatty_r+0x1c>)
 80021a8:	2300      	movs	r3, #0
 80021aa:	4604      	mov	r4, r0
 80021ac:	4608      	mov	r0, r1
 80021ae:	602b      	str	r3, [r5, #0]
 80021b0:	f7fe fd7f 	bl	8000cb2 <_isatty>
 80021b4:	1c43      	adds	r3, r0, #1
 80021b6:	d102      	bne.n	80021be <_isatty_r+0x1a>
 80021b8:	682b      	ldr	r3, [r5, #0]
 80021ba:	b103      	cbz	r3, 80021be <_isatty_r+0x1a>
 80021bc:	6023      	str	r3, [r4, #0]
 80021be:	bd38      	pop	{r3, r4, r5, pc}
 80021c0:	20000300 	.word	0x20000300

080021c4 <_kill_r>:
 80021c4:	b538      	push	{r3, r4, r5, lr}
 80021c6:	4d07      	ldr	r5, [pc, #28]	@ (80021e4 <_kill_r+0x20>)
 80021c8:	2300      	movs	r3, #0
 80021ca:	4604      	mov	r4, r0
 80021cc:	4608      	mov	r0, r1
 80021ce:	4611      	mov	r1, r2
 80021d0:	602b      	str	r3, [r5, #0]
 80021d2:	f7fe fcfe 	bl	8000bd2 <_kill>
 80021d6:	1c43      	adds	r3, r0, #1
 80021d8:	d102      	bne.n	80021e0 <_kill_r+0x1c>
 80021da:	682b      	ldr	r3, [r5, #0]
 80021dc:	b103      	cbz	r3, 80021e0 <_kill_r+0x1c>
 80021de:	6023      	str	r3, [r4, #0]
 80021e0:	bd38      	pop	{r3, r4, r5, pc}
 80021e2:	bf00      	nop
 80021e4:	20000300 	.word	0x20000300

080021e8 <_getpid_r>:
 80021e8:	f7fe bceb 	b.w	8000bc2 <_getpid>

080021ec <_fstat_r>:
 80021ec:	b538      	push	{r3, r4, r5, lr}
 80021ee:	4d07      	ldr	r5, [pc, #28]	@ (800220c <_fstat_r+0x20>)
 80021f0:	2300      	movs	r3, #0
 80021f2:	4604      	mov	r4, r0
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	602b      	str	r3, [r5, #0]
 80021fa:	f7fe fd4a 	bl	8000c92 <_fstat>
 80021fe:	1c43      	adds	r3, r0, #1
 8002200:	d102      	bne.n	8002208 <_fstat_r+0x1c>
 8002202:	682b      	ldr	r3, [r5, #0]
 8002204:	b103      	cbz	r3, 8002208 <_fstat_r+0x1c>
 8002206:	6023      	str	r3, [r4, #0]
 8002208:	bd38      	pop	{r3, r4, r5, pc}
 800220a:	bf00      	nop
 800220c:	20000300 	.word	0x20000300

08002210 <_init>:
 8002210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002212:	bf00      	nop
 8002214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002216:	bc08      	pop	{r3}
 8002218:	469e      	mov	lr, r3
 800221a:	4770      	bx	lr

0800221c <_fini>:
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221e:	bf00      	nop
 8002220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002222:	bc08      	pop	{r3}
 8002224:	469e      	mov	lr, r3
 8002226:	4770      	bx	lr
