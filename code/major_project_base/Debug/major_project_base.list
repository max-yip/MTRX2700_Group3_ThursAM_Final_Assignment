
major_project_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ae8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007c78  08007c78  00008c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d50  08007d50  00009188  2**0
                  CONTENTS
  4 .ARM          00000008  08007d50  08007d50  00008d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d58  08007d58  00009188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d58  08007d58  00008d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d5c  08007d5c  00008d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08007d60  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009188  2**0
                  CONTENTS
 10 .bss          000005bc  20000188  20000188  00009188  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000744  20000744  00009188  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009188  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001505e  00000000  00000000  000091b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fef  00000000  00000000  0001e216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  00021208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8d  00000000  00000000  000224c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eac8  00000000  00000000  0002334d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c9a  00000000  00000000  00041e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba15e  00000000  00000000  00058aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112c0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005904  00000000  00000000  00112c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00118554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c60 	.word	0x08007c60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	08007c60 	.word	0x08007c60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <EXTI0_IRQHandler>:
	return;
}

// ---------- INTERUPT HANDLER ----------

void EXTI0_IRQHandler() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	// run the button press handler (make sure it is not null first !)
	if (onButtonPress) {
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <EXTI0_IRQHandler+0x24>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <EXTI0_IRQHandler+0x12>
		onButtonPress();
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <EXTI0_IRQHandler+0x24>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4798      	blx	r3
	}

	EXTI->PR |= EXTI_PR_PR0; // reset the interrupt
 8000b9a:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <EXTI0_IRQHandler+0x28>)
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <EXTI0_IRQHandler+0x28>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6153      	str	r3, [r2, #20]
	return;
 8000ba6:	bf00      	nop
}
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200001a4 	.word	0x200001a4
 8000bb0:	40010400 	.word	0x40010400

08000bb4 <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <enable_clocks+0x1c>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <enable_clocks+0x1c>)
 8000bbe:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 8000bc2:	6153      	str	r3, [r2, #20]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <initialise_board+0x20>)
 8000bdc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000be4:	801a      	strh	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	48001002 	.word	0x48001002

08000bf8 <HAL_TIM_IC_CaptureCallback>:

uint16_t rise_time = 0;
uint16_t last_period = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	@ 0x30
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d127      	bne.n	8000c5a <HAL_TIM_IC_CaptureCallback+0x62>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	7f1b      	ldrb	r3, [r3, #28]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d123      	bne.n	8000c5a <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000c12:	2100      	movs	r1, #0
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f004 fd9b 	bl	8005750 <HAL_TIM_ReadCapturedValue>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 8000c1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c26:	f001 fb57 	bl	80022d8 <HAL_GPIO_ReadPin>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d103      	bne.n	8000c38 <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000c32:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c34:	8013      	strh	r3, [r2, #0]
 8000c36:	e006      	b.n	8000c46 <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0x74>)
 8000c44:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000c52:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 8000c54:	4a06      	ldr	r2, [pc, #24]	@ (8000c70 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000c56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000c58:	8013      	strh	r3, [r2, #0]
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	@ 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40012c00 	.word	0x40012c00
 8000c68:	200005e8 	.word	0x200005e8
 8000c6c:	200005ea 	.word	0x200005ea
 8000c70:	200005e4 	.word	0x200005e4
 8000c74:	200005e6 	.word	0x200005e6

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b0a0      	sub	sp, #128	@ 0x80
 8000c7c:	af04      	add	r7, sp, #16
	//  PA8 is TIM1 channel 1, this is used for the LASPWM (the laser PWM signal)
	//  PB6 is I2C1 clock (SCL on the PTU), PB7 is I2C1 data (SDA on the PTU)



	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000c7e:	4bac      	ldr	r3, [pc, #688]	@ (8000f30 <main+0x2b8>)
 8000c80:	f107 0418 	add.w	r4, r7, #24
 8000c84:	461d      	mov	r5, r3
 8000c86:	6828      	ldr	r0, [r5, #0]
 8000c88:	6869      	ldr	r1, [r5, #4]
 8000c8a:	68aa      	ldr	r2, [r5, #8]
 8000c8c:	68eb      	ldr	r3, [r5, #12]
 8000c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c90:	6928      	ldr	r0, [r5, #16]
 8000c92:	6020      	str	r0, [r4, #0]
 8000c94:	7d2b      	ldrb	r3, [r5, #20]
 8000c96:	7123      	strb	r3, [r4, #4]
 8000c98:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000c9c:	222b      	movs	r2, #43	@ 0x2b
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f005 fc01 	bl	80064a8 <memset>

	enable_clocks();
 8000ca6:	f7ff ff85 	bl	8000bb4 <enable_clocks>
	initialise_board();
 8000caa:	f7ff ff93 	bl	8000bd4 <initialise_board>

	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000cae:	4ba1      	ldr	r3, [pc, #644]	@ (8000f34 <main+0x2bc>)
 8000cb0:	667b      	str	r3, [r7, #100]	@ 0x64

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	49a0      	ldr	r1, [pc, #640]	@ (8000f38 <main+0x2c0>)
 8000cb6:	2004      	movs	r0, #4
 8000cb8:	f000 fcb4 	bl	8001624 <SerialInitialise>

	HAL_StatusTypeDef return_value = 0x00;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	volatile uint16_t vertical_PWM = 1000;
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	82fb      	strh	r3, [r7, #22]
	volatile uint16_t horizontal_PWM = 1000;
 8000cc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ccc:	82bb      	strh	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cce:	f000 ffed 	bl	8001cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd2:	f000 f9f7 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f000 fbd5 	bl	8001484 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cda:	f000 fa57 	bl	800118c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cde:	f000 fa95 	bl	800120c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000ce2:	f000 fbad 	bl	8001440 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000ce6:	f000 fb45 	bl	8001374 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000cea:	f000 facd 	bl	8001288 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4892      	ldr	r0, [pc, #584]	@ (8000f3c <main+0x2c4>)
 8000cf2:	f003 feef 	bl	8004ad4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	4890      	ldr	r0, [pc, #576]	@ (8000f3c <main+0x2c4>)
 8000cfa:	f003 feeb 	bl	8004ad4 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	488f      	ldr	r0, [pc, #572]	@ (8000f40 <main+0x2c8>)
 8000d02:	f004 f849 	bl	8004d98 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000d06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d0a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 8000d10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1e:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(&hi2c1);
 8000d20:	4888      	ldr	r0, [pc, #544]	@ (8000f44 <main+0x2cc>)
 8000d22:	f000 fc33 	bl	800158c <initialise_ptu_i2c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	// reset lidar board
	uint8_t reset_value = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	74fb      	strb	r3, [r7, #19]
	return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	9302      	str	r3, [sp, #8]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	f107 0313 	add.w	r3, r7, #19
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	21c4      	movs	r1, #196	@ 0xc4
 8000d3e:	4881      	ldr	r0, [pc, #516]	@ (8000f44 <main+0x2cc>)
 8000d40:	f001 fb8a 	bl	8002458 <HAL_I2C_Mem_Write>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	uint8_t PWM_direction_clockwise = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	// delay for initialisation of the lidar
	HAL_Delay(100);
 8000d50:	2064      	movs	r0, #100	@ 0x64
 8000d52:	f001 f811 	bl	8001d78 <HAL_Delay>

	while (1)
	{
		if (PWM_direction_clockwise == 1) {
 8000d56:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d10a      	bne.n	8000d74 <main+0xfc>
			vertical_PWM += 3;
 8000d5e:	8afb      	ldrh	r3, [r7, #22]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	3303      	adds	r3, #3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	82fb      	strh	r3, [r7, #22]
			horizontal_PWM += 3;
 8000d68:	8abb      	ldrh	r3, [r7, #20]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	3303      	adds	r3, #3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	82bb      	strh	r3, [r7, #20]
 8000d72:	e009      	b.n	8000d88 <main+0x110>
		}
		else {
			vertical_PWM -= 3;
 8000d74:	8afb      	ldrh	r3, [r7, #22]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	82fb      	strh	r3, [r7, #22]
			horizontal_PWM -= 3;
 8000d7e:	8abb      	ldrh	r3, [r7, #20]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	3b03      	subs	r3, #3
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	82bb      	strh	r3, [r7, #20]
		}

		if (vertical_PWM > 1900) {
 8000d88:	8afb      	ldrh	r3, [r7, #22]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d905      	bls.n	8000da0 <main+0x128>
			vertical_PWM = 1900;
 8000d94:	f240 736c 	movw	r3, #1900	@ 0x76c
 8000d98:	82fb      	strh	r3, [r7, #22]
			PWM_direction_clockwise = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		}
		if (vertical_PWM < 1200) {
 8000da0:	8afb      	ldrh	r3, [r7, #22]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8000da8:	d205      	bcs.n	8000db6 <main+0x13e>
			vertical_PWM = 1200;
 8000daa:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000dae:	82fb      	strh	r3, [r7, #22]
			PWM_direction_clockwise = 1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		}

		TIM2->CCR1 = vertical_PWM;
 8000db6:	8afb      	ldrh	r3, [r7, #22]
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dbe:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM2->CCR2 = horizontal_PWM;
 8000dc0:	8abb      	ldrh	r3, [r7, #20]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dc8:	639a      	str	r2, [r3, #56]	@ 0x38

		uint8_t xMSB = 0x00;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	74bb      	strb	r3, [r7, #18]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x29, 1, &xMSB, 1, 10);
 8000dce:	230a      	movs	r3, #10
 8000dd0:	9302      	str	r3, [sp, #8]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	f107 0312 	add.w	r3, r7, #18
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	2229      	movs	r2, #41	@ 0x29
 8000de0:	21d3      	movs	r1, #211	@ 0xd3
 8000de2:	4858      	ldr	r0, [pc, #352]	@ (8000f44 <main+0x2cc>)
 8000de4:	f001 fc4c 	bl	8002680 <HAL_I2C_Mem_Read>
		uint8_t xLSB = 0x00;
 8000de8:	2300      	movs	r3, #0
 8000dea:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x28, 1, &xLSB, 1, 10);
 8000dec:	230a      	movs	r3, #10
 8000dee:	9302      	str	r3, [sp, #8]
 8000df0:	2301      	movs	r3, #1
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	f107 0311 	add.w	r3, r7, #17
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	2228      	movs	r2, #40	@ 0x28
 8000dfe:	21d3      	movs	r1, #211	@ 0xd3
 8000e00:	4850      	ldr	r0, [pc, #320]	@ (8000f44 <main+0x2cc>)
 8000e02:	f001 fc3d 	bl	8002680 <HAL_I2C_Mem_Read>
		int16_t yaw_rate = ((xMSB << 8) | xLSB);
 8000e06:	7cbb      	ldrb	r3, [r7, #18]
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	b21a      	sxth	r2, r3
 8000e0e:	7c7b      	ldrb	r3, [r7, #17]
 8000e10:	b21b      	sxth	r3, r3
 8000e12:	4313      	orrs	r3, r2
 8000e14:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60

		uint8_t yMSB = 0x00;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	743b      	strb	r3, [r7, #16]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2B, 1, &yMSB, 1, 10);
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	9302      	str	r3, [sp, #8]
 8000e20:	2301      	movs	r3, #1
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	222b      	movs	r2, #43	@ 0x2b
 8000e2e:	21d3      	movs	r1, #211	@ 0xd3
 8000e30:	4844      	ldr	r0, [pc, #272]	@ (8000f44 <main+0x2cc>)
 8000e32:	f001 fc25 	bl	8002680 <HAL_I2C_Mem_Read>
		uint8_t yLSB = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2A, 1, &yLSB, 1, 10);
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	f107 030f 	add.w	r3, r7, #15
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	222a      	movs	r2, #42	@ 0x2a
 8000e4c:	21d3      	movs	r1, #211	@ 0xd3
 8000e4e:	483d      	ldr	r0, [pc, #244]	@ (8000f44 <main+0x2cc>)
 8000e50:	f001 fc16 	bl	8002680 <HAL_I2C_Mem_Read>
		int16_t pitch_rate = ((yMSB << 8) | yLSB);
 8000e54:	7c3b      	ldrb	r3, [r7, #16]
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

		uint8_t zMSB = 0x00;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2D, 1, &zMSB, 1, 10);
 8000e6a:	230a      	movs	r3, #10
 8000e6c:	9302      	str	r3, [sp, #8]
 8000e6e:	2301      	movs	r3, #1
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	f107 030e 	add.w	r3, r7, #14
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	222d      	movs	r2, #45	@ 0x2d
 8000e7c:	21d3      	movs	r1, #211	@ 0xd3
 8000e7e:	4831      	ldr	r0, [pc, #196]	@ (8000f44 <main+0x2cc>)
 8000e80:	f001 fbfe 	bl	8002680 <HAL_I2C_Mem_Read>
		uint8_t zLSB = 0x00;
 8000e84:	2300      	movs	r3, #0
 8000e86:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Mem_Read(&hi2c1,gyro_rd, 0x2C, 1, &zLSB, 1, 10);
 8000e88:	230a      	movs	r3, #10
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	f107 030d 	add.w	r3, r7, #13
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2301      	movs	r3, #1
 8000e98:	222c      	movs	r2, #44	@ 0x2c
 8000e9a:	21d3      	movs	r1, #211	@ 0xd3
 8000e9c:	4829      	ldr	r0, [pc, #164]	@ (8000f44 <main+0x2cc>)
 8000e9e:	f001 fbef 	bl	8002680 <HAL_I2C_Mem_Read>
		int16_t roll_rate = ((zMSB << 8) | zLSB);
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	7b7b      	ldrb	r3, [r7, #13]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

		if (pitch_rate < 0)
 8000eb4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	da06      	bge.n	8000eca <main+0x252>
			led_register->led_groups.led_pair_1 = 0b01;
 8000ebc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000ebe:	7813      	ldrb	r3, [r2, #0]
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	f361 0301 	bfi	r3, r1, #0, #2
 8000ec6:	7013      	strb	r3, [r2, #0]
 8000ec8:	e005      	b.n	8000ed6 <main+0x25e>
		else
			led_register->led_groups.led_pair_1 = 0b10;
 8000eca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000ecc:	7813      	ldrb	r3, [r2, #0]
 8000ece:	2102      	movs	r1, #2
 8000ed0:	f361 0301 	bfi	r3, r1, #0, #2
 8000ed4:	7013      	strb	r3, [r2, #0]

		if (yaw_rate < 0)
 8000ed6:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	@ 0x60
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	da06      	bge.n	8000eec <main+0x274>
			led_register->led_groups.led_pair_2 = 1;
 8000ede:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000ee0:	7813      	ldrb	r3, [r2, #0]
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	f361 0383 	bfi	r3, r1, #2, #2
 8000ee8:	7013      	strb	r3, [r2, #0]
 8000eea:	e005      	b.n	8000ef8 <main+0x280>
		else
			led_register->led_groups.led_pair_2 = 2;
 8000eec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000eee:	7813      	ldrb	r3, [r2, #0]
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	f361 0383 	bfi	r3, r1, #2, #2
 8000ef6:	7013      	strb	r3, [r2, #0]


		uint8_t lidar_value = 0x03;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	733b      	strb	r3, [r7, #12]
		return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);
 8000efc:	2364      	movs	r3, #100	@ 0x64
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2301      	movs	r3, #1
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	21c4      	movs	r1, #196	@ 0xc4
 8000f10:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <main+0x2cc>)
 8000f12:	f001 faa1 	bl	8002458 <HAL_I2C_Mem_Write>
 8000f16:	4603      	mov	r3, r0
 8000f18:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

		lidar_value = 0xff;
 8000f1c:	23ff      	movs	r3, #255	@ 0xff
 8000f1e:	733b      	strb	r3, [r7, #12]

		uint8_t lidar_MSBa = 0x00;
 8000f20:	2300      	movs	r3, #0
 8000f22:	72fb      	strb	r3, [r7, #11]
		uint8_t lidar_LSBa = 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	72bb      	strb	r3, [r7, #10]

		volatile uint16_t lidar_distance = 0xff;
 8000f28:	23ff      	movs	r3, #255	@ 0xff
 8000f2a:	813b      	strh	r3, [r7, #8]

		uint16_t timeout;

		while ((lidar_value & 0x01) != 0x00) {
 8000f2c:	e04f      	b.n	8000fce <main+0x356>
 8000f2e:	bf00      	nop
 8000f30:	08007c90 	.word	0x08007c90
 8000f34:	48001015 	.word	0x48001015
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	200002ac 	.word	0x200002ac
 8000f40:	20000260 	.word	0x20000260
 8000f44:	200001a8 	.word	0x200001a8
			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x01, 1, &lidar_value, 1, 100);
 8000f48:	2364      	movs	r3, #100	@ 0x64
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	2201      	movs	r2, #1
 8000f5a:	21c5      	movs	r1, #197	@ 0xc5
 8000f5c:	4854      	ldr	r0, [pc, #336]	@ (80010b0 <main+0x438>)
 8000f5e:	f001 fb8f 	bl	8002680 <HAL_I2C_Mem_Read>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x0f, 1, &lidar_MSBa, 1, 100);
 8000f68:	2364      	movs	r3, #100	@ 0x64
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	f107 030b 	add.w	r3, r7, #11
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	220f      	movs	r2, #15
 8000f7a:	21c5      	movs	r1, #197	@ 0xc5
 8000f7c:	484c      	ldr	r0, [pc, #304]	@ (80010b0 <main+0x438>)
 8000f7e:	f001 fb7f 	bl	8002680 <HAL_I2C_Mem_Read>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
			return_value = HAL_I2C_Mem_Read(&hi2c1, LIDAR_RD, 0x10, 1, &lidar_LSBa, 1, 100);
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	f107 030a 	add.w	r3, r7, #10
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	2210      	movs	r2, #16
 8000f9a:	21c5      	movs	r1, #197	@ 0xc5
 8000f9c:	4844      	ldr	r0, [pc, #272]	@ (80010b0 <main+0x438>)
 8000f9e:	f001 fb6f 	bl	8002680 <HAL_I2C_Mem_Read>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

			lidar_distance = ((lidar_MSBa << 8) | lidar_LSBa);
 8000fa8:	7afb      	ldrb	r3, [r7, #11]
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	7abb      	ldrb	r3, [r7, #10]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	813b      	strh	r3, [r7, #8]
			timeout += 1;
 8000fbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
			if (timeout > 0xff)
 8000fc6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000fca:	2bff      	cmp	r3, #255	@ 0xff
 8000fcc:	d805      	bhi.n	8000fda <main+0x362>
		while ((lidar_value & 0x01) != 0x00) {
 8000fce:	7b3b      	ldrb	r3, [r7, #12]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1b7      	bne.n	8000f48 <main+0x2d0>
 8000fd8:	e000      	b.n	8000fdc <main+0x364>
				break;
 8000fda:	bf00      	nop
		}

		uint8_t lidar_ranges = lidar_distance / (100/4); // 100cm broken into 4 groups
 8000fdc:	893b      	ldrh	r3, [r7, #8]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4a34      	ldr	r2, [pc, #208]	@ (80010b4 <main+0x43c>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	08db      	lsrs	r3, r3, #3
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		if (lidar_ranges > 3)
 8000fee:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d902      	bls.n	8000ffc <main+0x384>
			lidar_ranges = 3;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

		uint8_t led_values = pow(2, lidar_ranges);
 8000ffc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fa77 	bl	80004f4 <__aeabi_ui2d>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	ec43 2b11 	vmov	d1, r2, r3
 800100e:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 80010a8 <main+0x430>
 8001012:	f005 fec7 	bl	8006da4 <pow>
 8001016:	ec53 2b10 	vmov	r2, r3, d0
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fd93 	bl	8000b48 <__aeabi_d2uiz>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

		led_register->led_groups.led_set_of_4 = led_values;
 8001028:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800102c:	f003 030f 	and.w	r3, r3, #15
 8001030:	b2d9      	uxtb	r1, r3
 8001032:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001034:	7813      	ldrb	r3, [r2, #0]
 8001036:	f361 1307 	bfi	r3, r1, #4, #4
 800103a:	7013      	strb	r3, [r2, #0]

		volatile int read_values_now = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]

		if (last_period > 4000)
 8001040:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <main+0x440>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001048:	d903      	bls.n	8001052 <main+0x3da>
			last_period = 5000;
 800104a:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <main+0x440>)
 800104c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001050:	801a      	strh	r2, [r3, #0]
		if (lidar_distance > 4000)
 8001052:	893b      	ldrh	r3, [r7, #8]
 8001054:	b29b      	uxth	r3, r3
 8001056:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800105a:	d902      	bls.n	8001062 <main+0x3ea>
			lidar_distance = 5500;
 800105c:	f241 537c 	movw	r3, #5500	@ 0x157c
 8001060:	813b      	strh	r3, [r7, #8]

		sprintf(string_to_send, "%hu,%hu,%hd,%hd,%hd\r\n", last_period, lidar_distance*10, roll_rate, pitch_rate, yaw_rate);
 8001062:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <main+0x440>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	461c      	mov	r4, r3
 8001068:	893b      	ldrh	r3, [r7, #8]
 800106a:	b29b      	uxth	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	461d      	mov	r5, r3
 8001078:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 800107c:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8001080:	f9b7 1060 	ldrsh.w	r1, [r7, #96]	@ 0x60
 8001084:	f107 0018 	add.w	r0, r7, #24
 8001088:	9102      	str	r1, [sp, #8]
 800108a:	9201      	str	r2, [sp, #4]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	462b      	mov	r3, r5
 8001090:	4622      	mov	r2, r4
 8001092:	490a      	ldr	r1, [pc, #40]	@ (80010bc <main+0x444>)
 8001094:	f005 f9e6 	bl	8006464 <siprintf>

		transmitString(string_to_send, &USART1_PORT);
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	4908      	ldr	r1, [pc, #32]	@ (80010c0 <main+0x448>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fb52 	bl	8001748 <transmitString>
	{
 80010a4:	e657      	b.n	8000d56 <main+0xde>
 80010a6:	bf00      	nop
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40000000 	.word	0x40000000
 80010b0:	200001a8 	.word	0x200001a8
 80010b4:	51eb851f 	.word	0x51eb851f
 80010b8:	200005ea 	.word	0x200005ea
 80010bc:	08007c78 	.word	0x08007c78
 80010c0:	20000000 	.word	0x20000000

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b09e      	sub	sp, #120	@ 0x78
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010ce:	2228      	movs	r2, #40	@ 0x28
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 f9e8 	bl	80064a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	223c      	movs	r2, #60	@ 0x3c
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 f9da 	bl	80064a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010f4:	2303      	movs	r3, #3
 80010f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010f8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010fc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001102:	2301      	movs	r3, #1
 8001104:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001106:	2310      	movs	r3, #16
 8001108:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800110e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001112:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001114:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001118:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800111e:	4618      	mov	r0, r3
 8001120:	f001 ffea 	bl	80030f8 <HAL_RCC_OscConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800112a:	f000 fa29 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112e:	230f      	movs	r3, #15
 8001130:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001132:	2302      	movs	r3, #2
 8001134:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001144:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001148:	2101      	movs	r1, #1
 800114a:	4618      	mov	r0, r3
 800114c:	f002 ffe2 	bl	8004114 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001156:	f000 fa13 	bl	8001580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <SystemClock_Config+0xc4>)
 800115c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001162:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001166:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4618      	mov	r0, r3
 8001170:	f003 f9a8 	bl	80044c4 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800117a:	f000 fa01 	bl	8001580 <Error_Handler>
  }
}
 800117e:	bf00      	nop
 8001180:	3778      	adds	r7, #120	@ 0x78
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	00021020 	.word	0x00021020

0800118c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_I2C1_Init+0x74>)
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <MX_I2C1_Init+0x78>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_I2C1_Init+0x74>)
 8001198:	4a1b      	ldr	r2, [pc, #108]	@ (8001208 <MX_I2C1_Init+0x7c>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_I2C1_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <MX_I2C1_Init+0x74>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_I2C1_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <MX_I2C1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_I2C1_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_I2C1_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c6:	480e      	ldr	r0, [pc, #56]	@ (8001200 <MX_I2C1_Init+0x74>)
 80011c8:	f001 f8b6 	bl	8002338 <HAL_I2C_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011d2:	f000 f9d5 	bl	8001580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011d6:	2100      	movs	r1, #0
 80011d8:	4809      	ldr	r0, [pc, #36]	@ (8001200 <MX_I2C1_Init+0x74>)
 80011da:	f001 fe23 	bl	8002e24 <HAL_I2CEx_ConfigAnalogFilter>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011e4:	f000 f9cc 	bl	8001580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011e8:	2100      	movs	r1, #0
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_I2C1_Init+0x74>)
 80011ec:	f001 fe65 	bl	8002eba <HAL_I2CEx_ConfigDigitalFilter>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011f6:	f000 f9c3 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200001a8 	.word	0x200001a8
 8001204:	40005400 	.word	0x40005400
 8001208:	2000090e 	.word	0x2000090e

0800120c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <MX_SPI1_Init+0x74>)
 8001212:	4a1c      	ldr	r2, [pc, #112]	@ (8001284 <MX_SPI1_Init+0x78>)
 8001214:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_SPI1_Init+0x74>)
 8001218:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800121c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <MX_SPI1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001224:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <MX_SPI1_Init+0x74>)
 8001226:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800122a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_SPI1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001232:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <MX_SPI1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_SPI1_Init+0x74>)
 800123a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800123e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_SPI1_Init+0x74>)
 8001242:	2208      	movs	r2, #8
 8001244:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_SPI1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_SPI1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <MX_SPI1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_SPI1_Init+0x74>)
 800125a:	2207      	movs	r2, #7
 800125c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <MX_SPI1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_SPI1_Init+0x74>)
 8001266:	2208      	movs	r2, #8
 8001268:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <MX_SPI1_Init+0x74>)
 800126c:	f003 fad8 	bl	8004820 <HAL_SPI_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001276:	f000 f983 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200001fc 	.word	0x200001fc
 8001284:	40013000 	.word	0x40013000

08001288 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	@ 0x30
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b4:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <MX_TIM1_Init+0xe4>)
 80012b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001370 <MX_TIM1_Init+0xe8>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80012ba:	4b2c      	ldr	r3, [pc, #176]	@ (800136c <MX_TIM1_Init+0xe4>)
 80012bc:	222f      	movs	r2, #47	@ 0x2f
 80012be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b2a      	ldr	r3, [pc, #168]	@ (800136c <MX_TIM1_Init+0xe4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012c6:	4b29      	ldr	r3, [pc, #164]	@ (800136c <MX_TIM1_Init+0xe4>)
 80012c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b27      	ldr	r3, [pc, #156]	@ (800136c <MX_TIM1_Init+0xe4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d4:	4b25      	ldr	r3, [pc, #148]	@ (800136c <MX_TIM1_Init+0xe4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b24      	ldr	r3, [pc, #144]	@ (800136c <MX_TIM1_Init+0xe4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e0:	4822      	ldr	r0, [pc, #136]	@ (800136c <MX_TIM1_Init+0xe4>)
 80012e2:	f003 fb48 	bl	8004976 <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80012ec:	f000 f948 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	4619      	mov	r1, r3
 80012fc:	481b      	ldr	r0, [pc, #108]	@ (800136c <MX_TIM1_Init+0xe4>)
 80012fe:	f004 f95d 	bl	80055bc <HAL_TIM_ConfigClockSource>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001308:	f000 f93a 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800130c:	4817      	ldr	r0, [pc, #92]	@ (800136c <MX_TIM1_Init+0xe4>)
 800130e:	f003 fce1 	bl	8004cd4 <HAL_TIM_IC_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001318:	f000 f932 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	480f      	ldr	r0, [pc, #60]	@ (800136c <MX_TIM1_Init+0xe4>)
 8001330:	f004 ffbe 	bl	80062b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800133a:	f000 f921 	bl	8001580 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800133e:	230a      	movs	r3, #10
 8001340:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001342:	2301      	movs	r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_TIM1_Init+0xe4>)
 8001356:	f003 ff80 	bl	800525a <HAL_TIM_IC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001360:	f000 f90e 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3730      	adds	r7, #48	@ 0x30
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000260 	.word	0x20000260
 8001370:	40012c00 	.word	0x40012c00

08001374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001386:	463b      	mov	r3, r7
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	615a      	str	r2, [r3, #20]
 8001396:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001398:	4b28      	ldr	r3, [pc, #160]	@ (800143c <MX_TIM2_Init+0xc8>)
 800139a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800139e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80013a0:	4b26      	ldr	r3, [pc, #152]	@ (800143c <MX_TIM2_Init+0xc8>)
 80013a2:	222f      	movs	r2, #47	@ 0x2f
 80013a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b25      	ldr	r3, [pc, #148]	@ (800143c <MX_TIM2_Init+0xc8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80013ac:	4b23      	ldr	r3, [pc, #140]	@ (800143c <MX_TIM2_Init+0xc8>)
 80013ae:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80013b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b21      	ldr	r3, [pc, #132]	@ (800143c <MX_TIM2_Init+0xc8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <MX_TIM2_Init+0xc8>)
 80013bc:	2280      	movs	r2, #128	@ 0x80
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013c0:	481e      	ldr	r0, [pc, #120]	@ (800143c <MX_TIM2_Init+0xc8>)
 80013c2:	f003 fb2f 	bl	8004a24 <HAL_TIM_PWM_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013cc:	f000 f8d8 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	4817      	ldr	r0, [pc, #92]	@ (800143c <MX_TIM2_Init+0xc8>)
 80013e0:	f004 ff66 	bl	80062b0 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80013ea:	f000 f8c9 	bl	8001580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ee:	2360      	movs	r3, #96	@ 0x60
 80013f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 80013f2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_TIM2_Init+0xc8>)
 8001408:	f003 ffc4 	bl	8005394 <HAL_TIM_PWM_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001412:	f000 f8b5 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001416:	463b      	mov	r3, r7
 8001418:	2204      	movs	r2, #4
 800141a:	4619      	mov	r1, r3
 800141c:	4807      	ldr	r0, [pc, #28]	@ (800143c <MX_TIM2_Init+0xc8>)
 800141e:	f003 ffb9 	bl	8005394 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001428:	f000 f8aa 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800142c:	4803      	ldr	r0, [pc, #12]	@ (800143c <MX_TIM2_Init+0xc8>)
 800142e:	f000 fac7 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	@ 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002ac 	.word	0x200002ac

08001440 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001444:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <MX_USB_PCD_Init+0x3c>)
 8001446:	4a0e      	ldr	r2, [pc, #56]	@ (8001480 <MX_USB_PCD_Init+0x40>)
 8001448:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_USB_PCD_Init+0x3c>)
 800144c:	2208      	movs	r2, #8
 800144e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001450:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <MX_USB_PCD_Init+0x3c>)
 8001452:	2202      	movs	r2, #2
 8001454:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_USB_PCD_Init+0x3c>)
 8001458:	2202      	movs	r2, #2
 800145a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <MX_USB_PCD_Init+0x3c>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_USB_PCD_Init+0x3c>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001468:	4804      	ldr	r0, [pc, #16]	@ (800147c <MX_USB_PCD_Init+0x3c>)
 800146a:	f001 fd72 	bl	8002f52 <HAL_PCD_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001474:	f000 f884 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200002f8 	.word	0x200002f8
 8001480:	40005c00 	.word	0x40005c00

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800149a:	4b37      	ldr	r3, [pc, #220]	@ (8001578 <MX_GPIO_Init+0xf4>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a36      	ldr	r2, [pc, #216]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014a4:	6153      	str	r3, [r2, #20]
 80014a6:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	4a30      	ldr	r2, [pc, #192]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014bc:	6153      	str	r3, [r2, #20]
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014d4:	6153      	str	r3, [r2, #20]
 80014d6:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a24      	ldr	r2, [pc, #144]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ec:	6153      	str	r3, [r2, #20]
 80014ee:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <MX_GPIO_Init+0xf4>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001578 <MX_GPIO_Init+0xf4>)
 8001500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001504:	6153      	str	r3, [r2, #20]
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <MX_GPIO_Init+0xf4>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001512:	2200      	movs	r2, #0
 8001514:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8001518:	4818      	ldr	r0, [pc, #96]	@ (800157c <MX_GPIO_Init+0xf8>)
 800151a:	f000 fef5 	bl	8002308 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800151e:	2337      	movs	r3, #55	@ 0x37
 8001520:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001522:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4812      	ldr	r0, [pc, #72]	@ (800157c <MX_GPIO_Init+0xf8>)
 8001534:	f000 fd56 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001538:	f64f 7308 	movw	r3, #65288	@ 0xff08
 800153c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	480a      	ldr	r0, [pc, #40]	@ (800157c <MX_GPIO_Init+0xf8>)
 8001552:	f000 fd47 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156c:	f000 fd3a 	bl	8001fe4 <HAL_GPIO_Init>

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	48001000 	.word	0x48001000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <Error_Handler+0x8>

0800158c <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af04      	add	r7, sp, #16
 8001592:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 8001598:	230f      	movs	r3, #15
 800159a:	73bb      	strb	r3, [r7, #14]
	// Enable x, y, z and turn off power down:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 800159c:	230a      	movs	r3, #10
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	2301      	movs	r3, #1
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	f107 030e 	add.w	r3, r7, #14
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2301      	movs	r3, #1
 80015ac:	2220      	movs	r2, #32
 80015ae:	21d2      	movs	r1, #210	@ 0xd2
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 ff51 	bl	8002458 <HAL_I2C_Mem_Write>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_2 = 0b00000000;
 80015ba:	2300      	movs	r3, #0
 80015bc:	737b      	strb	r3, [r7, #13]
	// If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 80015be:	230a      	movs	r3, #10
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	2301      	movs	r3, #1
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	f107 030d 	add.w	r3, r7, #13
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	2221      	movs	r2, #33	@ 0x21
 80015d0:	21d2      	movs	r1, #210	@ 0xd2
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 ff40 	bl	8002458 <HAL_I2C_Mem_Write>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]

	// Configure CTRL_REG3 to generate data ready interrupt on INT2
	// No interrupts used on INT1, if you'd like to configure INT1
	// or INT2 otherwise, consult the datasheet:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 80015dc:	230a      	movs	r3, #10
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	2301      	movs	r3, #1
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	f107 030d 	add.w	r3, r7, #13
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2301      	movs	r3, #1
 80015ec:	2222      	movs	r2, #34	@ 0x22
 80015ee:	21d2      	movs	r1, #210	@ 0xd2
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 ff31 	bl	8002458 <HAL_I2C_Mem_Write>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]
	// CTRL_REG5 controls high-pass filtering of outputs, use it
	// if you'd like:
	//HAL_I2C_Mem_Write(&hi2c1, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_2, 10);

	// reset lidar board
	uint8_t reset_value = 0x00;
 80015fa:	2300      	movs	r3, #0
 80015fc:	733b      	strb	r3, [r7, #12]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 80015fe:	230a      	movs	r3, #10
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	2301      	movs	r3, #1
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2301      	movs	r3, #1
 800160e:	2200      	movs	r2, #0
 8001610:	21c4      	movs	r1, #196	@ 0xc4
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 ff20 	bl	8002458 <HAL_I2C_Mem_Write>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <SerialInitialise>:
};


// ---------- INITIALISATIONS ----------

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, callback_t callback) {
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]

	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001630:	4b44      	ldr	r3, [pc, #272]	@ (8001744 <SerialInitialise+0x120>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	4a43      	ldr	r2, [pc, #268]	@ (8001744 <SerialInitialise+0x120>)
 8001636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163a:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800163c:	4b41      	ldr	r3, [pc, #260]	@ (8001744 <SerialInitialise+0x120>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a40      	ldr	r2, [pc, #256]	@ (8001744 <SerialInitialise+0x120>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6193      	str	r3, [r2, #24]
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	4b3d      	ldr	r3, [pc, #244]	@ (8001744 <SerialInitialise+0x120>)
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	493c      	ldr	r1, [pc, #240]	@ (8001744 <SerialInitialise+0x120>)
 8001652:	4313      	orrs	r3, r2
 8001654:	614b      	str	r3, [r1, #20]
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	6952      	ldr	r2, [r2, #20]
 800165e:	601a      	str	r2, [r3, #0]
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	6992      	ldr	r2, [r2, #24]
 8001668:	609a      	str	r2, [r3, #8]
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	69d9      	ldr	r1, [r3, #28]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	6a1a      	ldr	r2, [r3, #32]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	430a      	orrs	r2, r1
 800167a:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	6a19      	ldr	r1, [r3, #32]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	430a      	orrs	r2, r1
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b2c      	ldr	r3, [pc, #176]	@ (8001744 <SerialInitialise+0x120>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	492b      	ldr	r1, [pc, #172]	@ (8001744 <SerialInitialise+0x120>)
 8001698:	4313      	orrs	r3, r2
 800169a:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <SerialInitialise+0x120>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4927      	ldr	r1, [pc, #156]	@ (8001744 <SerialInitialise+0x120>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	330c      	adds	r3, #12
 80016b0:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d823      	bhi.n	8001700 <SerialInitialise+0xdc>
 80016b8:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <SerialInitialise+0x9c>)
 80016ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016be:	bf00      	nop
 80016c0:	080016d5 	.word	0x080016d5
 80016c4:	080016df 	.word	0x080016df
 80016c8:	080016e9 	.word	0x080016e9
 80016cc:	080016f1 	.word	0x080016f1
 80016d0:	080016f9 	.word	0x080016f9
	case BAUD_9600:
		*baud_rate_config = 0x341;  // 9600 at 8MHz
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f240 3241 	movw	r2, #833	@ 0x341
 80016da:	801a      	strh	r2, [r3, #0]
		break;
 80016dc:	e010      	b.n	8001700 <SerialInitialise+0xdc>
	case BAUD_19200:
		*baud_rate_config = 0x1A1;  // 19200 at 8MHz
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80016e4:	801a      	strh	r2, [r3, #0]
		break;
 80016e6:	e00b      	b.n	8001700 <SerialInitialise+0xdc>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	22d0      	movs	r2, #208	@ 0xd0
 80016ec:	801a      	strh	r2, [r3, #0]
		break;
 80016ee:	e007      	b.n	8001700 <SerialInitialise+0xdc>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	228b      	movs	r2, #139	@ 0x8b
 80016f4:	801a      	strh	r2, [r3, #0]
		break;
 80016f6:	e003      	b.n	8001700 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2246      	movs	r2, #70	@ 0x46
 80016fc:	801a      	strh	r2, [r3, #0]
		break;
 80016fe:	bf00      	nop
	}

	serial_port->callback_function = callback;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	625a      	str	r2, [r3, #36]	@ 0x24

	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 020d 	orr.w	r2, r2, #13
 8001714:	601a      	str	r2, [r3, #0]

	serial_port->tx_idx = 0;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
	serial_port->buf_len[0] = 0;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
	serial_port->buf_len[1] = 0;
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
	serial_port->receiving = 0;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000

08001748 <transmitString>:

// TRANSMIT STRING

// SerialOutputString - output a NULL TERMINATED string to the serial port
// Input: pointer to a NULL-TERMINATED string (if not null terminated, there will be problems)
void transmitString(uint8_t *buffer, SerialPort *serial_port) {
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	// while the buffer is not empty
	while(*buffer) {
 8001752:	e00f      	b.n	8001774 <transmitString+0x2c>
		// print out the character of the buffer pointer to the serial port
		while((serial_port->UART->ISR & USART_ISR_TXE) == 0) { }
 8001754:	bf00      	nop
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f8      	beq.n	8001756 <transmitString+0xe>

		serial_port->UART->TDR = *buffer;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	851a      	strh	r2, [r3, #40]	@ 0x28
		buffer++;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3301      	adds	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
	while(*buffer) {
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1eb      	bne.n	8001754 <transmitString+0xc>
	}
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <HAL_MspInit+0x44>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	4a0e      	ldr	r2, [pc, #56]	@ (80017d0 <HAL_MspInit+0x44>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6193      	str	r3, [r2, #24]
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <HAL_MspInit+0x44>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <HAL_MspInit+0x44>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a08      	ldr	r2, [pc, #32]	@ (80017d0 <HAL_MspInit+0x44>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_MspInit+0x44>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017c2:	2007      	movs	r0, #7
 80017c4:	f000 fbcc 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a17      	ldr	r2, [pc, #92]	@ (8001850 <HAL_I2C_MspInit+0x7c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d127      	bne.n	8001846 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_I2C_MspInit+0x80>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a16      	ldr	r2, [pc, #88]	@ (8001854 <HAL_I2C_MspInit+0x80>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001800:	6153      	str	r3, [r2, #20]
 8001802:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <HAL_I2C_MspInit+0x80>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800180e:	23c0      	movs	r3, #192	@ 0xc0
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	2301      	movs	r3, #1
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800181e:	2304      	movs	r3, #4
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	480b      	ldr	r0, [pc, #44]	@ (8001858 <HAL_I2C_MspInit+0x84>)
 800182a:	f000 fbdb 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <HAL_I2C_MspInit+0x80>)
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <HAL_I2C_MspInit+0x80>)
 8001834:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001838:	61d3      	str	r3, [r2, #28]
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <HAL_I2C_MspInit+0x80>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	@ 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40005400 	.word	0x40005400
 8001854:	40021000 	.word	0x40021000
 8001858:	48000400 	.word	0x48000400

0800185c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	@ 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a17      	ldr	r2, [pc, #92]	@ (80018d8 <HAL_SPI_MspInit+0x7c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d128      	bne.n	80018d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <HAL_SPI_MspInit+0x80>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a16      	ldr	r2, [pc, #88]	@ (80018dc <HAL_SPI_MspInit+0x80>)
 8001884:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <HAL_SPI_MspInit+0x80>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <HAL_SPI_MspInit+0x80>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4a10      	ldr	r2, [pc, #64]	@ (80018dc <HAL_SPI_MspInit+0x80>)
 800189c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a0:	6153      	str	r3, [r2, #20]
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_SPI_MspInit+0x80>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80018ae:	23e0      	movs	r3, #224	@ 0xe0
 80018b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018be:	2305      	movs	r3, #5
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018cc:	f000 fb8a 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	@ 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40013000 	.word	0x40013000
 80018dc:	40021000 	.word	0x40021000

080018e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	@ 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001970 <HAL_TIM_Base_MspInit+0x90>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d131      	bne.n	8001966 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_TIM_Base_MspInit+0x94>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a1b      	ldr	r2, [pc, #108]	@ (8001974 <HAL_TIM_Base_MspInit+0x94>)
 8001908:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_TIM_Base_MspInit+0x94>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <HAL_TIM_Base_MspInit+0x94>)
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	4a15      	ldr	r2, [pc, #84]	@ (8001974 <HAL_TIM_Base_MspInit+0x94>)
 8001920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001924:	6153      	str	r3, [r2, #20]
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <HAL_TIM_Base_MspInit+0x94>)
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001944:	2306      	movs	r3, #6
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001952:	f000 fb47 	bl	8001fe4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	201b      	movs	r0, #27
 800195c:	f000 fb0b 	bl	8001f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001960:	201b      	movs	r0, #27
 8001962:	f000 fb24 	bl	8001fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	@ 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40012c00 	.word	0x40012c00
 8001974:	40021000 	.word	0x40021000

08001978 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001988:	d113      	bne.n	80019b2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198a:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <HAL_TIM_PWM_MspInit+0x44>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a0b      	ldr	r2, [pc, #44]	@ (80019bc <HAL_TIM_PWM_MspInit+0x44>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_TIM_PWM_MspInit+0x44>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	201c      	movs	r0, #28
 80019a8:	f000 fae5 	bl	8001f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ac:	201c      	movs	r0, #28
 80019ae:	f000 fafe 	bl	8001fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019e0:	d11d      	bne.n	8001a1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_TIM_MspPostInit+0x68>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	4a10      	ldr	r2, [pc, #64]	@ (8001a28 <HAL_TIM_MspPostInit+0x68>)
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ec:	6153      	str	r3, [r2, #20]
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <HAL_TIM_MspPostInit+0x68>)
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80019fa:	f248 0302 	movw	r3, #32770	@ 0x8002
 80019fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	4619      	mov	r1, r3
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1a:	f000 fae3 	bl	8001fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a1e:	bf00      	nop
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	@ 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <HAL_PCD_MspInit+0x80>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d129      	bne.n	8001aa2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <HAL_PCD_MspInit+0x84>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a17      	ldr	r2, [pc, #92]	@ (8001ab0 <HAL_PCD_MspInit+0x84>)
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a58:	6153      	str	r3, [r2, #20]
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HAL_PCD_MspInit+0x84>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001a66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001a78:	230e      	movs	r3, #14
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a86:	f000 faad 	bl	8001fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_PCD_MspInit+0x84>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a08      	ldr	r2, [pc, #32]	@ (8001ab0 <HAL_PCD_MspInit+0x84>)
 8001a90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <HAL_PCD_MspInit+0x84>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	@ 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40005c00 	.word	0x40005c00
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <NMI_Handler+0x4>

08001abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <MemManage_Handler+0x4>

08001acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0a:	f000 f915 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <TIM1_CC_IRQHandler+0x10>)
 8001b1a:	f003 fa7f 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000260 	.word	0x20000260

08001b28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt (ORIGINAL SET TO 2)
  */
void TIM4_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <TIM4_IRQHandler+0x10>)
 8001b2e:	f003 fa75 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200002ac 	.word	0x200002ac

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	@ (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f004 fca4 	bl	80064b8 <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000a000 	.word	0x2000a000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	200005ec 	.word	0x200005ec
 8001ba4:	20000748 	.word	0x20000748

08001ba8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <TIM2_IRQHandler>:
	return;
}

// ---------- INTERUPT HANDLER ----------

void TIM2_IRQHandler() {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {        // Check update flag
 8001bd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00f      	beq.n	8001bfe <TIM2_IRQHandler+0x32>
        TIM2->SR &= ~TIM_SR_UIF;        // Clear flag
 8001bde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6113      	str	r3, [r2, #16]

        if (TIM2HandlerFunction) {
 8001bee:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <TIM2_IRQHandler+0x38>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <TIM2_IRQHandler+0x32>
        	TIM2HandlerFunction();
 8001bf6:	4b03      	ldr	r3, [pc, #12]	@ (8001c04 <TIM2_IRQHandler+0x38>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4798      	blx	r3
        }
    }
    return;
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
}
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200005f0 	.word	0x200005f0

08001c08 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_UIF) {
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <TIM3_IRQHandler+0x48>)
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d018      	beq.n	8001c4a <TIM3_IRQHandler+0x42>
		TIM3->SR &= ~TIM_SR_UIF;
 8001c18:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <TIM3_IRQHandler+0x48>)
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c50 <TIM3_IRQHandler+0x48>)
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	6113      	str	r3, [r2, #16]

		TIM3->CR1 &= ~TIM_CR1_CEN;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <TIM3_IRQHandler+0x48>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a09      	ldr	r2, [pc, #36]	@ (8001c50 <TIM3_IRQHandler+0x48>)
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]
		TIM3->DIER &= ~TIM_DIER_UIE;
 8001c30:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <TIM3_IRQHandler+0x48>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <TIM3_IRQHandler+0x48>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	60d3      	str	r3, [r2, #12]

		if (TIM3HandlerFunction) TIM3HandlerFunction();
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <TIM3_IRQHandler+0x4c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <TIM3_IRQHandler+0x42>
 8001c44:	4b03      	ldr	r3, [pc, #12]	@ (8001c54 <TIM3_IRQHandler+0x4c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4798      	blx	r3
	}
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40000400 	.word	0x40000400
 8001c54:	200005f4 	.word	0x200005f4

08001c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c90 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c5c:	f7ff ffa4 	bl	8001ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c62:	490d      	ldr	r1, [pc, #52]	@ (8001c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <LoopForever+0xe>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ca4 <LoopForever+0x16>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c86:	f004 fc1d 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c8a:	f7fe fff5 	bl	8000c78 <main>

08001c8e <LoopForever>:

LoopForever:
    b LoopForever
 8001c8e:	e7fe      	b.n	8001c8e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c90:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001c9c:	08007d60 	.word	0x08007d60
  ldr r2, =_sbss
 8001ca0:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001ca4:	20000744 	.word	0x20000744

08001ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC1_2_IRQHandler>
	...

08001cac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_Init+0x28>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <HAL_Init+0x28>)
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 f94f 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f808 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc8:	f7ff fd60 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <HAL_InitTick+0x54>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <HAL_InitTick+0x58>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f967 	bl	8001fca <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d14:	f000 f92f 	bl	8001f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d18:	4a06      	ldr	r2, [pc, #24]	@ (8001d34 <HAL_InitTick+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	2000012c 	.word	0x2000012c
 8001d30:	20000134 	.word	0x20000134
 8001d34:	20000130 	.word	0x20000130

08001d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_IncTick+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_IncTick+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a04      	ldr	r2, [pc, #16]	@ (8001d5c <HAL_IncTick+0x24>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000134 	.word	0x20000134
 8001d5c:	200005f8 	.word	0x200005f8

08001d60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d64:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <HAL_GetTick+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	200005f8 	.word	0x200005f8

08001d78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff ffee 	bl	8001d60 <HAL_GetTick>
 8001d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d90:	d005      	beq.n	8001d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_Delay+0x44>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d9e:	bf00      	nop
 8001da0:	f7ff ffde 	bl	8001d60 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d8f7      	bhi.n	8001da0 <HAL_Delay+0x28>
  {
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000134 	.word	0x20000134

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4907      	ldr	r1, [pc, #28]	@ (8001e5c <__NVIC_EnableIRQ+0x38>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	@ (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	@ (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
         );
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	@ 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f2c:	d301      	bcc.n	8001f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00f      	b.n	8001f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <SysTick_Config+0x40>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f40:	f7ff ff8e 	bl	8001e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <SysTick_Config+0x40>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <SysTick_Config+0x40>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff29 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f88:	f7ff ff3e 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	6978      	ldr	r0, [r7, #20]
 8001f94:	f7ff ff8e 	bl	8001eb4 <NVIC_EncodePriority>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff5d 	bl	8001e60 <__NVIC_SetPriority>
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff31 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffa2 	bl	8001f1c <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff2:	e154      	b.n	800229e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 8146 	beq.w	8002298 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d005      	beq.n	8002024 <HAL_GPIO_Init+0x40>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d130      	bne.n	8002086 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205a:	2201      	movs	r2, #1
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	091b      	lsrs	r3, r3, #4
 8002070:	f003 0201 	and.w	r2, r3, #1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b03      	cmp	r3, #3
 8002090:	d017      	beq.n	80020c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d123      	bne.n	8002116 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	6939      	ldr	r1, [r7, #16]
 8002112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0203 	and.w	r2, r3, #3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80a0 	beq.w	8002298 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002158:	4b58      	ldr	r3, [pc, #352]	@ (80022bc <HAL_GPIO_Init+0x2d8>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	4a57      	ldr	r2, [pc, #348]	@ (80022bc <HAL_GPIO_Init+0x2d8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6193      	str	r3, [r2, #24]
 8002164:	4b55      	ldr	r3, [pc, #340]	@ (80022bc <HAL_GPIO_Init+0x2d8>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002170:	4a53      	ldr	r2, [pc, #332]	@ (80022c0 <HAL_GPIO_Init+0x2dc>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800219a:	d019      	beq.n	80021d0 <HAL_GPIO_Init+0x1ec>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a49      	ldr	r2, [pc, #292]	@ (80022c4 <HAL_GPIO_Init+0x2e0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <HAL_GPIO_Init+0x1e8>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a48      	ldr	r2, [pc, #288]	@ (80022c8 <HAL_GPIO_Init+0x2e4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d00d      	beq.n	80021c8 <HAL_GPIO_Init+0x1e4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a47      	ldr	r2, [pc, #284]	@ (80022cc <HAL_GPIO_Init+0x2e8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d007      	beq.n	80021c4 <HAL_GPIO_Init+0x1e0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a46      	ldr	r2, [pc, #280]	@ (80022d0 <HAL_GPIO_Init+0x2ec>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d101      	bne.n	80021c0 <HAL_GPIO_Init+0x1dc>
 80021bc:	2304      	movs	r3, #4
 80021be:	e008      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c0:	2305      	movs	r3, #5
 80021c2:	e006      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c4:	2303      	movs	r3, #3
 80021c6:	e004      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e002      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_GPIO_Init+0x1ee>
 80021d0:	2300      	movs	r3, #0
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	f002 0203 	and.w	r2, r2, #3
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	4093      	lsls	r3, r2
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021e2:	4937      	ldr	r1, [pc, #220]	@ (80022c0 <HAL_GPIO_Init+0x2dc>)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f0:	4b38      	ldr	r3, [pc, #224]	@ (80022d4 <HAL_GPIO_Init+0x2f0>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002214:	4a2f      	ldr	r2, [pc, #188]	@ (80022d4 <HAL_GPIO_Init+0x2f0>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221a:	4b2e      	ldr	r3, [pc, #184]	@ (80022d4 <HAL_GPIO_Init+0x2f0>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800223e:	4a25      	ldr	r2, [pc, #148]	@ (80022d4 <HAL_GPIO_Init+0x2f0>)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002244:	4b23      	ldr	r3, [pc, #140]	@ (80022d4 <HAL_GPIO_Init+0x2f0>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002268:	4a1a      	ldr	r2, [pc, #104]	@ (80022d4 <HAL_GPIO_Init+0x2f0>)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800226e:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <HAL_GPIO_Init+0x2f0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002292:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <HAL_GPIO_Init+0x2f0>)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3301      	adds	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f47f aea3 	bne.w	8001ff4 <HAL_GPIO_Init+0x10>
  }
}
 80022ae:	bf00      	nop
 80022b0:	bf00      	nop
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010000 	.word	0x40010000
 80022c4:	48000400 	.word	0x48000400
 80022c8:	48000800 	.word	0x48000800
 80022cc:	48000c00 	.word	0x48000c00
 80022d0:	48001000 	.word	0x48001000
 80022d4:	40010400 	.word	0x40010400

080022d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e001      	b.n	80022fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002324:	e002      	b.n	800232c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e081      	b.n	800244e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fa38 	bl	80017d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2224      	movs	r2, #36	@ 0x24
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002388:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002398:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	e006      	b.n	80023c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d104      	bne.n	80023d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69d9      	ldr	r1, [r3, #28]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4603      	mov	r3, r0
 8002468:	817b      	strh	r3, [r7, #10]
 800246a:	460b      	mov	r3, r1
 800246c:	813b      	strh	r3, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b20      	cmp	r3, #32
 800247c:	f040 80f9 	bne.w	8002672 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_I2C_Mem_Write+0x34>
 8002486:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002488:	2b00      	cmp	r3, #0
 800248a:	d105      	bne.n	8002498 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002492:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0ed      	b.n	8002674 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_I2C_Mem_Write+0x4e>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e0e6      	b.n	8002674 <HAL_I2C_Mem_Write+0x21c>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024ae:	f7ff fc57 	bl	8001d60 <HAL_GetTick>
 80024b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2319      	movs	r3, #25
 80024ba:	2201      	movs	r2, #1
 80024bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 fac3 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0d1      	b.n	8002674 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2221      	movs	r2, #33	@ 0x21
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2240      	movs	r2, #64	@ 0x40
 80024dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a3a      	ldr	r2, [r7, #32]
 80024ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f8:	88f8      	ldrh	r0, [r7, #6]
 80024fa:	893a      	ldrh	r2, [r7, #8]
 80024fc:	8979      	ldrh	r1, [r7, #10]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	4603      	mov	r3, r0
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f9d3 	bl	80028b4 <I2C_RequestMemoryWrite>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0a9      	b.n	8002674 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	2bff      	cmp	r3, #255	@ 0xff
 8002528:	d90e      	bls.n	8002548 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	22ff      	movs	r2, #255	@ 0xff
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002534:	b2da      	uxtb	r2, r3
 8002536:	8979      	ldrh	r1, [r7, #10]
 8002538:	2300      	movs	r3, #0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 fc3d 	bl	8002dc0 <I2C_TransferConfig>
 8002546:	e00f      	b.n	8002568 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002556:	b2da      	uxtb	r2, r3
 8002558:	8979      	ldrh	r1, [r7, #10]
 800255a:	2300      	movs	r3, #0
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fc2c 	bl	8002dc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 fabc 	bl	8002aea <I2C_WaitOnTXISFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e07b      	b.n	8002674 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d034      	beq.n	8002620 <HAL_I2C_Mem_Write+0x1c8>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d130      	bne.n	8002620 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c4:	2200      	movs	r2, #0
 80025c6:	2180      	movs	r1, #128	@ 0x80
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fa3f 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e04d      	b.n	8002674 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2bff      	cmp	r3, #255	@ 0xff
 80025e0:	d90e      	bls.n	8002600 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	22ff      	movs	r2, #255	@ 0xff
 80025e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	8979      	ldrh	r1, [r7, #10]
 80025f0:	2300      	movs	r3, #0
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fbe1 	bl	8002dc0 <I2C_TransferConfig>
 80025fe:	e00f      	b.n	8002620 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260e:	b2da      	uxtb	r2, r3
 8002610:	8979      	ldrh	r1, [r7, #10]
 8002612:	2300      	movs	r3, #0
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fbd0 	bl	8002dc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d19e      	bne.n	8002568 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 faa2 	bl	8002b78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e01a      	b.n	8002674 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2220      	movs	r2, #32
 8002644:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_I2C_Mem_Write+0x224>)
 8002652:	400b      	ands	r3, r1
 8002654:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002672:	2302      	movs	r3, #2
  }
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	fe00e800 	.word	0xfe00e800

08002680 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	4608      	mov	r0, r1
 800268a:	4611      	mov	r1, r2
 800268c:	461a      	mov	r2, r3
 800268e:	4603      	mov	r3, r0
 8002690:	817b      	strh	r3, [r7, #10]
 8002692:	460b      	mov	r3, r1
 8002694:	813b      	strh	r3, [r7, #8]
 8002696:	4613      	mov	r3, r2
 8002698:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	f040 80fd 	bne.w	80028a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_I2C_Mem_Read+0x34>
 80026ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0f1      	b.n	80028a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_I2C_Mem_Read+0x4e>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e0ea      	b.n	80028a4 <HAL_I2C_Mem_Read+0x224>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026d6:	f7ff fb43 	bl	8001d60 <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2319      	movs	r3, #25
 80026e2:	2201      	movs	r2, #1
 80026e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 f9af 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0d5      	b.n	80028a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2222      	movs	r2, #34	@ 0x22
 80026fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2240      	movs	r2, #64	@ 0x40
 8002704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002718:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002720:	88f8      	ldrh	r0, [r7, #6]
 8002722:	893a      	ldrh	r2, [r7, #8]
 8002724:	8979      	ldrh	r1, [r7, #10]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	4603      	mov	r3, r0
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f913 	bl	800295c <I2C_RequestMemoryRead>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0ad      	b.n	80028a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2bff      	cmp	r3, #255	@ 0xff
 8002750:	d90e      	bls.n	8002770 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	22ff      	movs	r2, #255	@ 0xff
 8002756:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275c:	b2da      	uxtb	r2, r3
 800275e:	8979      	ldrh	r1, [r7, #10]
 8002760:	4b52      	ldr	r3, [pc, #328]	@ (80028ac <HAL_I2C_Mem_Read+0x22c>)
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fb29 	bl	8002dc0 <I2C_TransferConfig>
 800276e:	e00f      	b.n	8002790 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277e:	b2da      	uxtb	r2, r3
 8002780:	8979      	ldrh	r1, [r7, #10]
 8002782:	4b4a      	ldr	r3, [pc, #296]	@ (80028ac <HAL_I2C_Mem_Read+0x22c>)
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fb18 	bl	8002dc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002796:	2200      	movs	r2, #0
 8002798:	2104      	movs	r1, #4
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f956 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07c      	b.n	80028a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d034      	beq.n	8002850 <HAL_I2C_Mem_Read+0x1d0>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d130      	bne.n	8002850 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f4:	2200      	movs	r2, #0
 80027f6:	2180      	movs	r1, #128	@ 0x80
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f927 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e04d      	b.n	80028a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	2bff      	cmp	r3, #255	@ 0xff
 8002810:	d90e      	bls.n	8002830 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	22ff      	movs	r2, #255	@ 0xff
 8002816:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281c:	b2da      	uxtb	r2, r3
 800281e:	8979      	ldrh	r1, [r7, #10]
 8002820:	2300      	movs	r3, #0
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fac9 	bl	8002dc0 <I2C_TransferConfig>
 800282e:	e00f      	b.n	8002850 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283e:	b2da      	uxtb	r2, r3
 8002840:	8979      	ldrh	r1, [r7, #10]
 8002842:	2300      	movs	r3, #0
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fab8 	bl	8002dc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d19a      	bne.n	8002790 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f98a 	bl	8002b78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e01a      	b.n	80028a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2220      	movs	r2, #32
 8002874:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_I2C_Mem_Read+0x230>)
 8002882:	400b      	ands	r3, r1
 8002884:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	80002400 	.word	0x80002400
 80028b0:	fe00e800 	.word	0xfe00e800

080028b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	4608      	mov	r0, r1
 80028be:	4611      	mov	r1, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	460b      	mov	r3, r1
 80028c8:	813b      	strh	r3, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	8979      	ldrh	r1, [r7, #10]
 80028d4:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <I2C_RequestMemoryWrite+0xa4>)
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fa6f 	bl	8002dc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f8ff 	bl	8002aea <I2C_WaitOnTXISFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e02c      	b.n	8002950 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	629a      	str	r2, [r3, #40]	@ 0x28
 8002906:	e015      	b.n	8002934 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002908:	893b      	ldrh	r3, [r7, #8]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	b29b      	uxth	r3, r3
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	69b9      	ldr	r1, [r7, #24]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f8e5 	bl	8002aea <I2C_WaitOnTXISFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e012      	b.n	8002950 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800292a:	893b      	ldrh	r3, [r7, #8]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2200      	movs	r2, #0
 800293c:	2180      	movs	r1, #128	@ 0x80
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f884 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	80002000 	.word	0x80002000

0800295c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	460b      	mov	r3, r1
 8002970:	813b      	strh	r3, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	8979      	ldrh	r1, [r7, #10]
 800297c:	4b20      	ldr	r3, [pc, #128]	@ (8002a00 <I2C_RequestMemoryRead+0xa4>)
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2300      	movs	r3, #0
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fa1c 	bl	8002dc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	69b9      	ldr	r1, [r7, #24]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 f8ac 	bl	8002aea <I2C_WaitOnTXISFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e02c      	b.n	80029f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029a2:	893b      	ldrh	r3, [r7, #8]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80029ac:	e015      	b.n	80029da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029ae:	893b      	ldrh	r3, [r7, #8]
 80029b0:	0a1b      	lsrs	r3, r3, #8
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	69b9      	ldr	r1, [r7, #24]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f892 	bl	8002aea <I2C_WaitOnTXISFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e012      	b.n	80029f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029d0:	893b      	ldrh	r3, [r7, #8]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2140      	movs	r1, #64	@ 0x40
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f831 	bl	8002a4c <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	80002000 	.word	0x80002000

08002a04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d103      	bne.n	8002a22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d007      	beq.n	8002a40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	619a      	str	r2, [r3, #24]
  }
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a5c:	e031      	b.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a64:	d02d      	beq.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a66:	f7ff f97b 	bl	8001d60 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d122      	bne.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	4013      	ands	r3, r2
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	bf0c      	ite	eq
 8002a8c:	2301      	moveq	r3, #1
 8002a8e:	2300      	movne	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d113      	bne.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00f      	b.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699a      	ldr	r2, [r3, #24]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4013      	ands	r3, r2
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	bf0c      	ite	eq
 8002ad2:	2301      	moveq	r3, #1
 8002ad4:	2300      	movne	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d0be      	beq.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af6:	e033      	b.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f87f 	bl	8002c00 <I2C_IsErrorOccurred>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e031      	b.n	8002b70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b12:	d025      	beq.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b14:	f7ff f924 	bl	8001d60 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d302      	bcc.n	8002b2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d11a      	bne.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d013      	beq.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e007      	b.n	8002b70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d1c4      	bne.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b84:	e02f      	b.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f838 	bl	8002c00 <I2C_IsErrorOccurred>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e02d      	b.n	8002bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7ff f8e1 	bl	8001d60 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d11a      	bne.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d013      	beq.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d1c8      	bne.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	@ 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d068      	beq.n	8002cfe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2210      	movs	r2, #16
 8002c32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c34:	e049      	b.n	8002cca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c3c:	d045      	beq.n	8002cca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7ff f88f 	bl	8001d60 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_IsErrorOccurred+0x54>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d13a      	bne.n	8002cca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c76:	d121      	bne.n	8002cbc <I2C_IsErrorOccurred+0xbc>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c7e:	d01d      	beq.n	8002cbc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d01a      	beq.n	8002cbc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c96:	f7ff f863 	bl	8001d60 <HAL_GetTick>
 8002c9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c9c:	e00e      	b.n	8002cbc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c9e:	f7ff f85f 	bl	8001d60 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b19      	cmp	r3, #25
 8002caa:	d907      	bls.n	8002cbc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f043 0320 	orr.w	r3, r3, #32
 8002cb2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002cba:	e006      	b.n	8002cca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d1e9      	bne.n	8002c9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d003      	beq.n	8002ce0 <I2C_IsErrorOccurred+0xe0>
 8002cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0aa      	beq.n	8002c36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d103      	bne.n	8002cf0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2220      	movs	r2, #32
 8002cee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	f043 0308 	orr.w	r3, r3, #8
 8002d38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f043 0302 	orr.w	r3, r3, #2
 8002d5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01c      	beq.n	8002dae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff fe45 	bl	8002a04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b0d      	ldr	r3, [pc, #52]	@ (8002dbc <I2C_IsErrorOccurred+0x1bc>)
 8002d86:	400b      	ands	r3, r1
 8002d88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002dae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3728      	adds	r7, #40	@ 0x28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	fe00e800 	.word	0xfe00e800

08002dc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	817b      	strh	r3, [r7, #10]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dd8:	7a7b      	ldrb	r3, [r7, #9]
 8002dda:	041b      	lsls	r3, r3, #16
 8002ddc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002de0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	0d5b      	lsrs	r3, r3, #21
 8002dfa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <I2C_TransferConfig+0x60>)
 8002e00:	430b      	orrs	r3, r1
 8002e02:	43db      	mvns	r3, r3
 8002e04:	ea02 0103 	and.w	r1, r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	03ff63ff 	.word	0x03ff63ff

08002e24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d138      	bne.n	8002eac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e032      	b.n	8002eae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	@ 0x24
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d139      	bne.n	8002f44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e033      	b.n	8002f46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2224      	movs	r2, #36	@ 0x24
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f54:	b08b      	sub	sp, #44	@ 0x2c
 8002f56:	af06      	add	r7, sp, #24
 8002f58:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0c4      	b.n	80030ee <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d106      	bne.n	8002f7e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fe fd57 	bl	8001a2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2203      	movs	r2, #3
 8002f82:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f003 fa2e 	bl	80063ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	e040      	b.n	8003018 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	440b      	add	r3, r1
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	440b      	add	r3, r1
 8002fd0:	3303      	adds	r3, #3
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3338      	adds	r3, #56	@ 0x38
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	333c      	adds	r3, #60	@ 0x3c
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	440b      	add	r3, r1
 800300c:	3340      	adds	r3, #64	@ 0x40
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	3301      	adds	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	d3b9      	bcc.n	8002f96 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	e044      	b.n	80030b2 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	440b      	add	r3, r1
 8003036:	f203 1369 	addw	r3, r3, #361	@ 0x169
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003050:	7bfa      	ldrb	r2, [r7, #15]
 8003052:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003096:	7bfa      	ldrb	r2, [r7, #15]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	3301      	adds	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d3b5      	bcc.n	8003028 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	687e      	ldr	r6, [r7, #4]
 80030c4:	466d      	mov	r5, sp
 80030c6:	f106 0410 	add.w	r4, r6, #16
 80030ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	602b      	str	r3, [r5, #0]
 80030d2:	1d33      	adds	r3, r6, #4
 80030d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d6:	6838      	ldr	r0, [r7, #0]
 80030d8:	f003 f9a3 	bl	8006422 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80030fe:	af00      	add	r7, sp, #0
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003108:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800310a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	f000 bff4 	b.w	8004106 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 816d 	beq.w	800340e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003134:	4bb4      	ldr	r3, [pc, #720]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b04      	cmp	r3, #4
 800313e:	d00c      	beq.n	800315a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003140:	4bb1      	ldr	r3, [pc, #708]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d157      	bne.n	80031fc <HAL_RCC_OscConfig+0x104>
 800314c:	4bae      	ldr	r3, [pc, #696]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003158:	d150      	bne.n	80031fc <HAL_RCC_OscConfig+0x104>
 800315a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800315e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800316e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b3f      	cmp	r3, #63	@ 0x3f
 800317a:	d802      	bhi.n	8003182 <HAL_RCC_OscConfig+0x8a>
 800317c:	4ba2      	ldr	r3, [pc, #648]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0xb6>
 8003182:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003186:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003196:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800319a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800319e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80031aa:	4b97      	ldr	r3, [pc, #604]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031b2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80031b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80031ba:	fa92 f2a2 	rbit	r2, r2
 80031be:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80031c2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80031c6:	fab2 f282 	clz	r2, r2
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	f042 0220 	orr.w	r2, r2, #32
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	f002 021f 	and.w	r2, r2, #31
 80031d6:	2101      	movs	r1, #1
 80031d8:	fa01 f202 	lsl.w	r2, r1, r2
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 8114 	beq.w	800340c <HAL_RCC_OscConfig+0x314>
 80031e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 810b 	bne.w	800340c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f000 bf85 	b.w	8004106 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003200:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x124>
 800320e:	4b7e      	ldr	r3, [pc, #504]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7d      	ldr	r2, [pc, #500]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e036      	b.n	800328a <HAL_RCC_OscConfig+0x192>
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10c      	bne.n	8003246 <HAL_RCC_OscConfig+0x14e>
 800322c:	4b76      	ldr	r3, [pc, #472]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a75      	ldr	r2, [pc, #468]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4b73      	ldr	r3, [pc, #460]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a72      	ldr	r2, [pc, #456]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 800323e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	e021      	b.n	800328a <HAL_RCC_OscConfig+0x192>
 8003246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003256:	d10c      	bne.n	8003272 <HAL_RCC_OscConfig+0x17a>
 8003258:	4b6b      	ldr	r3, [pc, #428]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6a      	ldr	r2, [pc, #424]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 800325e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b68      	ldr	r3, [pc, #416]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a67      	ldr	r2, [pc, #412]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 800326a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	e00b      	b.n	800328a <HAL_RCC_OscConfig+0x192>
 8003272:	4b65      	ldr	r3, [pc, #404]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a64      	ldr	r2, [pc, #400]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b62      	ldr	r3, [pc, #392]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a61      	ldr	r2, [pc, #388]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003284:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003288:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800328a:	4b5f      	ldr	r3, [pc, #380]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328e:	f023 020f 	bic.w	r2, r3, #15
 8003292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003296:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	495a      	ldr	r1, [pc, #360]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d054      	beq.n	800335e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fd54 	bl	8001d60 <HAL_GetTick>
 80032b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032be:	f7fe fd4f 	bl	8001d60 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	@ 0x64
 80032cc:	d902      	bls.n	80032d4 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	f000 bf19 	b.w	8004106 <HAL_RCC_OscConfig+0x100e>
 80032d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032d8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80032e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80032f4:	d802      	bhi.n	80032fc <HAL_RCC_OscConfig+0x204>
 80032f6:	4b44      	ldr	r3, [pc, #272]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	e015      	b.n	8003328 <HAL_RCC_OscConfig+0x230>
 80032fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003300:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003304:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003310:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003314:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003318:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003324:	4b38      	ldr	r3, [pc, #224]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800332c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003330:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003334:	fa92 f2a2 	rbit	r2, r2
 8003338:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800333c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003340:	fab2 f282 	clz	r2, r2
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f042 0220 	orr.w	r2, r2, #32
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f002 021f 	and.w	r2, r2, #31
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f202 	lsl.w	r2, r1, r2
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0b0      	beq.n	80032be <HAL_RCC_OscConfig+0x1c6>
 800335c:	e057      	b.n	800340e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fe fcff 	bl	8001d60 <HAL_GetTick>
 8003362:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fcfa 	bl	8001d60 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b64      	cmp	r3, #100	@ 0x64
 8003376:	d902      	bls.n	800337e <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	f000 bec4 	b.w	8004106 <HAL_RCC_OscConfig+0x100e>
 800337e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003382:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003392:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b3f      	cmp	r3, #63	@ 0x3f
 800339e:	d802      	bhi.n	80033a6 <HAL_RCC_OscConfig+0x2ae>
 80033a0:	4b19      	ldr	r3, [pc, #100]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	e015      	b.n	80033d2 <HAL_RCC_OscConfig+0x2da>
 80033a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033aa:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80033ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033be:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80033c2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80033ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003408 <HAL_RCC_OscConfig+0x310>)
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033d6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80033da:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80033de:	fa92 f2a2 	rbit	r2, r2
 80033e2:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80033e6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80033ea:	fab2 f282 	clz	r2, r2
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f042 0220 	orr.w	r2, r2, #32
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	f002 021f 	and.w	r2, r2, #31
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003400:	4013      	ands	r3, r2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1b0      	bne.n	8003368 <HAL_RCC_OscConfig+0x270>
 8003406:	e002      	b.n	800340e <HAL_RCC_OscConfig+0x316>
 8003408:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 816c 	beq.w	80036fc <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003424:	4bcc      	ldr	r3, [pc, #816]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00b      	beq.n	8003448 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003430:	4bc9      	ldr	r3, [pc, #804]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d16d      	bne.n	8003518 <HAL_RCC_OscConfig+0x420>
 800343c:	4bc6      	ldr	r3, [pc, #792]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d167      	bne.n	8003518 <HAL_RCC_OscConfig+0x420>
 8003448:	2302      	movs	r3, #2
 800344a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800345a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b3f      	cmp	r3, #63	@ 0x3f
 8003466:	d802      	bhi.n	800346e <HAL_RCC_OscConfig+0x376>
 8003468:	4bbb      	ldr	r3, [pc, #748]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	e013      	b.n	8003496 <HAL_RCC_OscConfig+0x39e>
 800346e:	2302      	movs	r3, #2
 8003470:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003480:	2302      	movs	r3, #2
 8003482:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003486:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003492:	4bb1      	ldr	r3, [pc, #708]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	2202      	movs	r2, #2
 8003498:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800349c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80034a0:	fa92 f2a2 	rbit	r2, r2
 80034a4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80034a8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f002 021f 	and.w	r2, r2, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCC_OscConfig+0x3e6>
 80034c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d002      	beq.n	80034de <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f000 be14 	b.w	8004106 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b9e      	ldr	r3, [pc, #632]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	21f8      	movs	r1, #248	@ 0xf8
 80034f4:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80034fc:	fa91 f1a1 	rbit	r1, r1
 8003500:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003504:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003508:	fab1 f181 	clz	r1, r1
 800350c:	b2c9      	uxtb	r1, r1
 800350e:	408b      	lsls	r3, r1
 8003510:	4991      	ldr	r1, [pc, #580]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	e0f1      	b.n	80036fc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8083 	beq.w	8003630 <HAL_RCC_OscConfig+0x538>
 800352a:	2301      	movs	r3, #1
 800352c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003530:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800353c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800354a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	461a      	mov	r2, r3
 8003552:	2301      	movs	r3, #1
 8003554:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe fc03 	bl	8001d60 <HAL_GetTick>
 800355a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003560:	f7fe fbfe 	bl	8001d60 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d902      	bls.n	8003576 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	f000 bdc8 	b.w	8004106 <HAL_RCC_OscConfig+0x100e>
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003588:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b3f      	cmp	r3, #63	@ 0x3f
 8003594:	d802      	bhi.n	800359c <HAL_RCC_OscConfig+0x4a4>
 8003596:	4b70      	ldr	r3, [pc, #448]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	e013      	b.n	80035c4 <HAL_RCC_OscConfig+0x4cc>
 800359c:	2302      	movs	r3, #2
 800359e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80035ae:	2302      	movs	r3, #2
 80035b0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80035b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80035c0:	4b65      	ldr	r3, [pc, #404]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	2202      	movs	r2, #2
 80035c6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80035ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80035ce:	fa92 f2a2 	rbit	r2, r2
 80035d2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80035d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80035da:	fab2 f282 	clz	r2, r2
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f042 0220 	orr.w	r2, r2, #32
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f002 021f 	and.w	r2, r2, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0b4      	beq.n	8003560 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	4b58      	ldr	r3, [pc, #352]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003602:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	21f8      	movs	r1, #248	@ 0xf8
 800360c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003614:	fa91 f1a1 	rbit	r1, r1
 8003618:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800361c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003620:	fab1 f181 	clz	r1, r1
 8003624:	b2c9      	uxtb	r1, r1
 8003626:	408b      	lsls	r3, r1
 8003628:	494b      	ldr	r1, [pc, #300]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
 800362e:	e065      	b.n	80036fc <HAL_RCC_OscConfig+0x604>
 8003630:	2301      	movs	r3, #1
 8003632:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003642:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003650:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	461a      	mov	r2, r3
 8003658:	2300      	movs	r3, #0
 800365a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe fb80 	bl	8001d60 <HAL_GetTick>
 8003660:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003664:	e00a      	b.n	800367c <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003666:	f7fe fb7b 	bl	8001d60 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d902      	bls.n	800367c <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	f000 bd45 	b.w	8004106 <HAL_RCC_OscConfig+0x100e>
 800367c:	2302      	movs	r3, #2
 800367e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003686:	fa93 f3a3 	rbit	r3, r3
 800368a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800368e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b3f      	cmp	r3, #63	@ 0x3f
 800369a:	d802      	bhi.n	80036a2 <HAL_RCC_OscConfig+0x5aa>
 800369c:	4b2e      	ldr	r3, [pc, #184]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	e013      	b.n	80036ca <HAL_RCC_OscConfig+0x5d2>
 80036a2:	2302      	movs	r3, #2
 80036a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80036ac:	fa93 f3a3 	rbit	r3, r3
 80036b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80036b4:	2302      	movs	r3, #2
 80036b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80036ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80036c6:	4b24      	ldr	r3, [pc, #144]	@ (8003758 <HAL_RCC_OscConfig+0x660>)
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	2202      	movs	r2, #2
 80036cc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80036d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80036d4:	fa92 f2a2 	rbit	r2, r2
 80036d8:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80036dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80036e0:	fab2 f282 	clz	r2, r2
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f042 0220 	orr.w	r2, r2, #32
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	f002 021f 	and.w	r2, r2, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f202 	lsl.w	r2, r1, r2
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1b4      	bne.n	8003666 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003700:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8115 	beq.w	800393c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003716:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d07e      	beq.n	8003820 <HAL_RCC_OscConfig+0x728>
 8003722:	2301      	movs	r3, #1
 8003724:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_RCC_OscConfig+0x664>)
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	461a      	mov	r2, r3
 8003748:	2301      	movs	r3, #1
 800374a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fe fb08 	bl	8001d60 <HAL_GetTick>
 8003750:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003754:	e00f      	b.n	8003776 <HAL_RCC_OscConfig+0x67e>
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003760:	f7fe fafe 	bl	8001d60 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d902      	bls.n	8003776 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	f000 bcc8 	b.w	8004106 <HAL_RCC_OscConfig+0x100e>
 8003776:	2302      	movs	r3, #2
 8003778:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003790:	2202      	movs	r2, #2
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003798:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	fa93 f2a3 	rbit	r2, r3
 80037a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037b4:	2202      	movs	r2, #2
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fa93 f2a3 	rbit	r2, r3
 80037c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80037ce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d0:	4bb0      	ldr	r3, [pc, #704]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 80037d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80037dc:	2102      	movs	r1, #2
 80037de:	6019      	str	r1, [r3, #0]
 80037e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	fa93 f1a3 	rbit	r1, r3
 80037ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80037f6:	6019      	str	r1, [r3, #0]
  return result;
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	4013      	ands	r3, r2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0a0      	beq.n	8003760 <HAL_RCC_OscConfig+0x668>
 800381e:	e08d      	b.n	800393c <HAL_RCC_OscConfig+0x844>
 8003820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003824:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003830:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f2a3 	rbit	r2, r3
 800383a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003842:	601a      	str	r2, [r3, #0]
  return result;
 8003844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003848:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800384c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	4b90      	ldr	r3, [pc, #576]	@ (8003a98 <HAL_RCC_OscConfig+0x9a0>)
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	461a      	mov	r2, r3
 800385e:	2300      	movs	r3, #0
 8003860:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003862:	f7fe fa7d 	bl	8001d60 <HAL_GetTick>
 8003866:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386c:	f7fe fa78 	bl	8001d60 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d902      	bls.n	8003882 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	f000 bc42 	b.w	8004106 <HAL_RCC_OscConfig+0x100e>
 8003882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003886:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800388a:	2202      	movs	r2, #2
 800388c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003892:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	fa93 f2a3 	rbit	r2, r3
 800389c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80038ae:	2202      	movs	r2, #2
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	fa93 f2a3 	rbit	r2, r3
 80038c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80038d2:	2202      	movs	r2, #2
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	fa93 f2a3 	rbit	r2, r3
 80038e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80038ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ee:	4b69      	ldr	r3, [pc, #420]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 80038f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80038fa:	2102      	movs	r1, #2
 80038fc:	6019      	str	r1, [r3, #0]
 80038fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003902:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	fa93 f1a3 	rbit	r1, r3
 800390c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003910:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003914:	6019      	str	r1, [r3, #0]
  return result;
 8003916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d197      	bne.n	800386c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003940:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 819e 	beq.w	8003c8e <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003958:	4b4e      	ldr	r3, [pc, #312]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003964:	4b4b      	ldr	r3, [pc, #300]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4a4a      	ldr	r2, [pc, #296]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 800396a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800396e:	61d3      	str	r3, [r2, #28]
 8003970:	4b48      	ldr	r3, [pc, #288]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003986:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800398a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800398c:	2301      	movs	r3, #1
 800398e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b42      	ldr	r3, [pc, #264]	@ (8003a9c <HAL_RCC_OscConfig+0x9a4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11a      	bne.n	80039d4 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a9c <HAL_RCC_OscConfig+0x9a4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a3e      	ldr	r2, [pc, #248]	@ (8003a9c <HAL_RCC_OscConfig+0x9a4>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fe f9d9 	bl	8001d60 <HAL_GetTick>
 80039ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b2:	e009      	b.n	80039c8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b4:	f7fe f9d4 	bl	8001d60 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b64      	cmp	r3, #100	@ 0x64
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e39e      	b.n	8004106 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	4b34      	ldr	r3, [pc, #208]	@ (8003a9c <HAL_RCC_OscConfig+0x9a4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ef      	beq.n	80039b4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d106      	bne.n	80039f2 <HAL_RCC_OscConfig+0x8fa>
 80039e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6213      	str	r3, [r2, #32]
 80039f0:	e035      	b.n	8003a5e <HAL_RCC_OscConfig+0x966>
 80039f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCC_OscConfig+0x924>
 8003a02:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4a23      	ldr	r2, [pc, #140]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	6213      	str	r3, [r2, #32]
 8003a0e:	4b21      	ldr	r3, [pc, #132]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a20      	ldr	r2, [pc, #128]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a14:	f023 0304 	bic.w	r3, r3, #4
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	e020      	b.n	8003a5e <HAL_RCC_OscConfig+0x966>
 8003a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d10c      	bne.n	8003a46 <HAL_RCC_OscConfig+0x94e>
 8003a2c:	4b19      	ldr	r3, [pc, #100]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	6213      	str	r3, [r2, #32]
 8003a38:	4b16      	ldr	r3, [pc, #88]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4a15      	ldr	r2, [pc, #84]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6213      	str	r3, [r2, #32]
 8003a44:	e00b      	b.n	8003a5e <HAL_RCC_OscConfig+0x966>
 8003a46:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4a12      	ldr	r2, [pc, #72]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6213      	str	r3, [r2, #32]
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	4a0f      	ldr	r2, [pc, #60]	@ (8003a94 <HAL_RCC_OscConfig+0x99c>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8087 	beq.w	8003b7e <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a70:	f7fe f976 	bl	8001d60 <HAL_GetTick>
 8003a74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a78:	e012      	b.n	8003aa0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fe f971 	bl	8001d60 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d908      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e339      	b.n	8004106 <HAL_RCC_OscConfig+0x100e>
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	10908120 	.word	0x10908120
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003acc:	2202      	movs	r2, #2
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	fa93 f2a3 	rbit	r2, r3
 8003ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003ae6:	601a      	str	r2, [r3, #0]
  return result;
 8003ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003af0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	fab3 f383 	clz	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <HAL_RCC_OscConfig+0xa10>
 8003b02:	4b98      	ldr	r3, [pc, #608]	@ (8003d64 <HAL_RCC_OscConfig+0xc6c>)
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	e013      	b.n	8003b30 <HAL_RCC_OscConfig+0xa38>
 8003b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b10:	2202      	movs	r2, #2
 8003b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b18:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	fa93 f2a3 	rbit	r2, r3
 8003b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b26:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	4b8d      	ldr	r3, [pc, #564]	@ (8003d64 <HAL_RCC_OscConfig+0xc6c>)
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b34:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b38:	2102      	movs	r1, #2
 8003b3a:	6011      	str	r1, [r2, #0]
 8003b3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b40:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	fa92 f1a2 	rbit	r1, r2
 8003b4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b4e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003b52:	6011      	str	r1, [r2, #0]
  return result;
 8003b54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b58:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	fab2 f282 	clz	r2, r2
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	f002 021f 	and.w	r2, r2, #31
 8003b6e:	2101      	movs	r1, #1
 8003b70:	fa01 f202 	lsl.w	r2, r1, r2
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f43f af7f 	beq.w	8003a7a <HAL_RCC_OscConfig+0x982>
 8003b7c:	e07d      	b.n	8003c7a <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7e:	f7fe f8ef 	bl	8001d60 <HAL_GetTick>
 8003b82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fe f8ea 	bl	8001d60 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e2b2      	b.n	8004106 <HAL_RCC_OscConfig+0x100e>
 8003ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003ba8:	2202      	movs	r2, #2
 8003baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	fa93 f2a3 	rbit	r2, r3
 8003bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bbe:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003bcc:	2202      	movs	r2, #2
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	fa93 f2a3 	rbit	r2, r3
 8003bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003be6:	601a      	str	r2, [r3, #0]
  return result;
 8003be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003bf0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <HAL_RCC_OscConfig+0xb10>
 8003c02:	4b58      	ldr	r3, [pc, #352]	@ (8003d64 <HAL_RCC_OscConfig+0xc6c>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	e013      	b.n	8003c30 <HAL_RCC_OscConfig+0xb38>
 8003c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c10:	2202      	movs	r2, #2
 8003c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c18:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	fa93 f2a3 	rbit	r2, r3
 8003c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c26:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8003d64 <HAL_RCC_OscConfig+0xc6c>)
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c34:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c38:	2102      	movs	r1, #2
 8003c3a:	6011      	str	r1, [r2, #0]
 8003c3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c40:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	fa92 f1a2 	rbit	r1, r2
 8003c4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c4e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003c52:	6011      	str	r1, [r2, #0]
  return result;
 8003c54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c58:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	fab2 f282 	clz	r2, r2
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	f002 021f 	and.w	r2, r2, #31
 8003c6e:	2101      	movs	r1, #1
 8003c70:	fa01 f202 	lsl.w	r2, r1, r2
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d186      	bne.n	8003b88 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c7a:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d105      	bne.n	8003c8e <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b38      	ldr	r3, [pc, #224]	@ (8003d64 <HAL_RCC_OscConfig+0xc6c>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4a37      	ldr	r2, [pc, #220]	@ (8003d64 <HAL_RCC_OscConfig+0xc6c>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c8c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8232 	beq.w	8004104 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca0:	4b30      	ldr	r3, [pc, #192]	@ (8003d64 <HAL_RCC_OscConfig+0xc6c>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	f000 8201 	beq.w	80040b0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	f040 8157 	bne.w	8003f6e <HAL_RCC_OscConfig+0xe76>
 8003cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003cc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cd2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	fa93 f2a3 	rbit	r2, r3
 8003cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003ce4:	601a      	str	r2, [r3, #0]
  return result;
 8003ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003cee:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cfa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	461a      	mov	r2, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7fe f82b 	bl	8001d60 <HAL_GetTick>
 8003d0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0e:	e009      	b.n	8003d24 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fe f826 	bl	8001d60 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1f0      	b.n	8004106 <HAL_RCC_OscConfig+0x100e>
 8003d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d28:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d36:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d44:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003d48:	601a      	str	r2, [r3, #0]
  return result;
 8003d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003d52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d54:	fab3 f383 	clz	r3, r3
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d5c:	d804      	bhi.n	8003d68 <HAL_RCC_OscConfig+0xc70>
 8003d5e:	4b01      	ldr	r3, [pc, #4]	@ (8003d64 <HAL_RCC_OscConfig+0xc6c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	e029      	b.n	8003db8 <HAL_RCC_OscConfig+0xcc0>
 8003d64:	40021000 	.word	0x40021000
 8003d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003d70:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	fa93 f2a3 	rbit	r2, r3
 8003d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d88:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d92:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003d96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	fa93 f2a3 	rbit	r2, r3
 8003daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dae:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	4bc3      	ldr	r3, [pc, #780]	@ (80040c4 <HAL_RCC_OscConfig+0xfcc>)
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dbc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003dc0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003dc4:	6011      	str	r1, [r2, #0]
 8003dc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dca:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	fa92 f1a2 	rbit	r1, r2
 8003dd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dd8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003ddc:	6011      	str	r1, [r2, #0]
  return result;
 8003dde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003de2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	fab2 f282 	clz	r2, r2
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	f042 0220 	orr.w	r2, r2, #32
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f002 021f 	and.w	r2, r2, #31
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d185      	bne.n	8003d10 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e04:	4baf      	ldr	r3, [pc, #700]	@ (80040c4 <HAL_RCC_OscConfig+0xfcc>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	49a7      	ldr	r1, [pc, #668]	@ (80040c4 <HAL_RCC_OscConfig+0xfcc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	604b      	str	r3, [r1, #4]
 8003e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e30:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003e34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	fa93 f2a3 	rbit	r2, r3
 8003e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e4c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003e50:	601a      	str	r2, [r3, #0]
  return result;
 8003e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e56:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003e5a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e5c:	fab3 f383 	clz	r3, r3
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e66:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2301      	movs	r3, #1
 8003e70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fd ff75 	bl	8001d60 <HAL_GetTick>
 8003e76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e7a:	e009      	b.n	8003e90 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7fd ff70 	bl	8001d60 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e13a      	b.n	8004106 <HAL_RCC_OscConfig+0x100e>
 8003e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e94:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003e98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	fa93 f2a3 	rbit	r2, r3
 8003eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003eb4:	601a      	str	r2, [r3, #0]
  return result;
 8003eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eba:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003ebe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ec8:	d802      	bhi.n	8003ed0 <HAL_RCC_OscConfig+0xdd8>
 8003eca:	4b7e      	ldr	r3, [pc, #504]	@ (80040c4 <HAL_RCC_OscConfig+0xfcc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	e027      	b.n	8003f20 <HAL_RCC_OscConfig+0xe28>
 8003ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003ed8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	fa93 f2a3 	rbit	r2, r3
 8003eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003efa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003efe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f08:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	fa93 f2a3 	rbit	r2, r3
 8003f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f16:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	4b69      	ldr	r3, [pc, #420]	@ (80040c4 <HAL_RCC_OscConfig+0xfcc>)
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f24:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003f28:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f2c:	6011      	str	r1, [r2, #0]
 8003f2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f32:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	fa92 f1a2 	rbit	r1, r2
 8003f3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f40:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003f44:	6011      	str	r1, [r2, #0]
  return result;
 8003f46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f4a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	fab2 f282 	clz	r2, r2
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	f042 0220 	orr.w	r2, r2, #32
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	f002 021f 	and.w	r2, r2, #31
 8003f60:	2101      	movs	r1, #1
 8003f62:	fa01 f202 	lsl.w	r2, r1, r2
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d087      	beq.n	8003e7c <HAL_RCC_OscConfig+0xd84>
 8003f6c:	e0ca      	b.n	8004104 <HAL_RCC_OscConfig+0x100c>
 8003f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f72:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003f76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f80:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	fa93 f2a3 	rbit	r2, r3
 8003f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003f92:	601a      	str	r2, [r3, #0]
  return result;
 8003f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f98:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003f9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fa8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd fed4 	bl	8001d60 <HAL_GetTick>
 8003fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fbc:	e009      	b.n	8003fd2 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fbe:	f7fd fecf 	bl	8001d60 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e099      	b.n	8004106 <HAL_RCC_OscConfig+0x100e>
 8003fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003fda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	fa93 f2a3 	rbit	r2, r3
 8003fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ff6:	601a      	str	r2, [r3, #0]
  return result;
 8003ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ffc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004000:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004002:	fab3 f383 	clz	r3, r3
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b3f      	cmp	r3, #63	@ 0x3f
 800400a:	d802      	bhi.n	8004012 <HAL_RCC_OscConfig+0xf1a>
 800400c:	4b2d      	ldr	r3, [pc, #180]	@ (80040c4 <HAL_RCC_OscConfig+0xfcc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	e027      	b.n	8004062 <HAL_RCC_OscConfig+0xf6a>
 8004012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004016:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800401a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800401e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004024:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	fa93 f2a3 	rbit	r2, r3
 800402e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004032:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004040:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	fa93 f2a3 	rbit	r2, r3
 8004054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004058:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	4b19      	ldr	r3, [pc, #100]	@ (80040c4 <HAL_RCC_OscConfig+0xfcc>)
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004066:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800406a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800406e:	6011      	str	r1, [r2, #0]
 8004070:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004074:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	fa92 f1a2 	rbit	r1, r2
 800407e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004082:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004086:	6011      	str	r1, [r2, #0]
  return result;
 8004088:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800408c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	fab2 f282 	clz	r2, r2
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	f042 0220 	orr.w	r2, r2, #32
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	f002 021f 	and.w	r2, r2, #31
 80040a2:	2101      	movs	r1, #1
 80040a4:	fa01 f202 	lsl.w	r2, r1, r2
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d187      	bne.n	8003fbe <HAL_RCC_OscConfig+0xec6>
 80040ae:	e029      	b.n	8004104 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d103      	bne.n	80040c8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e020      	b.n	8004106 <HAL_RCC_OscConfig+0x100e>
 80040c4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040c8:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <HAL_RCC_OscConfig+0x1018>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80040d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d10b      	bne.n	8004100 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80040e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80040ec:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40021000 	.word	0x40021000

08004114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b09e      	sub	sp, #120	@ 0x78
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e154      	b.n	80043d6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b89      	ldr	r3, [pc, #548]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b86      	ldr	r3, [pc, #536]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0207 	bic.w	r2, r3, #7
 8004142:	4984      	ldr	r1, [pc, #528]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b82      	ldr	r3, [pc, #520]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e13c      	b.n	80043d6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004168:	4b7b      	ldr	r3, [pc, #492]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	4978      	ldr	r1, [pc, #480]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80cd 	beq.w	8004322 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d137      	bne.n	8004200 <HAL_RCC_ClockConfig+0xec>
 8004190:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004194:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800419e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80041a8:	d802      	bhi.n	80041b0 <HAL_RCC_ClockConfig+0x9c>
 80041aa:	4b6b      	ldr	r3, [pc, #428]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	e00f      	b.n	80041d0 <HAL_RCC_ClockConfig+0xbc>
 80041b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80041be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80041c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80041c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041c6:	fa93 f3a3 	rbit	r3, r3
 80041ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041cc:	4b62      	ldr	r3, [pc, #392]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041d8:	fa92 f2a2 	rbit	r2, r2
 80041dc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80041de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80041e0:	fab2 f282 	clz	r2, r2
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	f042 0220 	orr.w	r2, r2, #32
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	f002 021f 	and.w	r2, r2, #31
 80041f0:	2101      	movs	r1, #1
 80041f2:	fa01 f202 	lsl.w	r2, r1, r2
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d171      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0ea      	b.n	80043d6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d137      	bne.n	8004278 <HAL_RCC_ClockConfig+0x164>
 8004208:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800420c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004220:	d802      	bhi.n	8004228 <HAL_RCC_ClockConfig+0x114>
 8004222:	4b4d      	ldr	r3, [pc, #308]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	e00f      	b.n	8004248 <HAL_RCC_ClockConfig+0x134>
 8004228:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800422c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004230:	fa93 f3a3 	rbit	r3, r3
 8004234:	647b      	str	r3, [r7, #68]	@ 0x44
 8004236:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800423a:	643b      	str	r3, [r7, #64]	@ 0x40
 800423c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004244:	4b44      	ldr	r3, [pc, #272]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800424c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800424e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004250:	fa92 f2a2 	rbit	r2, r2
 8004254:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004258:	fab2 f282 	clz	r2, r2
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	f042 0220 	orr.w	r2, r2, #32
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	f002 021f 	and.w	r2, r2, #31
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f202 	lsl.w	r2, r1, r2
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d135      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0ae      	b.n	80043d6 <HAL_RCC_ClockConfig+0x2c2>
 8004278:	2302      	movs	r3, #2
 800427a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b3f      	cmp	r3, #63	@ 0x3f
 800428e:	d802      	bhi.n	8004296 <HAL_RCC_ClockConfig+0x182>
 8004290:	4b31      	ldr	r3, [pc, #196]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	e00d      	b.n	80042b2 <HAL_RCC_ClockConfig+0x19e>
 8004296:	2302      	movs	r3, #2
 8004298:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a2:	2302      	movs	r3, #2
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	2202      	movs	r2, #2
 80042b4:	61ba      	str	r2, [r7, #24]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	fa92 f2a2 	rbit	r2, r2
 80042bc:	617a      	str	r2, [r7, #20]
  return result;
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	fab2 f282 	clz	r2, r2
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	f042 0220 	orr.w	r2, r2, #32
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	f002 021f 	and.w	r2, r2, #31
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f202 	lsl.w	r2, r1, r2
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e07a      	b.n	80043d6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f023 0203 	bic.w	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	491a      	ldr	r1, [pc, #104]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f2:	f7fd fd35 	bl	8001d60 <HAL_GetTick>
 80042f6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fa:	f7fd fd31 	bl	8001d60 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e062      	b.n	80043d6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004310:	4b11      	ldr	r3, [pc, #68]	@ (8004358 <HAL_RCC_ClockConfig+0x244>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 020c 	and.w	r2, r3, #12
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	429a      	cmp	r2, r3
 8004320:	d1eb      	bne.n	80042fa <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004322:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d215      	bcs.n	800435c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004330:	4b08      	ldr	r3, [pc, #32]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 0207 	bic.w	r2, r3, #7
 8004338:	4906      	ldr	r1, [pc, #24]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004340:	4b04      	ldr	r3, [pc, #16]	@ (8004354 <HAL_RCC_ClockConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d006      	beq.n	800435c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e041      	b.n	80043d6 <HAL_RCC_ClockConfig+0x2c2>
 8004352:	bf00      	nop
 8004354:	40022000 	.word	0x40022000
 8004358:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <HAL_RCC_ClockConfig+0x2cc>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	491a      	ldr	r1, [pc, #104]	@ (80043e0 <HAL_RCC_ClockConfig+0x2cc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004386:	4b16      	ldr	r3, [pc, #88]	@ (80043e0 <HAL_RCC_ClockConfig+0x2cc>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4912      	ldr	r1, [pc, #72]	@ (80043e0 <HAL_RCC_ClockConfig+0x2cc>)
 8004396:	4313      	orrs	r3, r2
 8004398:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800439a:	f000 f829 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 800439e:	4601      	mov	r1, r0
 80043a0:	4b0f      	ldr	r3, [pc, #60]	@ (80043e0 <HAL_RCC_ClockConfig+0x2cc>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a8:	22f0      	movs	r2, #240	@ 0xf0
 80043aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	fa92 f2a2 	rbit	r2, r2
 80043b2:	60fa      	str	r2, [r7, #12]
  return result;
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	fab2 f282 	clz	r2, r2
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	40d3      	lsrs	r3, r2
 80043be:	4a09      	ldr	r2, [pc, #36]	@ (80043e4 <HAL_RCC_ClockConfig+0x2d0>)
 80043c0:	5cd3      	ldrb	r3, [r2, r3]
 80043c2:	fa21 f303 	lsr.w	r3, r1, r3
 80043c6:	4a08      	ldr	r2, [pc, #32]	@ (80043e8 <HAL_RCC_ClockConfig+0x2d4>)
 80043c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80043ca:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <HAL_RCC_ClockConfig+0x2d8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fd fc82 	bl	8001cd8 <HAL_InitTick>
  
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3778      	adds	r7, #120	@ 0x78
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	08007ca8 	.word	0x08007ca8
 80043e8:	2000012c 	.word	0x2000012c
 80043ec:	20000130 	.word	0x20000130

080043f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b08b      	sub	sp, #44	@ 0x2c
 80043f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	2300      	movs	r3, #0
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	2300      	movs	r3, #0
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800440a:	4b29      	ldr	r3, [pc, #164]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b04      	cmp	r3, #4
 8004418:	d002      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x30>
 800441a:	2b08      	cmp	r3, #8
 800441c:	d003      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x36>
 800441e:	e03c      	b.n	800449a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004420:	4b24      	ldr	r3, [pc, #144]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004422:	623b      	str	r3, [r7, #32]
      break;
 8004424:	e03c      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800442c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8004430:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	fa92 f2a2 	rbit	r2, r2
 8004438:	607a      	str	r2, [r7, #4]
  return result;
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	fab2 f282 	clz	r2, r2
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	40d3      	lsrs	r3, r2
 8004444:	4a1c      	ldr	r2, [pc, #112]	@ (80044b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004446:	5cd3      	ldrb	r3, [r2, r3]
 8004448:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800444a:	4b19      	ldr	r3, [pc, #100]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	220f      	movs	r2, #15
 8004454:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	fa92 f2a2 	rbit	r2, r2
 800445c:	60fa      	str	r2, [r7, #12]
  return result;
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	fab2 f282 	clz	r2, r2
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	40d3      	lsrs	r3, r2
 8004468:	4a14      	ldr	r2, [pc, #80]	@ (80044bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004478:	4a0e      	ldr	r2, [pc, #56]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
 8004488:	e004      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	4a0c      	ldr	r2, [pc, #48]	@ (80044c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	623b      	str	r3, [r7, #32]
      break;
 8004498:	e002      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800449a:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800449c:	623b      	str	r3, [r7, #32]
      break;
 800449e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a0:	6a3b      	ldr	r3, [r7, #32]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	372c      	adds	r7, #44	@ 0x2c
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
 80044b4:	007a1200 	.word	0x007a1200
 80044b8:	08007cb8 	.word	0x08007cb8
 80044bc:	08007cc8 	.word	0x08007cc8
 80044c0:	003d0900 	.word	0x003d0900

080044c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b092      	sub	sp, #72	@ 0x48
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80d2 	beq.w	800468c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e8:	4b4d      	ldr	r3, [pc, #308]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10e      	bne.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f4:	4b4a      	ldr	r3, [pc, #296]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	4a49      	ldr	r2, [pc, #292]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044fe:	61d3      	str	r3, [r2, #28]
 8004500:	4b47      	ldr	r3, [pc, #284]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b44      	ldr	r3, [pc, #272]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d118      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451e:	4b41      	ldr	r3, [pc, #260]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a40      	ldr	r2, [pc, #256]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004528:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452a:	f7fd fc19 	bl	8001d60 <HAL_GetTick>
 800452e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	e008      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004532:	f7fd fc15 	bl	8001d60 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b64      	cmp	r3, #100	@ 0x64
 800453e:	d901      	bls.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e167      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	4b37      	ldr	r3, [pc, #220]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004550:	4b33      	ldr	r3, [pc, #204]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004558:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800455a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8082 	beq.w	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800456c:	429a      	cmp	r2, r3
 800456e:	d07a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004570:	4b2b      	ldr	r3, [pc, #172]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800457a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800457e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004582:	fa93 f3a3 	rbit	r3, r3
 8004586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	4b25      	ldr	r3, [pc, #148]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	461a      	mov	r2, r3
 800459a:	2301      	movs	r3, #1
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80045ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	461a      	mov	r2, r3
 80045be:	2300      	movs	r3, #0
 80045c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045c2:	4a17      	ldr	r2, [pc, #92]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80045c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d049      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d2:	f7fd fbc5 	bl	8001d60 <HAL_GetTick>
 80045d6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7fd fbc1 	bl	8001d60 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e111      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80045f0:	2302      	movs	r3, #2
 80045f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fc:	2302      	movs	r3, #2
 80045fe:	623b      	str	r3, [r7, #32]
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	fa93 f3a3 	rbit	r3, r3
 8004606:	61fb      	str	r3, [r7, #28]
  return result;
 8004608:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d108      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800461a:	4b01      	ldr	r3, [pc, #4]	@ (8004620 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	e00d      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004620:	40021000 	.word	0x40021000
 8004624:	40007000 	.word	0x40007000
 8004628:	10908100 	.word	0x10908100
 800462c:	2302      	movs	r3, #2
 800462e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	4b78      	ldr	r3, [pc, #480]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	2202      	movs	r2, #2
 800463e:	613a      	str	r2, [r7, #16]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	fa92 f2a2 	rbit	r2, r2
 8004646:	60fa      	str	r2, [r7, #12]
  return result;
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	fab2 f282 	clz	r2, r2
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	f002 021f 	and.w	r2, r2, #31
 800465a:	2101      	movs	r1, #1
 800465c:	fa01 f202 	lsl.w	r2, r1, r2
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0b9      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004666:	4b6d      	ldr	r3, [pc, #436]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	496a      	ldr	r1, [pc, #424]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004674:	4313      	orrs	r3, r2
 8004676:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004678:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800467c:	2b01      	cmp	r3, #1
 800467e:	d105      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004680:	4b66      	ldr	r3, [pc, #408]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	4a65      	ldr	r2, [pc, #404]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800468a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004698:	4b60      	ldr	r3, [pc, #384]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469c:	f023 0203 	bic.w	r2, r3, #3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	495d      	ldr	r1, [pc, #372]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046b6:	4b59      	ldr	r3, [pc, #356]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4956      	ldr	r1, [pc, #344]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046d4:	4b51      	ldr	r3, [pc, #324]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	494e      	ldr	r1, [pc, #312]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046f2:	4b4a      	ldr	r3, [pc, #296]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	f023 0210 	bic.w	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	4947      	ldr	r1, [pc, #284]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004700:	4313      	orrs	r3, r2
 8004702:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004710:	4b42      	ldr	r3, [pc, #264]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471c:	493f      	ldr	r1, [pc, #252]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800471e:	4313      	orrs	r3, r2
 8004720:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d008      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800472e:	4b3b      	ldr	r3, [pc, #236]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004732:	f023 0220 	bic.w	r2, r3, #32
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4938      	ldr	r1, [pc, #224]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800473c:	4313      	orrs	r3, r2
 800473e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800474c:	4b33      	ldr	r3, [pc, #204]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	4930      	ldr	r1, [pc, #192]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800475a:	4313      	orrs	r3, r2
 800475c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800476a:	4b2c      	ldr	r3, [pc, #176]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	4929      	ldr	r1, [pc, #164]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004778:	4313      	orrs	r3, r2
 800477a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004788:	4b24      	ldr	r3, [pc, #144]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	4921      	ldr	r1, [pc, #132]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004796:	4313      	orrs	r3, r2
 8004798:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047a6:	4b1d      	ldr	r3, [pc, #116]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047aa:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b2:	491a      	ldr	r1, [pc, #104]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80047c4:	4b15      	ldr	r3, [pc, #84]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	4912      	ldr	r1, [pc, #72]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047e2:	4b0e      	ldr	r3, [pc, #56]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	490b      	ldr	r1, [pc, #44]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004800:	4b06      	ldr	r3, [pc, #24]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004804:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480c:	4903      	ldr	r1, [pc, #12]	@ (800481c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800480e:	4313      	orrs	r3, r2
 8004810:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3748      	adds	r7, #72	@ 0x48
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40021000 	.word	0x40021000

08004820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e09d      	b.n	800496e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	d108      	bne.n	800484c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004842:	d009      	beq.n	8004858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	61da      	str	r2, [r3, #28]
 800484a:	e005      	b.n	8004858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc fff2 	bl	800185c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800488e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004898:	d902      	bls.n	80048a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e002      	b.n	80048a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80048ae:	d007      	beq.n	80048c0 <HAL_SPI_Init+0xa0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048b8:	d002      	beq.n	80048c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004902:	ea42 0103 	orr.w	r1, r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	0c1b      	lsrs	r3, r3, #16
 800491c:	f003 0204 	and.w	r2, r3, #4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800493c:	ea42 0103 	orr.w	r1, r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800495c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e049      	b.n	8004a1c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7fc ff9f 	bl	80018e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	4619      	mov	r1, r3
 80049b4:	4610      	mov	r0, r2
 80049b6:	f000 ff37 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e049      	b.n	8004aca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fc ff94 	bl	8001978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	4619      	mov	r1, r3
 8004a62:	4610      	mov	r0, r2
 8004a64:	f000 fee0 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_TIM_PWM_Start+0x24>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	e03c      	b.n	8004b72 <HAL_TIM_PWM_Start+0x9e>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d109      	bne.n	8004b12 <HAL_TIM_PWM_Start+0x3e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	bf14      	ite	ne
 8004b0a:	2301      	movne	r3, #1
 8004b0c:	2300      	moveq	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	e02f      	b.n	8004b72 <HAL_TIM_PWM_Start+0x9e>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d109      	bne.n	8004b2c <HAL_TIM_PWM_Start+0x58>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e022      	b.n	8004b72 <HAL_TIM_PWM_Start+0x9e>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b0c      	cmp	r3, #12
 8004b30:	d109      	bne.n	8004b46 <HAL_TIM_PWM_Start+0x72>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	bf14      	ite	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	2300      	moveq	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	e015      	b.n	8004b72 <HAL_TIM_PWM_Start+0x9e>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d109      	bne.n	8004b60 <HAL_TIM_PWM_Start+0x8c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	bf14      	ite	ne
 8004b58:	2301      	movne	r3, #1
 8004b5a:	2300      	moveq	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e008      	b.n	8004b72 <HAL_TIM_PWM_Start+0x9e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e097      	b.n	8004caa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <HAL_TIM_PWM_Start+0xb6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b88:	e023      	b.n	8004bd2 <HAL_TIM_PWM_Start+0xfe>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_PWM_Start+0xc6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b98:	e01b      	b.n	8004bd2 <HAL_TIM_PWM_Start+0xfe>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start+0xd6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ba8:	e013      	b.n	8004bd2 <HAL_TIM_PWM_Start+0xfe>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start+0xe6>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bb8:	e00b      	b.n	8004bd2 <HAL_TIM_PWM_Start+0xfe>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_PWM_Start+0xf6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bc8:	e003      	b.n	8004bd2 <HAL_TIM_PWM_Start+0xfe>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fb42 	bl	8006264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a33      	ldr	r2, [pc, #204]	@ (8004cb4 <HAL_TIM_PWM_Start+0x1e0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_TIM_PWM_Start+0x13e>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a32      	ldr	r2, [pc, #200]	@ (8004cb8 <HAL_TIM_PWM_Start+0x1e4>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00e      	beq.n	8004c12 <HAL_TIM_PWM_Start+0x13e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a30      	ldr	r2, [pc, #192]	@ (8004cbc <HAL_TIM_PWM_Start+0x1e8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_TIM_PWM_Start+0x13e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc0 <HAL_TIM_PWM_Start+0x1ec>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_TIM_PWM_Start+0x13e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004cc4 <HAL_TIM_PWM_Start+0x1f0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d101      	bne.n	8004c16 <HAL_TIM_PWM_Start+0x142>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_PWM_Start+0x144>
 8004c16:	2300      	movs	r3, #0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a20      	ldr	r2, [pc, #128]	@ (8004cb4 <HAL_TIM_PWM_Start+0x1e0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_TIM_PWM_Start+0x194>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3e:	d013      	beq.n	8004c68 <HAL_TIM_PWM_Start+0x194>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a20      	ldr	r2, [pc, #128]	@ (8004cc8 <HAL_TIM_PWM_Start+0x1f4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_TIM_PWM_Start+0x194>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ccc <HAL_TIM_PWM_Start+0x1f8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_TIM_PWM_Start+0x194>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a17      	ldr	r2, [pc, #92]	@ (8004cb8 <HAL_TIM_PWM_Start+0x1e4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_PWM_Start+0x194>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a16      	ldr	r2, [pc, #88]	@ (8004cbc <HAL_TIM_PWM_Start+0x1e8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d115      	bne.n	8004c94 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	4b18      	ldr	r3, [pc, #96]	@ (8004cd0 <HAL_TIM_PWM_Start+0x1fc>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d015      	beq.n	8004ca6 <HAL_TIM_PWM_Start+0x1d2>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c80:	d011      	beq.n	8004ca6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c92:	e008      	b.n	8004ca6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e000      	b.n	8004ca8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40013400 	.word	0x40013400
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	00010007 	.word	0x00010007

08004cd4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e049      	b.n	8004d7a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f841 	bl	8004d82 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f000 fd88 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_IC_Start_IT+0x1e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	e023      	b.n	8004dfe <HAL_TIM_IC_Start_IT+0x66>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_IC_Start_IT+0x2e>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e01b      	b.n	8004dfe <HAL_TIM_IC_Start_IT+0x66>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_IC_Start_IT+0x3e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	e013      	b.n	8004dfe <HAL_TIM_IC_Start_IT+0x66>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b0c      	cmp	r3, #12
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_IC_Start_IT+0x4e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	e00b      	b.n	8004dfe <HAL_TIM_IC_Start_IT+0x66>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_IC_Start_IT+0x5e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e003      	b.n	8004dfe <HAL_TIM_IC_Start_IT+0x66>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d104      	bne.n	8004e10 <HAL_TIM_IC_Start_IT+0x78>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e013      	b.n	8004e38 <HAL_TIM_IC_Start_IT+0xa0>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d104      	bne.n	8004e20 <HAL_TIM_IC_Start_IT+0x88>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	e00b      	b.n	8004e38 <HAL_TIM_IC_Start_IT+0xa0>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d104      	bne.n	8004e30 <HAL_TIM_IC_Start_IT+0x98>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e003      	b.n	8004e38 <HAL_TIM_IC_Start_IT+0xa0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e3a:	7bbb      	ldrb	r3, [r7, #14]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d102      	bne.n	8004e46 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e40:	7b7b      	ldrb	r3, [r7, #13]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d001      	beq.n	8004e4a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e0d8      	b.n	8004ffc <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_IC_Start_IT+0xc2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e58:	e023      	b.n	8004ea2 <HAL_TIM_IC_Start_IT+0x10a>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_IC_Start_IT+0xd2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e68:	e01b      	b.n	8004ea2 <HAL_TIM_IC_Start_IT+0x10a>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_IC_Start_IT+0xe2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e78:	e013      	b.n	8004ea2 <HAL_TIM_IC_Start_IT+0x10a>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d104      	bne.n	8004e8a <HAL_TIM_IC_Start_IT+0xf2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e88:	e00b      	b.n	8004ea2 <HAL_TIM_IC_Start_IT+0x10a>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d104      	bne.n	8004e9a <HAL_TIM_IC_Start_IT+0x102>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e98:	e003      	b.n	8004ea2 <HAL_TIM_IC_Start_IT+0x10a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIM_IC_Start_IT+0x11a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eb0:	e013      	b.n	8004eda <HAL_TIM_IC_Start_IT+0x142>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d104      	bne.n	8004ec2 <HAL_TIM_IC_Start_IT+0x12a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ec0:	e00b      	b.n	8004eda <HAL_TIM_IC_Start_IT+0x142>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_IC_Start_IT+0x13a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ed0:	e003      	b.n	8004eda <HAL_TIM_IC_Start_IT+0x142>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	d841      	bhi.n	8004f64 <HAL_TIM_IC_Start_IT+0x1cc>
 8004ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <HAL_TIM_IC_Start_IT+0x150>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	08004f65 	.word	0x08004f65
 8004ef0:	08004f65 	.word	0x08004f65
 8004ef4:	08004f65 	.word	0x08004f65
 8004ef8:	08004f2f 	.word	0x08004f2f
 8004efc:	08004f65 	.word	0x08004f65
 8004f00:	08004f65 	.word	0x08004f65
 8004f04:	08004f65 	.word	0x08004f65
 8004f08:	08004f41 	.word	0x08004f41
 8004f0c:	08004f65 	.word	0x08004f65
 8004f10:	08004f65 	.word	0x08004f65
 8004f14:	08004f65 	.word	0x08004f65
 8004f18:	08004f53 	.word	0x08004f53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0202 	orr.w	r2, r2, #2
 8004f2a:	60da      	str	r2, [r3, #12]
      break;
 8004f2c:	e01d      	b.n	8004f6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0204 	orr.w	r2, r2, #4
 8004f3c:	60da      	str	r2, [r3, #12]
      break;
 8004f3e:	e014      	b.n	8004f6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0208 	orr.w	r2, r2, #8
 8004f4e:	60da      	str	r2, [r3, #12]
      break;
 8004f50:	e00b      	b.n	8004f6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0210 	orr.w	r2, r2, #16
 8004f60:	60da      	str	r2, [r3, #12]
      break;
 8004f62:	e002      	b.n	8004f6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
      break;
 8004f68:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d144      	bne.n	8004ffa <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2201      	movs	r2, #1
 8004f76:	6839      	ldr	r1, [r7, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 f973 	bl	8006264 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a20      	ldr	r2, [pc, #128]	@ (8005004 <HAL_TIM_IC_Start_IT+0x26c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d018      	beq.n	8004fba <HAL_TIM_IC_Start_IT+0x222>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f90:	d013      	beq.n	8004fba <HAL_TIM_IC_Start_IT+0x222>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1c      	ldr	r2, [pc, #112]	@ (8005008 <HAL_TIM_IC_Start_IT+0x270>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_TIM_IC_Start_IT+0x222>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800500c <HAL_TIM_IC_Start_IT+0x274>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_TIM_IC_Start_IT+0x222>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a19      	ldr	r2, [pc, #100]	@ (8005010 <HAL_TIM_IC_Start_IT+0x278>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_TIM_IC_Start_IT+0x222>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a17      	ldr	r2, [pc, #92]	@ (8005014 <HAL_TIM_IC_Start_IT+0x27c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d115      	bne.n	8004fe6 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	4b15      	ldr	r3, [pc, #84]	@ (8005018 <HAL_TIM_IC_Start_IT+0x280>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b06      	cmp	r3, #6
 8004fca:	d015      	beq.n	8004ff8 <HAL_TIM_IC_Start_IT+0x260>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd2:	d011      	beq.n	8004ff8 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe4:	e008      	b.n	8004ff8 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e000      	b.n	8004ffa <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40013400 	.word	0x40013400
 8005014:	40014000 	.word	0x40014000
 8005018:	00010007 	.word	0x00010007

0800501c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b02      	cmp	r3, #2
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0202 	mvn.w	r2, #2
 8005048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fb fdca 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fbc0 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fbc7 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b04      	cmp	r3, #4
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b04      	cmp	r3, #4
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0204 	mvn.w	r2, #4
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fb fda0 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fb96 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fb9d 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d122      	bne.n	8005120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d11b      	bne.n	8005120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0208 	mvn.w	r2, #8
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2204      	movs	r2, #4
 80050f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7fb fd76 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fb6c 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fb73 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	2b10      	cmp	r3, #16
 800512c:	d122      	bne.n	8005174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b10      	cmp	r3, #16
 800513a:	d11b      	bne.n	8005174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0210 	mvn.w	r2, #16
 8005144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2208      	movs	r2, #8
 800514a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fb fd4c 	bl	8000bf8 <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fb42 	bl	80057ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fb49 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10e      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d107      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0201 	mvn.w	r2, #1
 8005198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fb1c 	bl	80057d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051aa:	2b80      	cmp	r3, #128	@ 0x80
 80051ac:	d10e      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b8:	2b80      	cmp	r3, #128	@ 0x80
 80051ba:	d107      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f001 f8fc 	bl	80063c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051da:	d10e      	bne.n	80051fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e6:	2b80      	cmp	r3, #128	@ 0x80
 80051e8:	d107      	bne.n	80051fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 f8ef 	bl	80063d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005204:	2b40      	cmp	r3, #64	@ 0x40
 8005206:	d10e      	bne.n	8005226 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d107      	bne.n	8005226 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 faf7 	bl	8005814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b20      	cmp	r3, #32
 8005232:	d10e      	bne.n	8005252 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b20      	cmp	r3, #32
 8005240:	d107      	bne.n	8005252 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f06f 0220 	mvn.w	r2, #32
 800524a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f001 f8af 	bl	80063b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005274:	2302      	movs	r3, #2
 8005276:	e088      	b.n	800538a <HAL_TIM_IC_ConfigChannel+0x130>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11b      	bne.n	80052be <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005296:	f000 fe2d 	bl	8005ef4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 020c 	bic.w	r2, r2, #12
 80052a8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6999      	ldr	r1, [r3, #24]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	619a      	str	r2, [r3, #24]
 80052bc:	e060      	b.n	8005380 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d11c      	bne.n	80052fe <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80052d4:	f000 fea5 	bl	8006022 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80052e6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6999      	ldr	r1, [r3, #24]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	021a      	lsls	r2, r3, #8
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	619a      	str	r2, [r3, #24]
 80052fc:	e040      	b.n	8005380 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d11b      	bne.n	800533c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005314:	f000 fef2 	bl	80060fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 020c 	bic.w	r2, r2, #12
 8005326:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69d9      	ldr	r1, [r3, #28]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	61da      	str	r2, [r3, #28]
 800533a:	e021      	b.n	8005380 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b0c      	cmp	r3, #12
 8005340:	d11c      	bne.n	800537c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005352:	f000 ff0f 	bl	8006174 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005364:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69d9      	ldr	r1, [r3, #28]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	021a      	lsls	r2, r3, #8
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	61da      	str	r2, [r3, #28]
 800537a:	e001      	b.n	8005380 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005388:	7dfb      	ldrb	r3, [r7, #23]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e0ff      	b.n	80055b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b14      	cmp	r3, #20
 80053be:	f200 80f0 	bhi.w	80055a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053c2:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	0800541d 	.word	0x0800541d
 80053cc:	080055a3 	.word	0x080055a3
 80053d0:	080055a3 	.word	0x080055a3
 80053d4:	080055a3 	.word	0x080055a3
 80053d8:	0800545d 	.word	0x0800545d
 80053dc:	080055a3 	.word	0x080055a3
 80053e0:	080055a3 	.word	0x080055a3
 80053e4:	080055a3 	.word	0x080055a3
 80053e8:	0800549f 	.word	0x0800549f
 80053ec:	080055a3 	.word	0x080055a3
 80053f0:	080055a3 	.word	0x080055a3
 80053f4:	080055a3 	.word	0x080055a3
 80053f8:	080054df 	.word	0x080054df
 80053fc:	080055a3 	.word	0x080055a3
 8005400:	080055a3 	.word	0x080055a3
 8005404:	080055a3 	.word	0x080055a3
 8005408:	08005521 	.word	0x08005521
 800540c:	080055a3 	.word	0x080055a3
 8005410:	080055a3 	.word	0x080055a3
 8005414:	080055a3 	.word	0x080055a3
 8005418:	08005561 	.word	0x08005561
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fa90 	bl	8005948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0208 	orr.w	r2, r2, #8
 8005436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0204 	bic.w	r2, r2, #4
 8005446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6999      	ldr	r1, [r3, #24]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	619a      	str	r2, [r3, #24]
      break;
 800545a:	e0a5      	b.n	80055a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fb00 	bl	8005a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6999      	ldr	r1, [r3, #24]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	021a      	lsls	r2, r3, #8
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	619a      	str	r2, [r3, #24]
      break;
 800549c:	e084      	b.n	80055a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68b9      	ldr	r1, [r7, #8]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fb69 	bl	8005b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0208 	orr.w	r2, r2, #8
 80054b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0204 	bic.w	r2, r2, #4
 80054c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69d9      	ldr	r1, [r3, #28]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	61da      	str	r2, [r3, #28]
      break;
 80054dc:	e064      	b.n	80055a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fbd1 	bl	8005c8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69d9      	ldr	r1, [r3, #28]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	021a      	lsls	r2, r3, #8
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	61da      	str	r2, [r3, #28]
      break;
 800551e:	e043      	b.n	80055a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fc1a 	bl	8005d60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0208 	orr.w	r2, r2, #8
 800553a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0204 	bic.w	r2, r2, #4
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800555e:	e023      	b.n	80055a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fc5e 	bl	8005e28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800557a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800558a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	021a      	lsls	r2, r3, #8
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055a0:	e002      	b.n	80055a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
      break;
 80055a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop

080055bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_TIM_ConfigClockSource+0x1c>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e0b6      	b.n	8005746 <HAL_TIM_ConfigClockSource+0x18a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005614:	d03e      	beq.n	8005694 <HAL_TIM_ConfigClockSource+0xd8>
 8005616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561a:	f200 8087 	bhi.w	800572c <HAL_TIM_ConfigClockSource+0x170>
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005622:	f000 8086 	beq.w	8005732 <HAL_TIM_ConfigClockSource+0x176>
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562a:	d87f      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x170>
 800562c:	2b70      	cmp	r3, #112	@ 0x70
 800562e:	d01a      	beq.n	8005666 <HAL_TIM_ConfigClockSource+0xaa>
 8005630:	2b70      	cmp	r3, #112	@ 0x70
 8005632:	d87b      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x170>
 8005634:	2b60      	cmp	r3, #96	@ 0x60
 8005636:	d050      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x11e>
 8005638:	2b60      	cmp	r3, #96	@ 0x60
 800563a:	d877      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x170>
 800563c:	2b50      	cmp	r3, #80	@ 0x50
 800563e:	d03c      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0xfe>
 8005640:	2b50      	cmp	r3, #80	@ 0x50
 8005642:	d873      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x170>
 8005644:	2b40      	cmp	r3, #64	@ 0x40
 8005646:	d058      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0x13e>
 8005648:	2b40      	cmp	r3, #64	@ 0x40
 800564a:	d86f      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x170>
 800564c:	2b30      	cmp	r3, #48	@ 0x30
 800564e:	d064      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x15e>
 8005650:	2b30      	cmp	r3, #48	@ 0x30
 8005652:	d86b      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x170>
 8005654:	2b20      	cmp	r3, #32
 8005656:	d060      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x15e>
 8005658:	2b20      	cmp	r3, #32
 800565a:	d867      	bhi.n	800572c <HAL_TIM_ConfigClockSource+0x170>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d05c      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x15e>
 8005660:	2b10      	cmp	r3, #16
 8005662:	d05a      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x15e>
 8005664:	e062      	b.n	800572c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005676:	f000 fdd5 	bl	8006224 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	609a      	str	r2, [r3, #8]
      break;
 8005692:	e04f      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056a4:	f000 fdbe 	bl	8006224 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056b6:	609a      	str	r2, [r3, #8]
      break;
 80056b8:	e03c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c6:	461a      	mov	r2, r3
 80056c8:	f000 fc7c 	bl	8005fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2150      	movs	r1, #80	@ 0x50
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fd8b 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 80056d8:	e02c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e6:	461a      	mov	r2, r3
 80056e8:	f000 fcd8 	bl	800609c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2160      	movs	r1, #96	@ 0x60
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fd7b 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 80056f8:	e01c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005706:	461a      	mov	r2, r3
 8005708:	f000 fc5c 	bl	8005fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2140      	movs	r1, #64	@ 0x40
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fd6b 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005718:	e00c      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4619      	mov	r1, r3
 8005724:	4610      	mov	r0, r2
 8005726:	f000 fd62 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 800572a:	e003      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
      break;
 8005730:	e000      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b0c      	cmp	r3, #12
 8005762:	d831      	bhi.n	80057c8 <HAL_TIM_ReadCapturedValue+0x78>
 8005764:	a201      	add	r2, pc, #4	@ (adr r2, 800576c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	080057a1 	.word	0x080057a1
 8005770:	080057c9 	.word	0x080057c9
 8005774:	080057c9 	.word	0x080057c9
 8005778:	080057c9 	.word	0x080057c9
 800577c:	080057ab 	.word	0x080057ab
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057c9 	.word	0x080057c9
 8005788:	080057c9 	.word	0x080057c9
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057c9 	.word	0x080057c9
 8005794:	080057c9 	.word	0x080057c9
 8005798:	080057c9 	.word	0x080057c9
 800579c:	080057bf 	.word	0x080057bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a6:	60fb      	str	r3, [r7, #12]

      break;
 80057a8:	e00f      	b.n	80057ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b0:	60fb      	str	r3, [r7, #12]

      break;
 80057b2:	e00a      	b.n	80057ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ba:	60fb      	str	r3, [r7, #12]

      break;
 80057bc:	e005      	b.n	80057ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c4:	60fb      	str	r3, [r7, #12]

      break;
 80057c6:	e000      	b.n	80057ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80057c8:	bf00      	nop
  }

  return tmpreg;
 80057ca:	68fb      	ldr	r3, [r7, #12]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3c      	ldr	r2, [pc, #240]	@ (800592c <TIM_Base_SetConfig+0x104>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00f      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005846:	d00b      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a39      	ldr	r2, [pc, #228]	@ (8005930 <TIM_Base_SetConfig+0x108>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d007      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a38      	ldr	r2, [pc, #224]	@ (8005934 <TIM_Base_SetConfig+0x10c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d003      	beq.n	8005860 <TIM_Base_SetConfig+0x38>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a37      	ldr	r2, [pc, #220]	@ (8005938 <TIM_Base_SetConfig+0x110>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d108      	bne.n	8005872 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a2d      	ldr	r2, [pc, #180]	@ (800592c <TIM_Base_SetConfig+0x104>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01b      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005880:	d017      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2a      	ldr	r2, [pc, #168]	@ (8005930 <TIM_Base_SetConfig+0x108>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a29      	ldr	r2, [pc, #164]	@ (8005934 <TIM_Base_SetConfig+0x10c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a28      	ldr	r2, [pc, #160]	@ (8005938 <TIM_Base_SetConfig+0x110>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a27      	ldr	r2, [pc, #156]	@ (800593c <TIM_Base_SetConfig+0x114>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a26      	ldr	r2, [pc, #152]	@ (8005940 <TIM_Base_SetConfig+0x118>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_Base_SetConfig+0x8a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a25      	ldr	r2, [pc, #148]	@ (8005944 <TIM_Base_SetConfig+0x11c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d108      	bne.n	80058c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a10      	ldr	r2, [pc, #64]	@ (800592c <TIM_Base_SetConfig+0x104>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00f      	beq.n	8005910 <TIM_Base_SetConfig+0xe8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a11      	ldr	r2, [pc, #68]	@ (8005938 <TIM_Base_SetConfig+0x110>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00b      	beq.n	8005910 <TIM_Base_SetConfig+0xe8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a10      	ldr	r2, [pc, #64]	@ (800593c <TIM_Base_SetConfig+0x114>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d007      	beq.n	8005910 <TIM_Base_SetConfig+0xe8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a0f      	ldr	r2, [pc, #60]	@ (8005940 <TIM_Base_SetConfig+0x118>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0xe8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0e      	ldr	r2, [pc, #56]	@ (8005944 <TIM_Base_SetConfig+0x11c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d103      	bne.n	8005918 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	615a      	str	r2, [r3, #20]
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40013400 	.word	0x40013400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800

08005948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f023 0302 	bic.w	r3, r3, #2
 8005994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005a54 <TIM_OC1_SetConfig+0x10c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00f      	beq.n	80059c8 <TIM_OC1_SetConfig+0x80>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005a58 <TIM_OC1_SetConfig+0x110>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00b      	beq.n	80059c8 <TIM_OC1_SetConfig+0x80>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a5c <TIM_OC1_SetConfig+0x114>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d007      	beq.n	80059c8 <TIM_OC1_SetConfig+0x80>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a29      	ldr	r2, [pc, #164]	@ (8005a60 <TIM_OC1_SetConfig+0x118>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_OC1_SetConfig+0x80>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a28      	ldr	r2, [pc, #160]	@ (8005a64 <TIM_OC1_SetConfig+0x11c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d10c      	bne.n	80059e2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0308 	bic.w	r3, r3, #8
 80059ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f023 0304 	bic.w	r3, r3, #4
 80059e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a54 <TIM_OC1_SetConfig+0x10c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00f      	beq.n	8005a0a <TIM_OC1_SetConfig+0xc2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005a58 <TIM_OC1_SetConfig+0x110>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00b      	beq.n	8005a0a <TIM_OC1_SetConfig+0xc2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a19      	ldr	r2, [pc, #100]	@ (8005a5c <TIM_OC1_SetConfig+0x114>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d007      	beq.n	8005a0a <TIM_OC1_SetConfig+0xc2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a18      	ldr	r2, [pc, #96]	@ (8005a60 <TIM_OC1_SetConfig+0x118>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC1_SetConfig+0xc2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a17      	ldr	r2, [pc, #92]	@ (8005a64 <TIM_OC1_SetConfig+0x11c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d111      	bne.n	8005a2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	621a      	str	r2, [r3, #32]
}
 8005a48:	bf00      	nop
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40012c00 	.word	0x40012c00
 8005a58:	40013400 	.word	0x40013400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400
 8005a64:	40014800 	.word	0x40014800

08005a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f023 0210 	bic.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0320 	bic.w	r3, r3, #32
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a28      	ldr	r2, [pc, #160]	@ (8005b68 <TIM_OC2_SetConfig+0x100>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC2_SetConfig+0x6c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a27      	ldr	r2, [pc, #156]	@ (8005b6c <TIM_OC2_SetConfig+0x104>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d10d      	bne.n	8005af0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a1d      	ldr	r2, [pc, #116]	@ (8005b68 <TIM_OC2_SetConfig+0x100>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00f      	beq.n	8005b18 <TIM_OC2_SetConfig+0xb0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a1c      	ldr	r2, [pc, #112]	@ (8005b6c <TIM_OC2_SetConfig+0x104>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_OC2_SetConfig+0xb0>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a1b      	ldr	r2, [pc, #108]	@ (8005b70 <TIM_OC2_SetConfig+0x108>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_OC2_SetConfig+0xb0>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005b74 <TIM_OC2_SetConfig+0x10c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC2_SetConfig+0xb0>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a19      	ldr	r2, [pc, #100]	@ (8005b78 <TIM_OC2_SetConfig+0x110>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d113      	bne.n	8005b40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b1e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b26:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40013400 	.word	0x40013400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a27      	ldr	r2, [pc, #156]	@ (8005c78 <TIM_OC3_SetConfig+0xfc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d003      	beq.n	8005be6 <TIM_OC3_SetConfig+0x6a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a26      	ldr	r2, [pc, #152]	@ (8005c7c <TIM_OC3_SetConfig+0x100>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10d      	bne.n	8005c02 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c00:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a1c      	ldr	r2, [pc, #112]	@ (8005c78 <TIM_OC3_SetConfig+0xfc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00f      	beq.n	8005c2a <TIM_OC3_SetConfig+0xae>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c7c <TIM_OC3_SetConfig+0x100>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00b      	beq.n	8005c2a <TIM_OC3_SetConfig+0xae>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1a      	ldr	r2, [pc, #104]	@ (8005c80 <TIM_OC3_SetConfig+0x104>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <TIM_OC3_SetConfig+0xae>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a19      	ldr	r2, [pc, #100]	@ (8005c84 <TIM_OC3_SetConfig+0x108>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_OC3_SetConfig+0xae>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a18      	ldr	r2, [pc, #96]	@ (8005c88 <TIM_OC3_SetConfig+0x10c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d113      	bne.n	8005c52 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40013400 	.word	0x40013400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800

08005c8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a18      	ldr	r2, [pc, #96]	@ (8005d4c <TIM_OC4_SetConfig+0xc0>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00f      	beq.n	8005d10 <TIM_OC4_SetConfig+0x84>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a17      	ldr	r2, [pc, #92]	@ (8005d50 <TIM_OC4_SetConfig+0xc4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00b      	beq.n	8005d10 <TIM_OC4_SetConfig+0x84>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a16      	ldr	r2, [pc, #88]	@ (8005d54 <TIM_OC4_SetConfig+0xc8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d007      	beq.n	8005d10 <TIM_OC4_SetConfig+0x84>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a15      	ldr	r2, [pc, #84]	@ (8005d58 <TIM_OC4_SetConfig+0xcc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_OC4_SetConfig+0x84>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a14      	ldr	r2, [pc, #80]	@ (8005d5c <TIM_OC4_SetConfig+0xd0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d109      	bne.n	8005d24 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	019b      	lsls	r3, r3, #6
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40012c00 	.word	0x40012c00
 8005d50:	40013400 	.word	0x40013400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	40014800 	.word	0x40014800

08005d60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005da4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a17      	ldr	r2, [pc, #92]	@ (8005e14 <TIM_OC5_SetConfig+0xb4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00f      	beq.n	8005dda <TIM_OC5_SetConfig+0x7a>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a16      	ldr	r2, [pc, #88]	@ (8005e18 <TIM_OC5_SetConfig+0xb8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00b      	beq.n	8005dda <TIM_OC5_SetConfig+0x7a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a15      	ldr	r2, [pc, #84]	@ (8005e1c <TIM_OC5_SetConfig+0xbc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d007      	beq.n	8005dda <TIM_OC5_SetConfig+0x7a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a14      	ldr	r2, [pc, #80]	@ (8005e20 <TIM_OC5_SetConfig+0xc0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d003      	beq.n	8005dda <TIM_OC5_SetConfig+0x7a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a13      	ldr	r2, [pc, #76]	@ (8005e24 <TIM_OC5_SetConfig+0xc4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d109      	bne.n	8005dee <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005de0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	621a      	str	r2, [r3, #32]
}
 8005e08:	bf00      	nop
 8005e0a:	371c      	adds	r7, #28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	40012c00 	.word	0x40012c00
 8005e18:	40013400 	.word	0x40013400
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40014400 	.word	0x40014400
 8005e24:	40014800 	.word	0x40014800

08005e28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	051b      	lsls	r3, r3, #20
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ee0 <TIM_OC6_SetConfig+0xb8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00f      	beq.n	8005ea4 <TIM_OC6_SetConfig+0x7c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a17      	ldr	r2, [pc, #92]	@ (8005ee4 <TIM_OC6_SetConfig+0xbc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00b      	beq.n	8005ea4 <TIM_OC6_SetConfig+0x7c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ee8 <TIM_OC6_SetConfig+0xc0>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d007      	beq.n	8005ea4 <TIM_OC6_SetConfig+0x7c>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a15      	ldr	r2, [pc, #84]	@ (8005eec <TIM_OC6_SetConfig+0xc4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC6_SetConfig+0x7c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a14      	ldr	r2, [pc, #80]	@ (8005ef0 <TIM_OC6_SetConfig+0xc8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d109      	bne.n	8005eb8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	029b      	lsls	r3, r3, #10
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40013400 	.word	0x40013400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800

08005ef4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f023 0201 	bic.w	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4a24      	ldr	r2, [pc, #144]	@ (8005fb0 <TIM_TI1_SetConfig+0xbc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d013      	beq.n	8005f4a <TIM_TI1_SetConfig+0x56>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f28:	d00f      	beq.n	8005f4a <TIM_TI1_SetConfig+0x56>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a21      	ldr	r2, [pc, #132]	@ (8005fb4 <TIM_TI1_SetConfig+0xc0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00b      	beq.n	8005f4a <TIM_TI1_SetConfig+0x56>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4a20      	ldr	r2, [pc, #128]	@ (8005fb8 <TIM_TI1_SetConfig+0xc4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d007      	beq.n	8005f4a <TIM_TI1_SetConfig+0x56>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fbc <TIM_TI1_SetConfig+0xc8>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_TI1_SetConfig+0x56>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a1e      	ldr	r2, [pc, #120]	@ (8005fc0 <TIM_TI1_SetConfig+0xcc>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d101      	bne.n	8005f4e <TIM_TI1_SetConfig+0x5a>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <TIM_TI1_SetConfig+0x5c>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d008      	beq.n	8005f66 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f023 0303 	bic.w	r3, r3, #3
 8005f5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	e003      	b.n	8005f6e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f043 0301 	orr.w	r3, r3, #1
 8005f6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f023 030a 	bic.w	r3, r3, #10
 8005f88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f003 030a 	and.w	r3, r3, #10
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	621a      	str	r2, [r3, #32]
}
 8005fa2:	bf00      	nop
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40013400 	.word	0x40013400
 8005fc0:	40014000 	.word	0x40014000

08005fc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	f023 0201 	bic.w	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f023 030a 	bic.w	r3, r3, #10
 8006000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006022:	b480      	push	{r7}
 8006024:	b087      	sub	sp, #28
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	f023 0210 	bic.w	r2, r3, #16
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800604e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	031b      	lsls	r3, r3, #12
 8006066:	b29b      	uxth	r3, r3
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006074:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	621a      	str	r2, [r3, #32]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f023 0210 	bic.w	r2, r3, #16
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	031b      	lsls	r3, r3, #12
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80060d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 0303 	bic.w	r3, r3, #3
 8006128:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006138:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	b2db      	uxtb	r3, r3
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800614c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	621a      	str	r2, [r3, #32]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
 8006180:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	031b      	lsls	r3, r3, #12
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80061c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	031b      	lsls	r3, r3, #12
 80061cc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	f043 0307 	orr.w	r3, r3, #7
 8006210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]
}
 8006218:	bf00      	nop
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800623e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	431a      	orrs	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4313      	orrs	r3, r2
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	609a      	str	r2, [r3, #8]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	2201      	movs	r2, #1
 8006278:	fa02 f303 	lsl.w	r3, r2, r3
 800627c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1a      	ldr	r2, [r3, #32]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	43db      	mvns	r3, r3
 8006286:	401a      	ands	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a1a      	ldr	r2, [r3, #32]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f003 031f 	and.w	r3, r3, #31
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	fa01 f303 	lsl.w	r3, r1, r3
 800629c:	431a      	orrs	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	621a      	str	r2, [r3, #32]
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
	...

080062b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e063      	b.n	8006390 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2b      	ldr	r2, [pc, #172]	@ (800639c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2a      	ldr	r2, [pc, #168]	@ (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d108      	bne.n	800630e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006302:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006314:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1b      	ldr	r2, [pc, #108]	@ (800639c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d018      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633a:	d013      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a18      	ldr	r2, [pc, #96]	@ (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00e      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a17      	ldr	r2, [pc, #92]	@ (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d009      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a12      	ldr	r2, [pc, #72]	@ (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a13      	ldr	r2, [pc, #76]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d10c      	bne.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800636a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	4313      	orrs	r3, r2
 8006374:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	40012c00 	.word	0x40012c00
 80063a0:	40013400 	.word	0x40013400
 80063a4:	40000400 	.word	0x40000400
 80063a8:	40000800 	.word	0x40000800
 80063ac:	40014000 	.word	0x40014000

080063b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063f4:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80063f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	b29b      	uxth	r3, r3
 8006406:	43db      	mvns	r3, r3
 8006408:	b29b      	uxth	r3, r3
 800640a:	4013      	ands	r3, r2
 800640c:	b29a      	uxth	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006422:	b084      	sub	sp, #16
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	f107 0014 	add.w	r0, r7, #20
 8006430:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	b004      	add	sp, #16
 8006462:	4770      	bx	lr

08006464 <siprintf>:
 8006464:	b40e      	push	{r1, r2, r3}
 8006466:	b510      	push	{r4, lr}
 8006468:	b09d      	sub	sp, #116	@ 0x74
 800646a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800646c:	9002      	str	r0, [sp, #8]
 800646e:	9006      	str	r0, [sp, #24]
 8006470:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006474:	480a      	ldr	r0, [pc, #40]	@ (80064a0 <siprintf+0x3c>)
 8006476:	9107      	str	r1, [sp, #28]
 8006478:	9104      	str	r1, [sp, #16]
 800647a:	490a      	ldr	r1, [pc, #40]	@ (80064a4 <siprintf+0x40>)
 800647c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006480:	9105      	str	r1, [sp, #20]
 8006482:	2400      	movs	r4, #0
 8006484:	a902      	add	r1, sp, #8
 8006486:	6800      	ldr	r0, [r0, #0]
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800648c:	f000 f89c 	bl	80065c8 <_svfiprintf_r>
 8006490:	9b02      	ldr	r3, [sp, #8]
 8006492:	701c      	strb	r4, [r3, #0]
 8006494:	b01d      	add	sp, #116	@ 0x74
 8006496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800649a:	b003      	add	sp, #12
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20000138 	.word	0x20000138
 80064a4:	ffff0208 	.word	0xffff0208

080064a8 <memset>:
 80064a8:	4402      	add	r2, r0
 80064aa:	4603      	mov	r3, r0
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d100      	bne.n	80064b2 <memset+0xa>
 80064b0:	4770      	bx	lr
 80064b2:	f803 1b01 	strb.w	r1, [r3], #1
 80064b6:	e7f9      	b.n	80064ac <memset+0x4>

080064b8 <__errno>:
 80064b8:	4b01      	ldr	r3, [pc, #4]	@ (80064c0 <__errno+0x8>)
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000138 	.word	0x20000138

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4d0d      	ldr	r5, [pc, #52]	@ (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006500 <__libc_init_array+0x3c>)
 80064ca:	1b64      	subs	r4, r4, r5
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2600      	movs	r6, #0
 80064d0:	42a6      	cmp	r6, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006508 <__libc_init_array+0x44>)
 80064d8:	f001 fbc2 	bl	8007c60 <_init>
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2600      	movs	r6, #0
 80064e2:	42a6      	cmp	r6, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ec:	4798      	blx	r3
 80064ee:	3601      	adds	r6, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f6:	4798      	blx	r3
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	08007d58 	.word	0x08007d58
 8006500:	08007d58 	.word	0x08007d58
 8006504:	08007d58 	.word	0x08007d58
 8006508:	08007d5c 	.word	0x08007d5c

0800650c <__retarget_lock_acquire_recursive>:
 800650c:	4770      	bx	lr

0800650e <__retarget_lock_release_recursive>:
 800650e:	4770      	bx	lr

08006510 <__ssputs_r>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	688e      	ldr	r6, [r1, #8]
 8006516:	461f      	mov	r7, r3
 8006518:	42be      	cmp	r6, r7
 800651a:	680b      	ldr	r3, [r1, #0]
 800651c:	4682      	mov	sl, r0
 800651e:	460c      	mov	r4, r1
 8006520:	4690      	mov	r8, r2
 8006522:	d82d      	bhi.n	8006580 <__ssputs_r+0x70>
 8006524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006528:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800652c:	d026      	beq.n	800657c <__ssputs_r+0x6c>
 800652e:	6965      	ldr	r5, [r4, #20]
 8006530:	6909      	ldr	r1, [r1, #16]
 8006532:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006536:	eba3 0901 	sub.w	r9, r3, r1
 800653a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800653e:	1c7b      	adds	r3, r7, #1
 8006540:	444b      	add	r3, r9
 8006542:	106d      	asrs	r5, r5, #1
 8006544:	429d      	cmp	r5, r3
 8006546:	bf38      	it	cc
 8006548:	461d      	movcc	r5, r3
 800654a:	0553      	lsls	r3, r2, #21
 800654c:	d527      	bpl.n	800659e <__ssputs_r+0x8e>
 800654e:	4629      	mov	r1, r5
 8006550:	f000 f958 	bl	8006804 <_malloc_r>
 8006554:	4606      	mov	r6, r0
 8006556:	b360      	cbz	r0, 80065b2 <__ssputs_r+0xa2>
 8006558:	6921      	ldr	r1, [r4, #16]
 800655a:	464a      	mov	r2, r9
 800655c:	f000 fbc2 	bl	8006ce4 <memcpy>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	6126      	str	r6, [r4, #16]
 800656e:	6165      	str	r5, [r4, #20]
 8006570:	444e      	add	r6, r9
 8006572:	eba5 0509 	sub.w	r5, r5, r9
 8006576:	6026      	str	r6, [r4, #0]
 8006578:	60a5      	str	r5, [r4, #8]
 800657a:	463e      	mov	r6, r7
 800657c:	42be      	cmp	r6, r7
 800657e:	d900      	bls.n	8006582 <__ssputs_r+0x72>
 8006580:	463e      	mov	r6, r7
 8006582:	6820      	ldr	r0, [r4, #0]
 8006584:	4632      	mov	r2, r6
 8006586:	4641      	mov	r1, r8
 8006588:	f000 fb82 	bl	8006c90 <memmove>
 800658c:	68a3      	ldr	r3, [r4, #8]
 800658e:	1b9b      	subs	r3, r3, r6
 8006590:	60a3      	str	r3, [r4, #8]
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	4433      	add	r3, r6
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	2000      	movs	r0, #0
 800659a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659e:	462a      	mov	r2, r5
 80065a0:	f000 fb48 	bl	8006c34 <_realloc_r>
 80065a4:	4606      	mov	r6, r0
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d1e0      	bne.n	800656c <__ssputs_r+0x5c>
 80065aa:	6921      	ldr	r1, [r4, #16]
 80065ac:	4650      	mov	r0, sl
 80065ae:	f000 fba7 	bl	8006d00 <_free_r>
 80065b2:	230c      	movs	r3, #12
 80065b4:	f8ca 3000 	str.w	r3, [sl]
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065be:	81a3      	strh	r3, [r4, #12]
 80065c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065c4:	e7e9      	b.n	800659a <__ssputs_r+0x8a>
	...

080065c8 <_svfiprintf_r>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	4698      	mov	r8, r3
 80065ce:	898b      	ldrh	r3, [r1, #12]
 80065d0:	061b      	lsls	r3, r3, #24
 80065d2:	b09d      	sub	sp, #116	@ 0x74
 80065d4:	4607      	mov	r7, r0
 80065d6:	460d      	mov	r5, r1
 80065d8:	4614      	mov	r4, r2
 80065da:	d510      	bpl.n	80065fe <_svfiprintf_r+0x36>
 80065dc:	690b      	ldr	r3, [r1, #16]
 80065de:	b973      	cbnz	r3, 80065fe <_svfiprintf_r+0x36>
 80065e0:	2140      	movs	r1, #64	@ 0x40
 80065e2:	f000 f90f 	bl	8006804 <_malloc_r>
 80065e6:	6028      	str	r0, [r5, #0]
 80065e8:	6128      	str	r0, [r5, #16]
 80065ea:	b930      	cbnz	r0, 80065fa <_svfiprintf_r+0x32>
 80065ec:	230c      	movs	r3, #12
 80065ee:	603b      	str	r3, [r7, #0]
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065f4:	b01d      	add	sp, #116	@ 0x74
 80065f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fa:	2340      	movs	r3, #64	@ 0x40
 80065fc:	616b      	str	r3, [r5, #20]
 80065fe:	2300      	movs	r3, #0
 8006600:	9309      	str	r3, [sp, #36]	@ 0x24
 8006602:	2320      	movs	r3, #32
 8006604:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006608:	f8cd 800c 	str.w	r8, [sp, #12]
 800660c:	2330      	movs	r3, #48	@ 0x30
 800660e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067ac <_svfiprintf_r+0x1e4>
 8006612:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006616:	f04f 0901 	mov.w	r9, #1
 800661a:	4623      	mov	r3, r4
 800661c:	469a      	mov	sl, r3
 800661e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006622:	b10a      	cbz	r2, 8006628 <_svfiprintf_r+0x60>
 8006624:	2a25      	cmp	r2, #37	@ 0x25
 8006626:	d1f9      	bne.n	800661c <_svfiprintf_r+0x54>
 8006628:	ebba 0b04 	subs.w	fp, sl, r4
 800662c:	d00b      	beq.n	8006646 <_svfiprintf_r+0x7e>
 800662e:	465b      	mov	r3, fp
 8006630:	4622      	mov	r2, r4
 8006632:	4629      	mov	r1, r5
 8006634:	4638      	mov	r0, r7
 8006636:	f7ff ff6b 	bl	8006510 <__ssputs_r>
 800663a:	3001      	adds	r0, #1
 800663c:	f000 80a7 	beq.w	800678e <_svfiprintf_r+0x1c6>
 8006640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006642:	445a      	add	r2, fp
 8006644:	9209      	str	r2, [sp, #36]	@ 0x24
 8006646:	f89a 3000 	ldrb.w	r3, [sl]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 809f 	beq.w	800678e <_svfiprintf_r+0x1c6>
 8006650:	2300      	movs	r3, #0
 8006652:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800665a:	f10a 0a01 	add.w	sl, sl, #1
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	9307      	str	r3, [sp, #28]
 8006662:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006666:	931a      	str	r3, [sp, #104]	@ 0x68
 8006668:	4654      	mov	r4, sl
 800666a:	2205      	movs	r2, #5
 800666c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006670:	484e      	ldr	r0, [pc, #312]	@ (80067ac <_svfiprintf_r+0x1e4>)
 8006672:	f7f9 fdad 	bl	80001d0 <memchr>
 8006676:	9a04      	ldr	r2, [sp, #16]
 8006678:	b9d8      	cbnz	r0, 80066b2 <_svfiprintf_r+0xea>
 800667a:	06d0      	lsls	r0, r2, #27
 800667c:	bf44      	itt	mi
 800667e:	2320      	movmi	r3, #32
 8006680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006684:	0711      	lsls	r1, r2, #28
 8006686:	bf44      	itt	mi
 8006688:	232b      	movmi	r3, #43	@ 0x2b
 800668a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800668e:	f89a 3000 	ldrb.w	r3, [sl]
 8006692:	2b2a      	cmp	r3, #42	@ 0x2a
 8006694:	d015      	beq.n	80066c2 <_svfiprintf_r+0xfa>
 8006696:	9a07      	ldr	r2, [sp, #28]
 8006698:	4654      	mov	r4, sl
 800669a:	2000      	movs	r0, #0
 800669c:	f04f 0c0a 	mov.w	ip, #10
 80066a0:	4621      	mov	r1, r4
 80066a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a6:	3b30      	subs	r3, #48	@ 0x30
 80066a8:	2b09      	cmp	r3, #9
 80066aa:	d94b      	bls.n	8006744 <_svfiprintf_r+0x17c>
 80066ac:	b1b0      	cbz	r0, 80066dc <_svfiprintf_r+0x114>
 80066ae:	9207      	str	r2, [sp, #28]
 80066b0:	e014      	b.n	80066dc <_svfiprintf_r+0x114>
 80066b2:	eba0 0308 	sub.w	r3, r0, r8
 80066b6:	fa09 f303 	lsl.w	r3, r9, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	46a2      	mov	sl, r4
 80066c0:	e7d2      	b.n	8006668 <_svfiprintf_r+0xa0>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	1d19      	adds	r1, r3, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	9103      	str	r1, [sp, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfbb      	ittet	lt
 80066ce:	425b      	neglt	r3, r3
 80066d0:	f042 0202 	orrlt.w	r2, r2, #2
 80066d4:	9307      	strge	r3, [sp, #28]
 80066d6:	9307      	strlt	r3, [sp, #28]
 80066d8:	bfb8      	it	lt
 80066da:	9204      	strlt	r2, [sp, #16]
 80066dc:	7823      	ldrb	r3, [r4, #0]
 80066de:	2b2e      	cmp	r3, #46	@ 0x2e
 80066e0:	d10a      	bne.n	80066f8 <_svfiprintf_r+0x130>
 80066e2:	7863      	ldrb	r3, [r4, #1]
 80066e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80066e6:	d132      	bne.n	800674e <_svfiprintf_r+0x186>
 80066e8:	9b03      	ldr	r3, [sp, #12]
 80066ea:	1d1a      	adds	r2, r3, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	9203      	str	r2, [sp, #12]
 80066f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066f4:	3402      	adds	r4, #2
 80066f6:	9305      	str	r3, [sp, #20]
 80066f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067bc <_svfiprintf_r+0x1f4>
 80066fc:	7821      	ldrb	r1, [r4, #0]
 80066fe:	2203      	movs	r2, #3
 8006700:	4650      	mov	r0, sl
 8006702:	f7f9 fd65 	bl	80001d0 <memchr>
 8006706:	b138      	cbz	r0, 8006718 <_svfiprintf_r+0x150>
 8006708:	9b04      	ldr	r3, [sp, #16]
 800670a:	eba0 000a 	sub.w	r0, r0, sl
 800670e:	2240      	movs	r2, #64	@ 0x40
 8006710:	4082      	lsls	r2, r0
 8006712:	4313      	orrs	r3, r2
 8006714:	3401      	adds	r4, #1
 8006716:	9304      	str	r3, [sp, #16]
 8006718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671c:	4824      	ldr	r0, [pc, #144]	@ (80067b0 <_svfiprintf_r+0x1e8>)
 800671e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006722:	2206      	movs	r2, #6
 8006724:	f7f9 fd54 	bl	80001d0 <memchr>
 8006728:	2800      	cmp	r0, #0
 800672a:	d036      	beq.n	800679a <_svfiprintf_r+0x1d2>
 800672c:	4b21      	ldr	r3, [pc, #132]	@ (80067b4 <_svfiprintf_r+0x1ec>)
 800672e:	bb1b      	cbnz	r3, 8006778 <_svfiprintf_r+0x1b0>
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	3307      	adds	r3, #7
 8006734:	f023 0307 	bic.w	r3, r3, #7
 8006738:	3308      	adds	r3, #8
 800673a:	9303      	str	r3, [sp, #12]
 800673c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800673e:	4433      	add	r3, r6
 8006740:	9309      	str	r3, [sp, #36]	@ 0x24
 8006742:	e76a      	b.n	800661a <_svfiprintf_r+0x52>
 8006744:	fb0c 3202 	mla	r2, ip, r2, r3
 8006748:	460c      	mov	r4, r1
 800674a:	2001      	movs	r0, #1
 800674c:	e7a8      	b.n	80066a0 <_svfiprintf_r+0xd8>
 800674e:	2300      	movs	r3, #0
 8006750:	3401      	adds	r4, #1
 8006752:	9305      	str	r3, [sp, #20]
 8006754:	4619      	mov	r1, r3
 8006756:	f04f 0c0a 	mov.w	ip, #10
 800675a:	4620      	mov	r0, r4
 800675c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006760:	3a30      	subs	r2, #48	@ 0x30
 8006762:	2a09      	cmp	r2, #9
 8006764:	d903      	bls.n	800676e <_svfiprintf_r+0x1a6>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0c6      	beq.n	80066f8 <_svfiprintf_r+0x130>
 800676a:	9105      	str	r1, [sp, #20]
 800676c:	e7c4      	b.n	80066f8 <_svfiprintf_r+0x130>
 800676e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006772:	4604      	mov	r4, r0
 8006774:	2301      	movs	r3, #1
 8006776:	e7f0      	b.n	800675a <_svfiprintf_r+0x192>
 8006778:	ab03      	add	r3, sp, #12
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	462a      	mov	r2, r5
 800677e:	4b0e      	ldr	r3, [pc, #56]	@ (80067b8 <_svfiprintf_r+0x1f0>)
 8006780:	a904      	add	r1, sp, #16
 8006782:	4638      	mov	r0, r7
 8006784:	f3af 8000 	nop.w
 8006788:	1c42      	adds	r2, r0, #1
 800678a:	4606      	mov	r6, r0
 800678c:	d1d6      	bne.n	800673c <_svfiprintf_r+0x174>
 800678e:	89ab      	ldrh	r3, [r5, #12]
 8006790:	065b      	lsls	r3, r3, #25
 8006792:	f53f af2d 	bmi.w	80065f0 <_svfiprintf_r+0x28>
 8006796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006798:	e72c      	b.n	80065f4 <_svfiprintf_r+0x2c>
 800679a:	ab03      	add	r3, sp, #12
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	462a      	mov	r2, r5
 80067a0:	4b05      	ldr	r3, [pc, #20]	@ (80067b8 <_svfiprintf_r+0x1f0>)
 80067a2:	a904      	add	r1, sp, #16
 80067a4:	4638      	mov	r0, r7
 80067a6:	f000 f91b 	bl	80069e0 <_printf_i>
 80067aa:	e7ed      	b.n	8006788 <_svfiprintf_r+0x1c0>
 80067ac:	08007cd8 	.word	0x08007cd8
 80067b0:	08007ce2 	.word	0x08007ce2
 80067b4:	00000000 	.word	0x00000000
 80067b8:	08006511 	.word	0x08006511
 80067bc:	08007cde 	.word	0x08007cde

080067c0 <sbrk_aligned>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	4e0f      	ldr	r6, [pc, #60]	@ (8006800 <sbrk_aligned+0x40>)
 80067c4:	460c      	mov	r4, r1
 80067c6:	6831      	ldr	r1, [r6, #0]
 80067c8:	4605      	mov	r5, r0
 80067ca:	b911      	cbnz	r1, 80067d2 <sbrk_aligned+0x12>
 80067cc:	f000 fa7a 	bl	8006cc4 <_sbrk_r>
 80067d0:	6030      	str	r0, [r6, #0]
 80067d2:	4621      	mov	r1, r4
 80067d4:	4628      	mov	r0, r5
 80067d6:	f000 fa75 	bl	8006cc4 <_sbrk_r>
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	d103      	bne.n	80067e6 <sbrk_aligned+0x26>
 80067de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80067e2:	4620      	mov	r0, r4
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
 80067e6:	1cc4      	adds	r4, r0, #3
 80067e8:	f024 0403 	bic.w	r4, r4, #3
 80067ec:	42a0      	cmp	r0, r4
 80067ee:	d0f8      	beq.n	80067e2 <sbrk_aligned+0x22>
 80067f0:	1a21      	subs	r1, r4, r0
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 fa66 	bl	8006cc4 <_sbrk_r>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d1f2      	bne.n	80067e2 <sbrk_aligned+0x22>
 80067fc:	e7ef      	b.n	80067de <sbrk_aligned+0x1e>
 80067fe:	bf00      	nop
 8006800:	20000738 	.word	0x20000738

08006804 <_malloc_r>:
 8006804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006808:	1ccd      	adds	r5, r1, #3
 800680a:	f025 0503 	bic.w	r5, r5, #3
 800680e:	3508      	adds	r5, #8
 8006810:	2d0c      	cmp	r5, #12
 8006812:	bf38      	it	cc
 8006814:	250c      	movcc	r5, #12
 8006816:	2d00      	cmp	r5, #0
 8006818:	4606      	mov	r6, r0
 800681a:	db01      	blt.n	8006820 <_malloc_r+0x1c>
 800681c:	42a9      	cmp	r1, r5
 800681e:	d904      	bls.n	800682a <_malloc_r+0x26>
 8006820:	230c      	movs	r3, #12
 8006822:	6033      	str	r3, [r6, #0]
 8006824:	2000      	movs	r0, #0
 8006826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800682a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006900 <_malloc_r+0xfc>
 800682e:	f000 f9f5 	bl	8006c1c <__malloc_lock>
 8006832:	f8d8 3000 	ldr.w	r3, [r8]
 8006836:	461c      	mov	r4, r3
 8006838:	bb44      	cbnz	r4, 800688c <_malloc_r+0x88>
 800683a:	4629      	mov	r1, r5
 800683c:	4630      	mov	r0, r6
 800683e:	f7ff ffbf 	bl	80067c0 <sbrk_aligned>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	4604      	mov	r4, r0
 8006846:	d158      	bne.n	80068fa <_malloc_r+0xf6>
 8006848:	f8d8 4000 	ldr.w	r4, [r8]
 800684c:	4627      	mov	r7, r4
 800684e:	2f00      	cmp	r7, #0
 8006850:	d143      	bne.n	80068da <_malloc_r+0xd6>
 8006852:	2c00      	cmp	r4, #0
 8006854:	d04b      	beq.n	80068ee <_malloc_r+0xea>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	4639      	mov	r1, r7
 800685a:	4630      	mov	r0, r6
 800685c:	eb04 0903 	add.w	r9, r4, r3
 8006860:	f000 fa30 	bl	8006cc4 <_sbrk_r>
 8006864:	4581      	cmp	r9, r0
 8006866:	d142      	bne.n	80068ee <_malloc_r+0xea>
 8006868:	6821      	ldr	r1, [r4, #0]
 800686a:	1a6d      	subs	r5, r5, r1
 800686c:	4629      	mov	r1, r5
 800686e:	4630      	mov	r0, r6
 8006870:	f7ff ffa6 	bl	80067c0 <sbrk_aligned>
 8006874:	3001      	adds	r0, #1
 8006876:	d03a      	beq.n	80068ee <_malloc_r+0xea>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	442b      	add	r3, r5
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	f8d8 3000 	ldr.w	r3, [r8]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	bb62      	cbnz	r2, 80068e0 <_malloc_r+0xdc>
 8006886:	f8c8 7000 	str.w	r7, [r8]
 800688a:	e00f      	b.n	80068ac <_malloc_r+0xa8>
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	1b52      	subs	r2, r2, r5
 8006890:	d420      	bmi.n	80068d4 <_malloc_r+0xd0>
 8006892:	2a0b      	cmp	r2, #11
 8006894:	d917      	bls.n	80068c6 <_malloc_r+0xc2>
 8006896:	1961      	adds	r1, r4, r5
 8006898:	42a3      	cmp	r3, r4
 800689a:	6025      	str	r5, [r4, #0]
 800689c:	bf18      	it	ne
 800689e:	6059      	strne	r1, [r3, #4]
 80068a0:	6863      	ldr	r3, [r4, #4]
 80068a2:	bf08      	it	eq
 80068a4:	f8c8 1000 	streq.w	r1, [r8]
 80068a8:	5162      	str	r2, [r4, r5]
 80068aa:	604b      	str	r3, [r1, #4]
 80068ac:	4630      	mov	r0, r6
 80068ae:	f000 f9bb 	bl	8006c28 <__malloc_unlock>
 80068b2:	f104 000b 	add.w	r0, r4, #11
 80068b6:	1d23      	adds	r3, r4, #4
 80068b8:	f020 0007 	bic.w	r0, r0, #7
 80068bc:	1ac2      	subs	r2, r0, r3
 80068be:	bf1c      	itt	ne
 80068c0:	1a1b      	subne	r3, r3, r0
 80068c2:	50a3      	strne	r3, [r4, r2]
 80068c4:	e7af      	b.n	8006826 <_malloc_r+0x22>
 80068c6:	6862      	ldr	r2, [r4, #4]
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	bf0c      	ite	eq
 80068cc:	f8c8 2000 	streq.w	r2, [r8]
 80068d0:	605a      	strne	r2, [r3, #4]
 80068d2:	e7eb      	b.n	80068ac <_malloc_r+0xa8>
 80068d4:	4623      	mov	r3, r4
 80068d6:	6864      	ldr	r4, [r4, #4]
 80068d8:	e7ae      	b.n	8006838 <_malloc_r+0x34>
 80068da:	463c      	mov	r4, r7
 80068dc:	687f      	ldr	r7, [r7, #4]
 80068de:	e7b6      	b.n	800684e <_malloc_r+0x4a>
 80068e0:	461a      	mov	r2, r3
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	42a3      	cmp	r3, r4
 80068e6:	d1fb      	bne.n	80068e0 <_malloc_r+0xdc>
 80068e8:	2300      	movs	r3, #0
 80068ea:	6053      	str	r3, [r2, #4]
 80068ec:	e7de      	b.n	80068ac <_malloc_r+0xa8>
 80068ee:	230c      	movs	r3, #12
 80068f0:	6033      	str	r3, [r6, #0]
 80068f2:	4630      	mov	r0, r6
 80068f4:	f000 f998 	bl	8006c28 <__malloc_unlock>
 80068f8:	e794      	b.n	8006824 <_malloc_r+0x20>
 80068fa:	6005      	str	r5, [r0, #0]
 80068fc:	e7d6      	b.n	80068ac <_malloc_r+0xa8>
 80068fe:	bf00      	nop
 8006900:	2000073c 	.word	0x2000073c

08006904 <_printf_common>:
 8006904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006908:	4616      	mov	r6, r2
 800690a:	4698      	mov	r8, r3
 800690c:	688a      	ldr	r2, [r1, #8]
 800690e:	690b      	ldr	r3, [r1, #16]
 8006910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006914:	4293      	cmp	r3, r2
 8006916:	bfb8      	it	lt
 8006918:	4613      	movlt	r3, r2
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006920:	4607      	mov	r7, r0
 8006922:	460c      	mov	r4, r1
 8006924:	b10a      	cbz	r2, 800692a <_printf_common+0x26>
 8006926:	3301      	adds	r3, #1
 8006928:	6033      	str	r3, [r6, #0]
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	0699      	lsls	r1, r3, #26
 800692e:	bf42      	ittt	mi
 8006930:	6833      	ldrmi	r3, [r6, #0]
 8006932:	3302      	addmi	r3, #2
 8006934:	6033      	strmi	r3, [r6, #0]
 8006936:	6825      	ldr	r5, [r4, #0]
 8006938:	f015 0506 	ands.w	r5, r5, #6
 800693c:	d106      	bne.n	800694c <_printf_common+0x48>
 800693e:	f104 0a19 	add.w	sl, r4, #25
 8006942:	68e3      	ldr	r3, [r4, #12]
 8006944:	6832      	ldr	r2, [r6, #0]
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	42ab      	cmp	r3, r5
 800694a:	dc26      	bgt.n	800699a <_printf_common+0x96>
 800694c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	3b00      	subs	r3, #0
 8006954:	bf18      	it	ne
 8006956:	2301      	movne	r3, #1
 8006958:	0692      	lsls	r2, r2, #26
 800695a:	d42b      	bmi.n	80069b4 <_printf_common+0xb0>
 800695c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006960:	4641      	mov	r1, r8
 8006962:	4638      	mov	r0, r7
 8006964:	47c8      	blx	r9
 8006966:	3001      	adds	r0, #1
 8006968:	d01e      	beq.n	80069a8 <_printf_common+0xa4>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	6922      	ldr	r2, [r4, #16]
 800696e:	f003 0306 	and.w	r3, r3, #6
 8006972:	2b04      	cmp	r3, #4
 8006974:	bf02      	ittt	eq
 8006976:	68e5      	ldreq	r5, [r4, #12]
 8006978:	6833      	ldreq	r3, [r6, #0]
 800697a:	1aed      	subeq	r5, r5, r3
 800697c:	68a3      	ldr	r3, [r4, #8]
 800697e:	bf0c      	ite	eq
 8006980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006984:	2500      	movne	r5, #0
 8006986:	4293      	cmp	r3, r2
 8006988:	bfc4      	itt	gt
 800698a:	1a9b      	subgt	r3, r3, r2
 800698c:	18ed      	addgt	r5, r5, r3
 800698e:	2600      	movs	r6, #0
 8006990:	341a      	adds	r4, #26
 8006992:	42b5      	cmp	r5, r6
 8006994:	d11a      	bne.n	80069cc <_printf_common+0xc8>
 8006996:	2000      	movs	r0, #0
 8006998:	e008      	b.n	80069ac <_printf_common+0xa8>
 800699a:	2301      	movs	r3, #1
 800699c:	4652      	mov	r2, sl
 800699e:	4641      	mov	r1, r8
 80069a0:	4638      	mov	r0, r7
 80069a2:	47c8      	blx	r9
 80069a4:	3001      	adds	r0, #1
 80069a6:	d103      	bne.n	80069b0 <_printf_common+0xac>
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b0:	3501      	adds	r5, #1
 80069b2:	e7c6      	b.n	8006942 <_printf_common+0x3e>
 80069b4:	18e1      	adds	r1, r4, r3
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	2030      	movs	r0, #48	@ 0x30
 80069ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069be:	4422      	add	r2, r4
 80069c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069c8:	3302      	adds	r3, #2
 80069ca:	e7c7      	b.n	800695c <_printf_common+0x58>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4622      	mov	r2, r4
 80069d0:	4641      	mov	r1, r8
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c8      	blx	r9
 80069d6:	3001      	adds	r0, #1
 80069d8:	d0e6      	beq.n	80069a8 <_printf_common+0xa4>
 80069da:	3601      	adds	r6, #1
 80069dc:	e7d9      	b.n	8006992 <_printf_common+0x8e>
	...

080069e0 <_printf_i>:
 80069e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e4:	7e0f      	ldrb	r7, [r1, #24]
 80069e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069e8:	2f78      	cmp	r7, #120	@ 0x78
 80069ea:	4691      	mov	r9, r2
 80069ec:	4680      	mov	r8, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	469a      	mov	sl, r3
 80069f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069f6:	d807      	bhi.n	8006a08 <_printf_i+0x28>
 80069f8:	2f62      	cmp	r7, #98	@ 0x62
 80069fa:	d80a      	bhi.n	8006a12 <_printf_i+0x32>
 80069fc:	2f00      	cmp	r7, #0
 80069fe:	f000 80d1 	beq.w	8006ba4 <_printf_i+0x1c4>
 8006a02:	2f58      	cmp	r7, #88	@ 0x58
 8006a04:	f000 80b8 	beq.w	8006b78 <_printf_i+0x198>
 8006a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a10:	e03a      	b.n	8006a88 <_printf_i+0xa8>
 8006a12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a16:	2b15      	cmp	r3, #21
 8006a18:	d8f6      	bhi.n	8006a08 <_printf_i+0x28>
 8006a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a20 <_printf_i+0x40>)
 8006a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a20:	08006a79 	.word	0x08006a79
 8006a24:	08006a8d 	.word	0x08006a8d
 8006a28:	08006a09 	.word	0x08006a09
 8006a2c:	08006a09 	.word	0x08006a09
 8006a30:	08006a09 	.word	0x08006a09
 8006a34:	08006a09 	.word	0x08006a09
 8006a38:	08006a8d 	.word	0x08006a8d
 8006a3c:	08006a09 	.word	0x08006a09
 8006a40:	08006a09 	.word	0x08006a09
 8006a44:	08006a09 	.word	0x08006a09
 8006a48:	08006a09 	.word	0x08006a09
 8006a4c:	08006b8b 	.word	0x08006b8b
 8006a50:	08006ab7 	.word	0x08006ab7
 8006a54:	08006b45 	.word	0x08006b45
 8006a58:	08006a09 	.word	0x08006a09
 8006a5c:	08006a09 	.word	0x08006a09
 8006a60:	08006bad 	.word	0x08006bad
 8006a64:	08006a09 	.word	0x08006a09
 8006a68:	08006ab7 	.word	0x08006ab7
 8006a6c:	08006a09 	.word	0x08006a09
 8006a70:	08006a09 	.word	0x08006a09
 8006a74:	08006b4d 	.word	0x08006b4d
 8006a78:	6833      	ldr	r3, [r6, #0]
 8006a7a:	1d1a      	adds	r2, r3, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6032      	str	r2, [r6, #0]
 8006a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e09c      	b.n	8006bc6 <_printf_i+0x1e6>
 8006a8c:	6833      	ldr	r3, [r6, #0]
 8006a8e:	6820      	ldr	r0, [r4, #0]
 8006a90:	1d19      	adds	r1, r3, #4
 8006a92:	6031      	str	r1, [r6, #0]
 8006a94:	0606      	lsls	r6, r0, #24
 8006a96:	d501      	bpl.n	8006a9c <_printf_i+0xbc>
 8006a98:	681d      	ldr	r5, [r3, #0]
 8006a9a:	e003      	b.n	8006aa4 <_printf_i+0xc4>
 8006a9c:	0645      	lsls	r5, r0, #25
 8006a9e:	d5fb      	bpl.n	8006a98 <_printf_i+0xb8>
 8006aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006aa4:	2d00      	cmp	r5, #0
 8006aa6:	da03      	bge.n	8006ab0 <_printf_i+0xd0>
 8006aa8:	232d      	movs	r3, #45	@ 0x2d
 8006aaa:	426d      	negs	r5, r5
 8006aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ab0:	4858      	ldr	r0, [pc, #352]	@ (8006c14 <_printf_i+0x234>)
 8006ab2:	230a      	movs	r3, #10
 8006ab4:	e011      	b.n	8006ada <_printf_i+0xfa>
 8006ab6:	6821      	ldr	r1, [r4, #0]
 8006ab8:	6833      	ldr	r3, [r6, #0]
 8006aba:	0608      	lsls	r0, r1, #24
 8006abc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ac0:	d402      	bmi.n	8006ac8 <_printf_i+0xe8>
 8006ac2:	0649      	lsls	r1, r1, #25
 8006ac4:	bf48      	it	mi
 8006ac6:	b2ad      	uxthmi	r5, r5
 8006ac8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006aca:	4852      	ldr	r0, [pc, #328]	@ (8006c14 <_printf_i+0x234>)
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	bf14      	ite	ne
 8006ad0:	230a      	movne	r3, #10
 8006ad2:	2308      	moveq	r3, #8
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ada:	6866      	ldr	r6, [r4, #4]
 8006adc:	60a6      	str	r6, [r4, #8]
 8006ade:	2e00      	cmp	r6, #0
 8006ae0:	db05      	blt.n	8006aee <_printf_i+0x10e>
 8006ae2:	6821      	ldr	r1, [r4, #0]
 8006ae4:	432e      	orrs	r6, r5
 8006ae6:	f021 0104 	bic.w	r1, r1, #4
 8006aea:	6021      	str	r1, [r4, #0]
 8006aec:	d04b      	beq.n	8006b86 <_printf_i+0x1a6>
 8006aee:	4616      	mov	r6, r2
 8006af0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006af4:	fb03 5711 	mls	r7, r3, r1, r5
 8006af8:	5dc7      	ldrb	r7, [r0, r7]
 8006afa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006afe:	462f      	mov	r7, r5
 8006b00:	42bb      	cmp	r3, r7
 8006b02:	460d      	mov	r5, r1
 8006b04:	d9f4      	bls.n	8006af0 <_printf_i+0x110>
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d10b      	bne.n	8006b22 <_printf_i+0x142>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	07df      	lsls	r7, r3, #31
 8006b0e:	d508      	bpl.n	8006b22 <_printf_i+0x142>
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	6861      	ldr	r1, [r4, #4]
 8006b14:	4299      	cmp	r1, r3
 8006b16:	bfde      	ittt	le
 8006b18:	2330      	movle	r3, #48	@ 0x30
 8006b1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006b22:	1b92      	subs	r2, r2, r6
 8006b24:	6122      	str	r2, [r4, #16]
 8006b26:	f8cd a000 	str.w	sl, [sp]
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	aa03      	add	r2, sp, #12
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4640      	mov	r0, r8
 8006b32:	f7ff fee7 	bl	8006904 <_printf_common>
 8006b36:	3001      	adds	r0, #1
 8006b38:	d14a      	bne.n	8006bd0 <_printf_i+0x1f0>
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b3e:	b004      	add	sp, #16
 8006b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	f043 0320 	orr.w	r3, r3, #32
 8006b4a:	6023      	str	r3, [r4, #0]
 8006b4c:	4832      	ldr	r0, [pc, #200]	@ (8006c18 <_printf_i+0x238>)
 8006b4e:	2778      	movs	r7, #120	@ 0x78
 8006b50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	6831      	ldr	r1, [r6, #0]
 8006b58:	061f      	lsls	r7, r3, #24
 8006b5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b5e:	d402      	bmi.n	8006b66 <_printf_i+0x186>
 8006b60:	065f      	lsls	r7, r3, #25
 8006b62:	bf48      	it	mi
 8006b64:	b2ad      	uxthmi	r5, r5
 8006b66:	6031      	str	r1, [r6, #0]
 8006b68:	07d9      	lsls	r1, r3, #31
 8006b6a:	bf44      	itt	mi
 8006b6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006b70:	6023      	strmi	r3, [r4, #0]
 8006b72:	b11d      	cbz	r5, 8006b7c <_printf_i+0x19c>
 8006b74:	2310      	movs	r3, #16
 8006b76:	e7ad      	b.n	8006ad4 <_printf_i+0xf4>
 8006b78:	4826      	ldr	r0, [pc, #152]	@ (8006c14 <_printf_i+0x234>)
 8006b7a:	e7e9      	b.n	8006b50 <_printf_i+0x170>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	f023 0320 	bic.w	r3, r3, #32
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	e7f6      	b.n	8006b74 <_printf_i+0x194>
 8006b86:	4616      	mov	r6, r2
 8006b88:	e7bd      	b.n	8006b06 <_printf_i+0x126>
 8006b8a:	6833      	ldr	r3, [r6, #0]
 8006b8c:	6825      	ldr	r5, [r4, #0]
 8006b8e:	6961      	ldr	r1, [r4, #20]
 8006b90:	1d18      	adds	r0, r3, #4
 8006b92:	6030      	str	r0, [r6, #0]
 8006b94:	062e      	lsls	r6, r5, #24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	d501      	bpl.n	8006b9e <_printf_i+0x1be>
 8006b9a:	6019      	str	r1, [r3, #0]
 8006b9c:	e002      	b.n	8006ba4 <_printf_i+0x1c4>
 8006b9e:	0668      	lsls	r0, r5, #25
 8006ba0:	d5fb      	bpl.n	8006b9a <_printf_i+0x1ba>
 8006ba2:	8019      	strh	r1, [r3, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	6123      	str	r3, [r4, #16]
 8006ba8:	4616      	mov	r6, r2
 8006baa:	e7bc      	b.n	8006b26 <_printf_i+0x146>
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	1d1a      	adds	r2, r3, #4
 8006bb0:	6032      	str	r2, [r6, #0]
 8006bb2:	681e      	ldr	r6, [r3, #0]
 8006bb4:	6862      	ldr	r2, [r4, #4]
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f7f9 fb09 	bl	80001d0 <memchr>
 8006bbe:	b108      	cbz	r0, 8006bc4 <_printf_i+0x1e4>
 8006bc0:	1b80      	subs	r0, r0, r6
 8006bc2:	6060      	str	r0, [r4, #4]
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bce:	e7aa      	b.n	8006b26 <_printf_i+0x146>
 8006bd0:	6923      	ldr	r3, [r4, #16]
 8006bd2:	4632      	mov	r2, r6
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	47d0      	blx	sl
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d0ad      	beq.n	8006b3a <_printf_i+0x15a>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	079b      	lsls	r3, r3, #30
 8006be2:	d413      	bmi.n	8006c0c <_printf_i+0x22c>
 8006be4:	68e0      	ldr	r0, [r4, #12]
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	4298      	cmp	r0, r3
 8006bea:	bfb8      	it	lt
 8006bec:	4618      	movlt	r0, r3
 8006bee:	e7a6      	b.n	8006b3e <_printf_i+0x15e>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4632      	mov	r2, r6
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	47d0      	blx	sl
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d09d      	beq.n	8006b3a <_printf_i+0x15a>
 8006bfe:	3501      	adds	r5, #1
 8006c00:	68e3      	ldr	r3, [r4, #12]
 8006c02:	9903      	ldr	r1, [sp, #12]
 8006c04:	1a5b      	subs	r3, r3, r1
 8006c06:	42ab      	cmp	r3, r5
 8006c08:	dcf2      	bgt.n	8006bf0 <_printf_i+0x210>
 8006c0a:	e7eb      	b.n	8006be4 <_printf_i+0x204>
 8006c0c:	2500      	movs	r5, #0
 8006c0e:	f104 0619 	add.w	r6, r4, #25
 8006c12:	e7f5      	b.n	8006c00 <_printf_i+0x220>
 8006c14:	08007ce9 	.word	0x08007ce9
 8006c18:	08007cfa 	.word	0x08007cfa

08006c1c <__malloc_lock>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	@ (8006c24 <__malloc_lock+0x8>)
 8006c1e:	f7ff bc75 	b.w	800650c <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	20000734 	.word	0x20000734

08006c28 <__malloc_unlock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	@ (8006c30 <__malloc_unlock+0x8>)
 8006c2a:	f7ff bc70 	b.w	800650e <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20000734 	.word	0x20000734

08006c34 <_realloc_r>:
 8006c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c38:	4607      	mov	r7, r0
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	460d      	mov	r5, r1
 8006c3e:	b921      	cbnz	r1, 8006c4a <_realloc_r+0x16>
 8006c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c44:	4611      	mov	r1, r2
 8006c46:	f7ff bddd 	b.w	8006804 <_malloc_r>
 8006c4a:	b92a      	cbnz	r2, 8006c58 <_realloc_r+0x24>
 8006c4c:	f000 f858 	bl	8006d00 <_free_r>
 8006c50:	4625      	mov	r5, r4
 8006c52:	4628      	mov	r0, r5
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	f000 f89c 	bl	8006d94 <_malloc_usable_size_r>
 8006c5c:	4284      	cmp	r4, r0
 8006c5e:	4606      	mov	r6, r0
 8006c60:	d802      	bhi.n	8006c68 <_realloc_r+0x34>
 8006c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c66:	d8f4      	bhi.n	8006c52 <_realloc_r+0x1e>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f7ff fdca 	bl	8006804 <_malloc_r>
 8006c70:	4680      	mov	r8, r0
 8006c72:	b908      	cbnz	r0, 8006c78 <_realloc_r+0x44>
 8006c74:	4645      	mov	r5, r8
 8006c76:	e7ec      	b.n	8006c52 <_realloc_r+0x1e>
 8006c78:	42b4      	cmp	r4, r6
 8006c7a:	4622      	mov	r2, r4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	bf28      	it	cs
 8006c80:	4632      	movcs	r2, r6
 8006c82:	f000 f82f 	bl	8006ce4 <memcpy>
 8006c86:	4629      	mov	r1, r5
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f000 f839 	bl	8006d00 <_free_r>
 8006c8e:	e7f1      	b.n	8006c74 <_realloc_r+0x40>

08006c90 <memmove>:
 8006c90:	4288      	cmp	r0, r1
 8006c92:	b510      	push	{r4, lr}
 8006c94:	eb01 0402 	add.w	r4, r1, r2
 8006c98:	d902      	bls.n	8006ca0 <memmove+0x10>
 8006c9a:	4284      	cmp	r4, r0
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	d807      	bhi.n	8006cb0 <memmove+0x20>
 8006ca0:	1e43      	subs	r3, r0, #1
 8006ca2:	42a1      	cmp	r1, r4
 8006ca4:	d008      	beq.n	8006cb8 <memmove+0x28>
 8006ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cae:	e7f8      	b.n	8006ca2 <memmove+0x12>
 8006cb0:	4402      	add	r2, r0
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	428a      	cmp	r2, r1
 8006cb6:	d100      	bne.n	8006cba <memmove+0x2a>
 8006cb8:	bd10      	pop	{r4, pc}
 8006cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cc2:	e7f7      	b.n	8006cb4 <memmove+0x24>

08006cc4 <_sbrk_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4d06      	ldr	r5, [pc, #24]	@ (8006ce0 <_sbrk_r+0x1c>)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	4604      	mov	r4, r0
 8006ccc:	4608      	mov	r0, r1
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	f7fa ff34 	bl	8001b3c <_sbrk>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_sbrk_r+0x1a>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_sbrk_r+0x1a>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	20000740 	.word	0x20000740

08006ce4 <memcpy>:
 8006ce4:	440a      	add	r2, r1
 8006ce6:	4291      	cmp	r1, r2
 8006ce8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006cec:	d100      	bne.n	8006cf0 <memcpy+0xc>
 8006cee:	4770      	bx	lr
 8006cf0:	b510      	push	{r4, lr}
 8006cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cfa:	4291      	cmp	r1, r2
 8006cfc:	d1f9      	bne.n	8006cf2 <memcpy+0xe>
 8006cfe:	bd10      	pop	{r4, pc}

08006d00 <_free_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4605      	mov	r5, r0
 8006d04:	2900      	cmp	r1, #0
 8006d06:	d041      	beq.n	8006d8c <_free_r+0x8c>
 8006d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d0c:	1f0c      	subs	r4, r1, #4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bfb8      	it	lt
 8006d12:	18e4      	addlt	r4, r4, r3
 8006d14:	f7ff ff82 	bl	8006c1c <__malloc_lock>
 8006d18:	4a1d      	ldr	r2, [pc, #116]	@ (8006d90 <_free_r+0x90>)
 8006d1a:	6813      	ldr	r3, [r2, #0]
 8006d1c:	b933      	cbnz	r3, 8006d2c <_free_r+0x2c>
 8006d1e:	6063      	str	r3, [r4, #4]
 8006d20:	6014      	str	r4, [r2, #0]
 8006d22:	4628      	mov	r0, r5
 8006d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d28:	f7ff bf7e 	b.w	8006c28 <__malloc_unlock>
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	d908      	bls.n	8006d42 <_free_r+0x42>
 8006d30:	6820      	ldr	r0, [r4, #0]
 8006d32:	1821      	adds	r1, r4, r0
 8006d34:	428b      	cmp	r3, r1
 8006d36:	bf01      	itttt	eq
 8006d38:	6819      	ldreq	r1, [r3, #0]
 8006d3a:	685b      	ldreq	r3, [r3, #4]
 8006d3c:	1809      	addeq	r1, r1, r0
 8006d3e:	6021      	streq	r1, [r4, #0]
 8006d40:	e7ed      	b.n	8006d1e <_free_r+0x1e>
 8006d42:	461a      	mov	r2, r3
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	b10b      	cbz	r3, 8006d4c <_free_r+0x4c>
 8006d48:	42a3      	cmp	r3, r4
 8006d4a:	d9fa      	bls.n	8006d42 <_free_r+0x42>
 8006d4c:	6811      	ldr	r1, [r2, #0]
 8006d4e:	1850      	adds	r0, r2, r1
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d10b      	bne.n	8006d6c <_free_r+0x6c>
 8006d54:	6820      	ldr	r0, [r4, #0]
 8006d56:	4401      	add	r1, r0
 8006d58:	1850      	adds	r0, r2, r1
 8006d5a:	4283      	cmp	r3, r0
 8006d5c:	6011      	str	r1, [r2, #0]
 8006d5e:	d1e0      	bne.n	8006d22 <_free_r+0x22>
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	6053      	str	r3, [r2, #4]
 8006d66:	4408      	add	r0, r1
 8006d68:	6010      	str	r0, [r2, #0]
 8006d6a:	e7da      	b.n	8006d22 <_free_r+0x22>
 8006d6c:	d902      	bls.n	8006d74 <_free_r+0x74>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	e7d6      	b.n	8006d22 <_free_r+0x22>
 8006d74:	6820      	ldr	r0, [r4, #0]
 8006d76:	1821      	adds	r1, r4, r0
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	bf04      	itt	eq
 8006d7c:	6819      	ldreq	r1, [r3, #0]
 8006d7e:	685b      	ldreq	r3, [r3, #4]
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	bf04      	itt	eq
 8006d84:	1809      	addeq	r1, r1, r0
 8006d86:	6021      	streq	r1, [r4, #0]
 8006d88:	6054      	str	r4, [r2, #4]
 8006d8a:	e7ca      	b.n	8006d22 <_free_r+0x22>
 8006d8c:	bd38      	pop	{r3, r4, r5, pc}
 8006d8e:	bf00      	nop
 8006d90:	2000073c 	.word	0x2000073c

08006d94 <_malloc_usable_size_r>:
 8006d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d98:	1f18      	subs	r0, r3, #4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bfbc      	itt	lt
 8006d9e:	580b      	ldrlt	r3, [r1, r0]
 8006da0:	18c0      	addlt	r0, r0, r3
 8006da2:	4770      	bx	lr

08006da4 <pow>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	ed2d 8b02 	vpush	{d8}
 8006daa:	eeb0 8a40 	vmov.f32	s16, s0
 8006dae:	eef0 8a60 	vmov.f32	s17, s1
 8006db2:	ec55 4b11 	vmov	r4, r5, d1
 8006db6:	f000 f873 	bl	8006ea0 <__ieee754_pow>
 8006dba:	4622      	mov	r2, r4
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	ec57 6b10 	vmov	r6, r7, d0
 8006dc6:	f7f9 fea9 	bl	8000b1c <__aeabi_dcmpun>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d13b      	bne.n	8006e46 <pow+0xa2>
 8006dce:	ec51 0b18 	vmov	r0, r1, d8
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f7f9 fe6f 	bl	8000ab8 <__aeabi_dcmpeq>
 8006dda:	b1b8      	cbz	r0, 8006e0c <pow+0x68>
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2300      	movs	r3, #0
 8006de0:	4620      	mov	r0, r4
 8006de2:	4629      	mov	r1, r5
 8006de4:	f7f9 fe68 	bl	8000ab8 <__aeabi_dcmpeq>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d146      	bne.n	8006e7a <pow+0xd6>
 8006dec:	ec45 4b10 	vmov	d0, r4, r5
 8006df0:	f000 f848 	bl	8006e84 <finite>
 8006df4:	b338      	cbz	r0, 8006e46 <pow+0xa2>
 8006df6:	2200      	movs	r2, #0
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	f7f9 fe65 	bl	8000acc <__aeabi_dcmplt>
 8006e02:	b300      	cbz	r0, 8006e46 <pow+0xa2>
 8006e04:	f7ff fb58 	bl	80064b8 <__errno>
 8006e08:	2322      	movs	r3, #34	@ 0x22
 8006e0a:	e01b      	b.n	8006e44 <pow+0xa0>
 8006e0c:	ec47 6b10 	vmov	d0, r6, r7
 8006e10:	f000 f838 	bl	8006e84 <finite>
 8006e14:	b9e0      	cbnz	r0, 8006e50 <pow+0xac>
 8006e16:	eeb0 0a48 	vmov.f32	s0, s16
 8006e1a:	eef0 0a68 	vmov.f32	s1, s17
 8006e1e:	f000 f831 	bl	8006e84 <finite>
 8006e22:	b1a8      	cbz	r0, 8006e50 <pow+0xac>
 8006e24:	ec45 4b10 	vmov	d0, r4, r5
 8006e28:	f000 f82c 	bl	8006e84 <finite>
 8006e2c:	b180      	cbz	r0, 8006e50 <pow+0xac>
 8006e2e:	4632      	mov	r2, r6
 8006e30:	463b      	mov	r3, r7
 8006e32:	4630      	mov	r0, r6
 8006e34:	4639      	mov	r1, r7
 8006e36:	f7f9 fe71 	bl	8000b1c <__aeabi_dcmpun>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d0e2      	beq.n	8006e04 <pow+0x60>
 8006e3e:	f7ff fb3b 	bl	80064b8 <__errno>
 8006e42:	2321      	movs	r3, #33	@ 0x21
 8006e44:	6003      	str	r3, [r0, #0]
 8006e46:	ecbd 8b02 	vpop	{d8}
 8006e4a:	ec47 6b10 	vmov	d0, r6, r7
 8006e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e50:	2200      	movs	r2, #0
 8006e52:	2300      	movs	r3, #0
 8006e54:	4630      	mov	r0, r6
 8006e56:	4639      	mov	r1, r7
 8006e58:	f7f9 fe2e 	bl	8000ab8 <__aeabi_dcmpeq>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d0f2      	beq.n	8006e46 <pow+0xa2>
 8006e60:	eeb0 0a48 	vmov.f32	s0, s16
 8006e64:	eef0 0a68 	vmov.f32	s1, s17
 8006e68:	f000 f80c 	bl	8006e84 <finite>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d0ea      	beq.n	8006e46 <pow+0xa2>
 8006e70:	ec45 4b10 	vmov	d0, r4, r5
 8006e74:	f000 f806 	bl	8006e84 <finite>
 8006e78:	e7c3      	b.n	8006e02 <pow+0x5e>
 8006e7a:	4f01      	ldr	r7, [pc, #4]	@ (8006e80 <pow+0xdc>)
 8006e7c:	2600      	movs	r6, #0
 8006e7e:	e7e2      	b.n	8006e46 <pow+0xa2>
 8006e80:	3ff00000 	.word	0x3ff00000

08006e84 <finite>:
 8006e84:	b082      	sub	sp, #8
 8006e86:	ed8d 0b00 	vstr	d0, [sp]
 8006e8a:	9801      	ldr	r0, [sp, #4]
 8006e8c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006e90:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006e94:	0fc0      	lsrs	r0, r0, #31
 8006e96:	b002      	add	sp, #8
 8006e98:	4770      	bx	lr
 8006e9a:	0000      	movs	r0, r0
 8006e9c:	0000      	movs	r0, r0
	...

08006ea0 <__ieee754_pow>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	b091      	sub	sp, #68	@ 0x44
 8006ea6:	ed8d 1b00 	vstr	d1, [sp]
 8006eaa:	e9dd 1900 	ldrd	r1, r9, [sp]
 8006eae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8006eb2:	ea5a 0001 	orrs.w	r0, sl, r1
 8006eb6:	ec57 6b10 	vmov	r6, r7, d0
 8006eba:	d113      	bne.n	8006ee4 <__ieee754_pow+0x44>
 8006ebc:	19b3      	adds	r3, r6, r6
 8006ebe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8006ec2:	4152      	adcs	r2, r2
 8006ec4:	4298      	cmp	r0, r3
 8006ec6:	4b9a      	ldr	r3, [pc, #616]	@ (8007130 <__ieee754_pow+0x290>)
 8006ec8:	4193      	sbcs	r3, r2
 8006eca:	f080 84ee 	bcs.w	80078aa <__ieee754_pow+0xa0a>
 8006ece:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	f7f9 f9d1 	bl	800027c <__adddf3>
 8006eda:	ec41 0b10 	vmov	d0, r0, r1
 8006ede:	b011      	add	sp, #68	@ 0x44
 8006ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee4:	4a93      	ldr	r2, [pc, #588]	@ (8007134 <__ieee754_pow+0x294>)
 8006ee6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8006eea:	4295      	cmp	r5, r2
 8006eec:	46b8      	mov	r8, r7
 8006eee:	4633      	mov	r3, r6
 8006ef0:	d80a      	bhi.n	8006f08 <__ieee754_pow+0x68>
 8006ef2:	d104      	bne.n	8006efe <__ieee754_pow+0x5e>
 8006ef4:	2e00      	cmp	r6, #0
 8006ef6:	d1ea      	bne.n	8006ece <__ieee754_pow+0x2e>
 8006ef8:	45aa      	cmp	sl, r5
 8006efa:	d8e8      	bhi.n	8006ece <__ieee754_pow+0x2e>
 8006efc:	e001      	b.n	8006f02 <__ieee754_pow+0x62>
 8006efe:	4592      	cmp	sl, r2
 8006f00:	d802      	bhi.n	8006f08 <__ieee754_pow+0x68>
 8006f02:	4592      	cmp	sl, r2
 8006f04:	d10f      	bne.n	8006f26 <__ieee754_pow+0x86>
 8006f06:	b171      	cbz	r1, 8006f26 <__ieee754_pow+0x86>
 8006f08:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8006f0c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8006f10:	ea58 0803 	orrs.w	r8, r8, r3
 8006f14:	d1db      	bne.n	8006ece <__ieee754_pow+0x2e>
 8006f16:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f1a:	18db      	adds	r3, r3, r3
 8006f1c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006f20:	4152      	adcs	r2, r2
 8006f22:	4598      	cmp	r8, r3
 8006f24:	e7cf      	b.n	8006ec6 <__ieee754_pow+0x26>
 8006f26:	f1b8 0f00 	cmp.w	r8, #0
 8006f2a:	46ab      	mov	fp, r5
 8006f2c:	da43      	bge.n	8006fb6 <__ieee754_pow+0x116>
 8006f2e:	4a82      	ldr	r2, [pc, #520]	@ (8007138 <__ieee754_pow+0x298>)
 8006f30:	4592      	cmp	sl, r2
 8006f32:	d856      	bhi.n	8006fe2 <__ieee754_pow+0x142>
 8006f34:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006f38:	4592      	cmp	sl, r2
 8006f3a:	f240 84c5 	bls.w	80078c8 <__ieee754_pow+0xa28>
 8006f3e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8006f42:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006f46:	2a14      	cmp	r2, #20
 8006f48:	dd18      	ble.n	8006f7c <__ieee754_pow+0xdc>
 8006f4a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8006f4e:	fa21 f402 	lsr.w	r4, r1, r2
 8006f52:	fa04 f202 	lsl.w	r2, r4, r2
 8006f56:	428a      	cmp	r2, r1
 8006f58:	f040 84b6 	bne.w	80078c8 <__ieee754_pow+0xa28>
 8006f5c:	f004 0401 	and.w	r4, r4, #1
 8006f60:	f1c4 0402 	rsb	r4, r4, #2
 8006f64:	2900      	cmp	r1, #0
 8006f66:	d159      	bne.n	800701c <__ieee754_pow+0x17c>
 8006f68:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8006f6c:	d148      	bne.n	8007000 <__ieee754_pow+0x160>
 8006f6e:	4632      	mov	r2, r6
 8006f70:	463b      	mov	r3, r7
 8006f72:	4630      	mov	r0, r6
 8006f74:	4639      	mov	r1, r7
 8006f76:	f7f9 fb37 	bl	80005e8 <__aeabi_dmul>
 8006f7a:	e7ae      	b.n	8006eda <__ieee754_pow+0x3a>
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	d14c      	bne.n	800701a <__ieee754_pow+0x17a>
 8006f80:	f1c2 0214 	rsb	r2, r2, #20
 8006f84:	fa4a f402 	asr.w	r4, sl, r2
 8006f88:	fa04 f202 	lsl.w	r2, r4, r2
 8006f8c:	4552      	cmp	r2, sl
 8006f8e:	f040 8498 	bne.w	80078c2 <__ieee754_pow+0xa22>
 8006f92:	f004 0401 	and.w	r4, r4, #1
 8006f96:	f1c4 0402 	rsb	r4, r4, #2
 8006f9a:	4a68      	ldr	r2, [pc, #416]	@ (800713c <__ieee754_pow+0x29c>)
 8006f9c:	4592      	cmp	sl, r2
 8006f9e:	d1e3      	bne.n	8006f68 <__ieee754_pow+0xc8>
 8006fa0:	f1b9 0f00 	cmp.w	r9, #0
 8006fa4:	f280 8489 	bge.w	80078ba <__ieee754_pow+0xa1a>
 8006fa8:	4964      	ldr	r1, [pc, #400]	@ (800713c <__ieee754_pow+0x29c>)
 8006faa:	4632      	mov	r2, r6
 8006fac:	463b      	mov	r3, r7
 8006fae:	2000      	movs	r0, #0
 8006fb0:	f7f9 fc44 	bl	800083c <__aeabi_ddiv>
 8006fb4:	e791      	b.n	8006eda <__ieee754_pow+0x3a>
 8006fb6:	2400      	movs	r4, #0
 8006fb8:	bb81      	cbnz	r1, 800701c <__ieee754_pow+0x17c>
 8006fba:	4a5e      	ldr	r2, [pc, #376]	@ (8007134 <__ieee754_pow+0x294>)
 8006fbc:	4592      	cmp	sl, r2
 8006fbe:	d1ec      	bne.n	8006f9a <__ieee754_pow+0xfa>
 8006fc0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8006fc4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	f000 846e 	beq.w	80078aa <__ieee754_pow+0xa0a>
 8006fce:	4b5c      	ldr	r3, [pc, #368]	@ (8007140 <__ieee754_pow+0x2a0>)
 8006fd0:	429d      	cmp	r5, r3
 8006fd2:	d908      	bls.n	8006fe6 <__ieee754_pow+0x146>
 8006fd4:	f1b9 0f00 	cmp.w	r9, #0
 8006fd8:	f280 846b 	bge.w	80078b2 <__ieee754_pow+0xa12>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	2100      	movs	r1, #0
 8006fe0:	e77b      	b.n	8006eda <__ieee754_pow+0x3a>
 8006fe2:	2402      	movs	r4, #2
 8006fe4:	e7e8      	b.n	8006fb8 <__ieee754_pow+0x118>
 8006fe6:	f1b9 0f00 	cmp.w	r9, #0
 8006fea:	f04f 0000 	mov.w	r0, #0
 8006fee:	f04f 0100 	mov.w	r1, #0
 8006ff2:	f6bf af72 	bge.w	8006eda <__ieee754_pow+0x3a>
 8006ff6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006ffa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006ffe:	e76c      	b.n	8006eda <__ieee754_pow+0x3a>
 8007000:	4a50      	ldr	r2, [pc, #320]	@ (8007144 <__ieee754_pow+0x2a4>)
 8007002:	4591      	cmp	r9, r2
 8007004:	d10a      	bne.n	800701c <__ieee754_pow+0x17c>
 8007006:	f1b8 0f00 	cmp.w	r8, #0
 800700a:	db07      	blt.n	800701c <__ieee754_pow+0x17c>
 800700c:	ec47 6b10 	vmov	d0, r6, r7
 8007010:	b011      	add	sp, #68	@ 0x44
 8007012:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007016:	f000 bd4d 	b.w	8007ab4 <__ieee754_sqrt>
 800701a:	2400      	movs	r4, #0
 800701c:	ec47 6b10 	vmov	d0, r6, r7
 8007020:	9302      	str	r3, [sp, #8]
 8007022:	f000 fcc5 	bl	80079b0 <fabs>
 8007026:	9b02      	ldr	r3, [sp, #8]
 8007028:	ec51 0b10 	vmov	r0, r1, d0
 800702c:	bb43      	cbnz	r3, 8007080 <__ieee754_pow+0x1e0>
 800702e:	4b43      	ldr	r3, [pc, #268]	@ (800713c <__ieee754_pow+0x29c>)
 8007030:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8007034:	429a      	cmp	r2, r3
 8007036:	d000      	beq.n	800703a <__ieee754_pow+0x19a>
 8007038:	bb15      	cbnz	r5, 8007080 <__ieee754_pow+0x1e0>
 800703a:	f1b9 0f00 	cmp.w	r9, #0
 800703e:	da05      	bge.n	800704c <__ieee754_pow+0x1ac>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	2000      	movs	r0, #0
 8007046:	493d      	ldr	r1, [pc, #244]	@ (800713c <__ieee754_pow+0x29c>)
 8007048:	f7f9 fbf8 	bl	800083c <__aeabi_ddiv>
 800704c:	f1b8 0f00 	cmp.w	r8, #0
 8007050:	f6bf af43 	bge.w	8006eda <__ieee754_pow+0x3a>
 8007054:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007058:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800705c:	4325      	orrs	r5, r4
 800705e:	d108      	bne.n	8007072 <__ieee754_pow+0x1d2>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4610      	mov	r0, r2
 8007066:	4619      	mov	r1, r3
 8007068:	f7f9 f906 	bl	8000278 <__aeabi_dsub>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	e79e      	b.n	8006fb0 <__ieee754_pow+0x110>
 8007072:	2c01      	cmp	r4, #1
 8007074:	f47f af31 	bne.w	8006eda <__ieee754_pow+0x3a>
 8007078:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800707c:	4619      	mov	r1, r3
 800707e:	e72c      	b.n	8006eda <__ieee754_pow+0x3a>
 8007080:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8007084:	3b01      	subs	r3, #1
 8007086:	ea53 0204 	orrs.w	r2, r3, r4
 800708a:	d102      	bne.n	8007092 <__ieee754_pow+0x1f2>
 800708c:	4632      	mov	r2, r6
 800708e:	463b      	mov	r3, r7
 8007090:	e7e8      	b.n	8007064 <__ieee754_pow+0x1c4>
 8007092:	3c01      	subs	r4, #1
 8007094:	431c      	orrs	r4, r3
 8007096:	d016      	beq.n	80070c6 <__ieee754_pow+0x226>
 8007098:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007120 <__ieee754_pow+0x280>
 800709c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80070a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80070a4:	f240 8110 	bls.w	80072c8 <__ieee754_pow+0x428>
 80070a8:	4b27      	ldr	r3, [pc, #156]	@ (8007148 <__ieee754_pow+0x2a8>)
 80070aa:	459a      	cmp	sl, r3
 80070ac:	4b24      	ldr	r3, [pc, #144]	@ (8007140 <__ieee754_pow+0x2a0>)
 80070ae:	d916      	bls.n	80070de <__ieee754_pow+0x23e>
 80070b0:	429d      	cmp	r5, r3
 80070b2:	d80b      	bhi.n	80070cc <__ieee754_pow+0x22c>
 80070b4:	f1b9 0f00 	cmp.w	r9, #0
 80070b8:	da0b      	bge.n	80070d2 <__ieee754_pow+0x232>
 80070ba:	2000      	movs	r0, #0
 80070bc:	b011      	add	sp, #68	@ 0x44
 80070be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c2:	f000 bc6d 	b.w	80079a0 <__math_oflow>
 80070c6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8007128 <__ieee754_pow+0x288>
 80070ca:	e7e7      	b.n	800709c <__ieee754_pow+0x1fc>
 80070cc:	f1b9 0f00 	cmp.w	r9, #0
 80070d0:	dcf3      	bgt.n	80070ba <__ieee754_pow+0x21a>
 80070d2:	2000      	movs	r0, #0
 80070d4:	b011      	add	sp, #68	@ 0x44
 80070d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070da:	f000 bc59 	b.w	8007990 <__math_uflow>
 80070de:	429d      	cmp	r5, r3
 80070e0:	d20c      	bcs.n	80070fc <__ieee754_pow+0x25c>
 80070e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070e6:	2200      	movs	r2, #0
 80070e8:	2300      	movs	r3, #0
 80070ea:	f7f9 fcef 	bl	8000acc <__aeabi_dcmplt>
 80070ee:	3800      	subs	r0, #0
 80070f0:	bf18      	it	ne
 80070f2:	2001      	movne	r0, #1
 80070f4:	f1b9 0f00 	cmp.w	r9, #0
 80070f8:	daec      	bge.n	80070d4 <__ieee754_pow+0x234>
 80070fa:	e7df      	b.n	80070bc <__ieee754_pow+0x21c>
 80070fc:	4b0f      	ldr	r3, [pc, #60]	@ (800713c <__ieee754_pow+0x29c>)
 80070fe:	429d      	cmp	r5, r3
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	d922      	bls.n	800714c <__ieee754_pow+0x2ac>
 8007106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800710a:	2300      	movs	r3, #0
 800710c:	f7f9 fcde 	bl	8000acc <__aeabi_dcmplt>
 8007110:	3800      	subs	r0, #0
 8007112:	bf18      	it	ne
 8007114:	2001      	movne	r0, #1
 8007116:	f1b9 0f00 	cmp.w	r9, #0
 800711a:	dccf      	bgt.n	80070bc <__ieee754_pow+0x21c>
 800711c:	e7da      	b.n	80070d4 <__ieee754_pow+0x234>
 800711e:	bf00      	nop
 8007120:	00000000 	.word	0x00000000
 8007124:	3ff00000 	.word	0x3ff00000
 8007128:	00000000 	.word	0x00000000
 800712c:	bff00000 	.word	0xbff00000
 8007130:	fff00000 	.word	0xfff00000
 8007134:	7ff00000 	.word	0x7ff00000
 8007138:	433fffff 	.word	0x433fffff
 800713c:	3ff00000 	.word	0x3ff00000
 8007140:	3fefffff 	.word	0x3fefffff
 8007144:	3fe00000 	.word	0x3fe00000
 8007148:	43f00000 	.word	0x43f00000
 800714c:	4b5a      	ldr	r3, [pc, #360]	@ (80072b8 <__ieee754_pow+0x418>)
 800714e:	f7f9 f893 	bl	8000278 <__aeabi_dsub>
 8007152:	a351      	add	r3, pc, #324	@ (adr r3, 8007298 <__ieee754_pow+0x3f8>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	4604      	mov	r4, r0
 800715a:	460d      	mov	r5, r1
 800715c:	f7f9 fa44 	bl	80005e8 <__aeabi_dmul>
 8007160:	a34f      	add	r3, pc, #316	@ (adr r3, 80072a0 <__ieee754_pow+0x400>)
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	f7f9 fa3b 	bl	80005e8 <__aeabi_dmul>
 8007172:	4b52      	ldr	r3, [pc, #328]	@ (80072bc <__ieee754_pow+0x41c>)
 8007174:	4682      	mov	sl, r0
 8007176:	468b      	mov	fp, r1
 8007178:	2200      	movs	r2, #0
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	f7f9 fa33 	bl	80005e8 <__aeabi_dmul>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	a148      	add	r1, pc, #288	@ (adr r1, 80072a8 <__ieee754_pow+0x408>)
 8007188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800718c:	f7f9 f874 	bl	8000278 <__aeabi_dsub>
 8007190:	4622      	mov	r2, r4
 8007192:	462b      	mov	r3, r5
 8007194:	f7f9 fa28 	bl	80005e8 <__aeabi_dmul>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	2000      	movs	r0, #0
 800719e:	4948      	ldr	r1, [pc, #288]	@ (80072c0 <__ieee754_pow+0x420>)
 80071a0:	f7f9 f86a 	bl	8000278 <__aeabi_dsub>
 80071a4:	4622      	mov	r2, r4
 80071a6:	4680      	mov	r8, r0
 80071a8:	4689      	mov	r9, r1
 80071aa:	462b      	mov	r3, r5
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f9 fa1a 	bl	80005e8 <__aeabi_dmul>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4640      	mov	r0, r8
 80071ba:	4649      	mov	r1, r9
 80071bc:	f7f9 fa14 	bl	80005e8 <__aeabi_dmul>
 80071c0:	a33b      	add	r3, pc, #236	@ (adr r3, 80072b0 <__ieee754_pow+0x410>)
 80071c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c6:	f7f9 fa0f 	bl	80005e8 <__aeabi_dmul>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4650      	mov	r0, sl
 80071d0:	4659      	mov	r1, fp
 80071d2:	f7f9 f851 	bl	8000278 <__aeabi_dsub>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4680      	mov	r8, r0
 80071dc:	4689      	mov	r9, r1
 80071de:	4630      	mov	r0, r6
 80071e0:	4639      	mov	r1, r7
 80071e2:	f7f9 f84b 	bl	800027c <__adddf3>
 80071e6:	2400      	movs	r4, #0
 80071e8:	4632      	mov	r2, r6
 80071ea:	463b      	mov	r3, r7
 80071ec:	4620      	mov	r0, r4
 80071ee:	460d      	mov	r5, r1
 80071f0:	f7f9 f842 	bl	8000278 <__aeabi_dsub>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4640      	mov	r0, r8
 80071fa:	4649      	mov	r1, r9
 80071fc:	f7f9 f83c 	bl	8000278 <__aeabi_dsub>
 8007200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007204:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007208:	2300      	movs	r3, #0
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007210:	4606      	mov	r6, r0
 8007212:	460f      	mov	r7, r1
 8007214:	465b      	mov	r3, fp
 8007216:	4652      	mov	r2, sl
 8007218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800721c:	f7f9 f82c 	bl	8000278 <__aeabi_dsub>
 8007220:	4622      	mov	r2, r4
 8007222:	462b      	mov	r3, r5
 8007224:	f7f9 f9e0 	bl	80005e8 <__aeabi_dmul>
 8007228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800722c:	4680      	mov	r8, r0
 800722e:	4689      	mov	r9, r1
 8007230:	4630      	mov	r0, r6
 8007232:	4639      	mov	r1, r7
 8007234:	f7f9 f9d8 	bl	80005e8 <__aeabi_dmul>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4640      	mov	r0, r8
 800723e:	4649      	mov	r1, r9
 8007240:	f7f9 f81c 	bl	800027c <__adddf3>
 8007244:	465b      	mov	r3, fp
 8007246:	4606      	mov	r6, r0
 8007248:	460f      	mov	r7, r1
 800724a:	4652      	mov	r2, sl
 800724c:	4620      	mov	r0, r4
 800724e:	4629      	mov	r1, r5
 8007250:	f7f9 f9ca 	bl	80005e8 <__aeabi_dmul>
 8007254:	460b      	mov	r3, r1
 8007256:	4602      	mov	r2, r0
 8007258:	4680      	mov	r8, r0
 800725a:	4689      	mov	r9, r1
 800725c:	4630      	mov	r0, r6
 800725e:	4639      	mov	r1, r7
 8007260:	f7f9 f80c 	bl	800027c <__adddf3>
 8007264:	4b17      	ldr	r3, [pc, #92]	@ (80072c4 <__ieee754_pow+0x424>)
 8007266:	4299      	cmp	r1, r3
 8007268:	4604      	mov	r4, r0
 800726a:	460d      	mov	r5, r1
 800726c:	468b      	mov	fp, r1
 800726e:	f340 820b 	ble.w	8007688 <__ieee754_pow+0x7e8>
 8007272:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007276:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800727a:	4303      	orrs	r3, r0
 800727c:	f000 81ea 	beq.w	8007654 <__ieee754_pow+0x7b4>
 8007280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007284:	2200      	movs	r2, #0
 8007286:	2300      	movs	r3, #0
 8007288:	f7f9 fc20 	bl	8000acc <__aeabi_dcmplt>
 800728c:	3800      	subs	r0, #0
 800728e:	bf18      	it	ne
 8007290:	2001      	movne	r0, #1
 8007292:	e713      	b.n	80070bc <__ieee754_pow+0x21c>
 8007294:	f3af 8000 	nop.w
 8007298:	60000000 	.word	0x60000000
 800729c:	3ff71547 	.word	0x3ff71547
 80072a0:	f85ddf44 	.word	0xf85ddf44
 80072a4:	3e54ae0b 	.word	0x3e54ae0b
 80072a8:	55555555 	.word	0x55555555
 80072ac:	3fd55555 	.word	0x3fd55555
 80072b0:	652b82fe 	.word	0x652b82fe
 80072b4:	3ff71547 	.word	0x3ff71547
 80072b8:	3ff00000 	.word	0x3ff00000
 80072bc:	3fd00000 	.word	0x3fd00000
 80072c0:	3fe00000 	.word	0x3fe00000
 80072c4:	408fffff 	.word	0x408fffff
 80072c8:	4bd5      	ldr	r3, [pc, #852]	@ (8007620 <__ieee754_pow+0x780>)
 80072ca:	ea08 0303 	and.w	r3, r8, r3
 80072ce:	2200      	movs	r2, #0
 80072d0:	b92b      	cbnz	r3, 80072de <__ieee754_pow+0x43e>
 80072d2:	4bd4      	ldr	r3, [pc, #848]	@ (8007624 <__ieee754_pow+0x784>)
 80072d4:	f7f9 f988 	bl	80005e8 <__aeabi_dmul>
 80072d8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80072dc:	468b      	mov	fp, r1
 80072de:	ea4f 532b 	mov.w	r3, fp, asr #20
 80072e2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80072e6:	4413      	add	r3, r2
 80072e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80072ea:	4bcf      	ldr	r3, [pc, #828]	@ (8007628 <__ieee754_pow+0x788>)
 80072ec:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80072f0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80072f4:	459b      	cmp	fp, r3
 80072f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80072fa:	dd08      	ble.n	800730e <__ieee754_pow+0x46e>
 80072fc:	4bcb      	ldr	r3, [pc, #812]	@ (800762c <__ieee754_pow+0x78c>)
 80072fe:	459b      	cmp	fp, r3
 8007300:	f340 81a5 	ble.w	800764e <__ieee754_pow+0x7ae>
 8007304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007306:	3301      	adds	r3, #1
 8007308:	930a      	str	r3, [sp, #40]	@ 0x28
 800730a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800730e:	f04f 0a00 	mov.w	sl, #0
 8007312:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007316:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007318:	4bc5      	ldr	r3, [pc, #788]	@ (8007630 <__ieee754_pow+0x790>)
 800731a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800731e:	ed93 7b00 	vldr	d7, [r3]
 8007322:	4629      	mov	r1, r5
 8007324:	ec53 2b17 	vmov	r2, r3, d7
 8007328:	ed8d 7b06 	vstr	d7, [sp, #24]
 800732c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007330:	f7f8 ffa2 	bl	8000278 <__aeabi_dsub>
 8007334:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007338:	4606      	mov	r6, r0
 800733a:	460f      	mov	r7, r1
 800733c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007340:	f7f8 ff9c 	bl	800027c <__adddf3>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	2000      	movs	r0, #0
 800734a:	49ba      	ldr	r1, [pc, #744]	@ (8007634 <__ieee754_pow+0x794>)
 800734c:	f7f9 fa76 	bl	800083c <__aeabi_ddiv>
 8007350:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4630      	mov	r0, r6
 800735a:	4639      	mov	r1, r7
 800735c:	f7f9 f944 	bl	80005e8 <__aeabi_dmul>
 8007360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007364:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007368:	106d      	asrs	r5, r5, #1
 800736a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800736e:	f04f 0b00 	mov.w	fp, #0
 8007372:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007376:	4661      	mov	r1, ip
 8007378:	2200      	movs	r2, #0
 800737a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800737e:	4658      	mov	r0, fp
 8007380:	46e1      	mov	r9, ip
 8007382:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007386:	4614      	mov	r4, r2
 8007388:	461d      	mov	r5, r3
 800738a:	f7f9 f92d 	bl	80005e8 <__aeabi_dmul>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f8 ff6f 	bl	8000278 <__aeabi_dsub>
 800739a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800739e:	4606      	mov	r6, r0
 80073a0:	460f      	mov	r7, r1
 80073a2:	4620      	mov	r0, r4
 80073a4:	4629      	mov	r1, r5
 80073a6:	f7f8 ff67 	bl	8000278 <__aeabi_dsub>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073b2:	f7f8 ff61 	bl	8000278 <__aeabi_dsub>
 80073b6:	465a      	mov	r2, fp
 80073b8:	464b      	mov	r3, r9
 80073ba:	f7f9 f915 	bl	80005e8 <__aeabi_dmul>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4630      	mov	r0, r6
 80073c4:	4639      	mov	r1, r7
 80073c6:	f7f8 ff57 	bl	8000278 <__aeabi_dsub>
 80073ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073ce:	f7f9 f90b 	bl	80005e8 <__aeabi_dmul>
 80073d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073da:	4610      	mov	r0, r2
 80073dc:	4619      	mov	r1, r3
 80073de:	f7f9 f903 	bl	80005e8 <__aeabi_dmul>
 80073e2:	a37d      	add	r3, pc, #500	@ (adr r3, 80075d8 <__ieee754_pow+0x738>)
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	4604      	mov	r4, r0
 80073ea:	460d      	mov	r5, r1
 80073ec:	f7f9 f8fc 	bl	80005e8 <__aeabi_dmul>
 80073f0:	a37b      	add	r3, pc, #492	@ (adr r3, 80075e0 <__ieee754_pow+0x740>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f7f8 ff41 	bl	800027c <__adddf3>
 80073fa:	4622      	mov	r2, r4
 80073fc:	462b      	mov	r3, r5
 80073fe:	f7f9 f8f3 	bl	80005e8 <__aeabi_dmul>
 8007402:	a379      	add	r3, pc, #484	@ (adr r3, 80075e8 <__ieee754_pow+0x748>)
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	f7f8 ff38 	bl	800027c <__adddf3>
 800740c:	4622      	mov	r2, r4
 800740e:	462b      	mov	r3, r5
 8007410:	f7f9 f8ea 	bl	80005e8 <__aeabi_dmul>
 8007414:	a376      	add	r3, pc, #472	@ (adr r3, 80075f0 <__ieee754_pow+0x750>)
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f7f8 ff2f 	bl	800027c <__adddf3>
 800741e:	4622      	mov	r2, r4
 8007420:	462b      	mov	r3, r5
 8007422:	f7f9 f8e1 	bl	80005e8 <__aeabi_dmul>
 8007426:	a374      	add	r3, pc, #464	@ (adr r3, 80075f8 <__ieee754_pow+0x758>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	f7f8 ff26 	bl	800027c <__adddf3>
 8007430:	4622      	mov	r2, r4
 8007432:	462b      	mov	r3, r5
 8007434:	f7f9 f8d8 	bl	80005e8 <__aeabi_dmul>
 8007438:	a371      	add	r3, pc, #452	@ (adr r3, 8007600 <__ieee754_pow+0x760>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f8 ff1d 	bl	800027c <__adddf3>
 8007442:	4622      	mov	r2, r4
 8007444:	4606      	mov	r6, r0
 8007446:	460f      	mov	r7, r1
 8007448:	462b      	mov	r3, r5
 800744a:	4620      	mov	r0, r4
 800744c:	4629      	mov	r1, r5
 800744e:	f7f9 f8cb 	bl	80005e8 <__aeabi_dmul>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4630      	mov	r0, r6
 8007458:	4639      	mov	r1, r7
 800745a:	f7f9 f8c5 	bl	80005e8 <__aeabi_dmul>
 800745e:	465a      	mov	r2, fp
 8007460:	4604      	mov	r4, r0
 8007462:	460d      	mov	r5, r1
 8007464:	464b      	mov	r3, r9
 8007466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800746a:	f7f8 ff07 	bl	800027c <__adddf3>
 800746e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007472:	f7f9 f8b9 	bl	80005e8 <__aeabi_dmul>
 8007476:	4622      	mov	r2, r4
 8007478:	462b      	mov	r3, r5
 800747a:	f7f8 feff 	bl	800027c <__adddf3>
 800747e:	465a      	mov	r2, fp
 8007480:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007484:	464b      	mov	r3, r9
 8007486:	4658      	mov	r0, fp
 8007488:	4649      	mov	r1, r9
 800748a:	f7f9 f8ad 	bl	80005e8 <__aeabi_dmul>
 800748e:	4b6a      	ldr	r3, [pc, #424]	@ (8007638 <__ieee754_pow+0x798>)
 8007490:	2200      	movs	r2, #0
 8007492:	4606      	mov	r6, r0
 8007494:	460f      	mov	r7, r1
 8007496:	f7f8 fef1 	bl	800027c <__adddf3>
 800749a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800749e:	f7f8 feed 	bl	800027c <__adddf3>
 80074a2:	46d8      	mov	r8, fp
 80074a4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80074a8:	460d      	mov	r5, r1
 80074aa:	465a      	mov	r2, fp
 80074ac:	460b      	mov	r3, r1
 80074ae:	4640      	mov	r0, r8
 80074b0:	4649      	mov	r1, r9
 80074b2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80074b6:	f7f9 f897 	bl	80005e8 <__aeabi_dmul>
 80074ba:	465c      	mov	r4, fp
 80074bc:	4680      	mov	r8, r0
 80074be:	4689      	mov	r9, r1
 80074c0:	4b5d      	ldr	r3, [pc, #372]	@ (8007638 <__ieee754_pow+0x798>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	4620      	mov	r0, r4
 80074c6:	4629      	mov	r1, r5
 80074c8:	f7f8 fed6 	bl	8000278 <__aeabi_dsub>
 80074cc:	4632      	mov	r2, r6
 80074ce:	463b      	mov	r3, r7
 80074d0:	f7f8 fed2 	bl	8000278 <__aeabi_dsub>
 80074d4:	4602      	mov	r2, r0
 80074d6:	460b      	mov	r3, r1
 80074d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80074dc:	f7f8 fecc 	bl	8000278 <__aeabi_dsub>
 80074e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074e4:	f7f9 f880 	bl	80005e8 <__aeabi_dmul>
 80074e8:	4622      	mov	r2, r4
 80074ea:	4606      	mov	r6, r0
 80074ec:	460f      	mov	r7, r1
 80074ee:	462b      	mov	r3, r5
 80074f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074f4:	f7f9 f878 	bl	80005e8 <__aeabi_dmul>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4630      	mov	r0, r6
 80074fe:	4639      	mov	r1, r7
 8007500:	f7f8 febc 	bl	800027c <__adddf3>
 8007504:	4606      	mov	r6, r0
 8007506:	460f      	mov	r7, r1
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4640      	mov	r0, r8
 800750e:	4649      	mov	r1, r9
 8007510:	f7f8 feb4 	bl	800027c <__adddf3>
 8007514:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007518:	a33b      	add	r3, pc, #236	@ (adr r3, 8007608 <__ieee754_pow+0x768>)
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	4658      	mov	r0, fp
 8007520:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007524:	460d      	mov	r5, r1
 8007526:	f7f9 f85f 	bl	80005e8 <__aeabi_dmul>
 800752a:	465c      	mov	r4, fp
 800752c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007530:	4642      	mov	r2, r8
 8007532:	464b      	mov	r3, r9
 8007534:	4620      	mov	r0, r4
 8007536:	4629      	mov	r1, r5
 8007538:	f7f8 fe9e 	bl	8000278 <__aeabi_dsub>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4630      	mov	r0, r6
 8007542:	4639      	mov	r1, r7
 8007544:	f7f8 fe98 	bl	8000278 <__aeabi_dsub>
 8007548:	a331      	add	r3, pc, #196	@ (adr r3, 8007610 <__ieee754_pow+0x770>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f9 f84b 	bl	80005e8 <__aeabi_dmul>
 8007552:	a331      	add	r3, pc, #196	@ (adr r3, 8007618 <__ieee754_pow+0x778>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	4606      	mov	r6, r0
 800755a:	460f      	mov	r7, r1
 800755c:	4620      	mov	r0, r4
 800755e:	4629      	mov	r1, r5
 8007560:	f7f9 f842 	bl	80005e8 <__aeabi_dmul>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4630      	mov	r0, r6
 800756a:	4639      	mov	r1, r7
 800756c:	f7f8 fe86 	bl	800027c <__adddf3>
 8007570:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007572:	4b32      	ldr	r3, [pc, #200]	@ (800763c <__ieee754_pow+0x79c>)
 8007574:	4413      	add	r3, r2
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	f7f8 fe7f 	bl	800027c <__adddf3>
 800757e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007582:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007584:	f7f8 ffc6 	bl	8000514 <__aeabi_i2d>
 8007588:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800758a:	4b2d      	ldr	r3, [pc, #180]	@ (8007640 <__ieee754_pow+0x7a0>)
 800758c:	4413      	add	r3, r2
 800758e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007592:	4606      	mov	r6, r0
 8007594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007598:	460f      	mov	r7, r1
 800759a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800759e:	f7f8 fe6d 	bl	800027c <__adddf3>
 80075a2:	4642      	mov	r2, r8
 80075a4:	464b      	mov	r3, r9
 80075a6:	f7f8 fe69 	bl	800027c <__adddf3>
 80075aa:	4632      	mov	r2, r6
 80075ac:	463b      	mov	r3, r7
 80075ae:	f7f8 fe65 	bl	800027c <__adddf3>
 80075b2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80075b6:	4632      	mov	r2, r6
 80075b8:	463b      	mov	r3, r7
 80075ba:	4658      	mov	r0, fp
 80075bc:	460d      	mov	r5, r1
 80075be:	f7f8 fe5b 	bl	8000278 <__aeabi_dsub>
 80075c2:	4642      	mov	r2, r8
 80075c4:	464b      	mov	r3, r9
 80075c6:	f7f8 fe57 	bl	8000278 <__aeabi_dsub>
 80075ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075ce:	f7f8 fe53 	bl	8000278 <__aeabi_dsub>
 80075d2:	465c      	mov	r4, fp
 80075d4:	e036      	b.n	8007644 <__ieee754_pow+0x7a4>
 80075d6:	bf00      	nop
 80075d8:	4a454eef 	.word	0x4a454eef
 80075dc:	3fca7e28 	.word	0x3fca7e28
 80075e0:	93c9db65 	.word	0x93c9db65
 80075e4:	3fcd864a 	.word	0x3fcd864a
 80075e8:	a91d4101 	.word	0xa91d4101
 80075ec:	3fd17460 	.word	0x3fd17460
 80075f0:	518f264d 	.word	0x518f264d
 80075f4:	3fd55555 	.word	0x3fd55555
 80075f8:	db6fabff 	.word	0xdb6fabff
 80075fc:	3fdb6db6 	.word	0x3fdb6db6
 8007600:	33333303 	.word	0x33333303
 8007604:	3fe33333 	.word	0x3fe33333
 8007608:	e0000000 	.word	0xe0000000
 800760c:	3feec709 	.word	0x3feec709
 8007610:	dc3a03fd 	.word	0xdc3a03fd
 8007614:	3feec709 	.word	0x3feec709
 8007618:	145b01f5 	.word	0x145b01f5
 800761c:	be3e2fe0 	.word	0xbe3e2fe0
 8007620:	7ff00000 	.word	0x7ff00000
 8007624:	43400000 	.word	0x43400000
 8007628:	0003988e 	.word	0x0003988e
 800762c:	000bb679 	.word	0x000bb679
 8007630:	08007d30 	.word	0x08007d30
 8007634:	3ff00000 	.word	0x3ff00000
 8007638:	40080000 	.word	0x40080000
 800763c:	08007d10 	.word	0x08007d10
 8007640:	08007d20 	.word	0x08007d20
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800764c:	e5d6      	b.n	80071fc <__ieee754_pow+0x35c>
 800764e:	f04f 0a01 	mov.w	sl, #1
 8007652:	e65e      	b.n	8007312 <__ieee754_pow+0x472>
 8007654:	a3b5      	add	r3, pc, #724	@ (adr r3, 800792c <__ieee754_pow+0xa8c>)
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	4630      	mov	r0, r6
 800765c:	4639      	mov	r1, r7
 800765e:	f7f8 fe0d 	bl	800027c <__adddf3>
 8007662:	4642      	mov	r2, r8
 8007664:	e9cd 0100 	strd	r0, r1, [sp]
 8007668:	464b      	mov	r3, r9
 800766a:	4620      	mov	r0, r4
 800766c:	4629      	mov	r1, r5
 800766e:	f7f8 fe03 	bl	8000278 <__aeabi_dsub>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	e9dd 0100 	ldrd	r0, r1, [sp]
 800767a:	f7f9 fa45 	bl	8000b08 <__aeabi_dcmpgt>
 800767e:	2800      	cmp	r0, #0
 8007680:	f47f adfe 	bne.w	8007280 <__ieee754_pow+0x3e0>
 8007684:	4ba2      	ldr	r3, [pc, #648]	@ (8007910 <__ieee754_pow+0xa70>)
 8007686:	e022      	b.n	80076ce <__ieee754_pow+0x82e>
 8007688:	4ca2      	ldr	r4, [pc, #648]	@ (8007914 <__ieee754_pow+0xa74>)
 800768a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800768e:	42a3      	cmp	r3, r4
 8007690:	d919      	bls.n	80076c6 <__ieee754_pow+0x826>
 8007692:	4ba1      	ldr	r3, [pc, #644]	@ (8007918 <__ieee754_pow+0xa78>)
 8007694:	440b      	add	r3, r1
 8007696:	4303      	orrs	r3, r0
 8007698:	d009      	beq.n	80076ae <__ieee754_pow+0x80e>
 800769a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	2300      	movs	r3, #0
 80076a2:	f7f9 fa13 	bl	8000acc <__aeabi_dcmplt>
 80076a6:	3800      	subs	r0, #0
 80076a8:	bf18      	it	ne
 80076aa:	2001      	movne	r0, #1
 80076ac:	e512      	b.n	80070d4 <__ieee754_pow+0x234>
 80076ae:	4642      	mov	r2, r8
 80076b0:	464b      	mov	r3, r9
 80076b2:	f7f8 fde1 	bl	8000278 <__aeabi_dsub>
 80076b6:	4632      	mov	r2, r6
 80076b8:	463b      	mov	r3, r7
 80076ba:	f7f9 fa1b 	bl	8000af4 <__aeabi_dcmpge>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d1eb      	bne.n	800769a <__ieee754_pow+0x7fa>
 80076c2:	4b96      	ldr	r3, [pc, #600]	@ (800791c <__ieee754_pow+0xa7c>)
 80076c4:	e003      	b.n	80076ce <__ieee754_pow+0x82e>
 80076c6:	4a96      	ldr	r2, [pc, #600]	@ (8007920 <__ieee754_pow+0xa80>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	f240 80e7 	bls.w	800789c <__ieee754_pow+0x9fc>
 80076ce:	151b      	asrs	r3, r3, #20
 80076d0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80076d4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80076d8:	fa4a fa03 	asr.w	sl, sl, r3
 80076dc:	44da      	add	sl, fp
 80076de:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80076e2:	4890      	ldr	r0, [pc, #576]	@ (8007924 <__ieee754_pow+0xa84>)
 80076e4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80076e8:	4108      	asrs	r0, r1
 80076ea:	ea00 030a 	and.w	r3, r0, sl
 80076ee:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80076f2:	f1c1 0114 	rsb	r1, r1, #20
 80076f6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80076fa:	fa4a fa01 	asr.w	sl, sl, r1
 80076fe:	f1bb 0f00 	cmp.w	fp, #0
 8007702:	4640      	mov	r0, r8
 8007704:	4649      	mov	r1, r9
 8007706:	f04f 0200 	mov.w	r2, #0
 800770a:	bfb8      	it	lt
 800770c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007710:	f7f8 fdb2 	bl	8000278 <__aeabi_dsub>
 8007714:	4680      	mov	r8, r0
 8007716:	4689      	mov	r9, r1
 8007718:	4632      	mov	r2, r6
 800771a:	463b      	mov	r3, r7
 800771c:	4640      	mov	r0, r8
 800771e:	4649      	mov	r1, r9
 8007720:	f7f8 fdac 	bl	800027c <__adddf3>
 8007724:	2400      	movs	r4, #0
 8007726:	a36a      	add	r3, pc, #424	@ (adr r3, 80078d0 <__ieee754_pow+0xa30>)
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	4620      	mov	r0, r4
 800772e:	460d      	mov	r5, r1
 8007730:	f7f8 ff5a 	bl	80005e8 <__aeabi_dmul>
 8007734:	4642      	mov	r2, r8
 8007736:	e9cd 0100 	strd	r0, r1, [sp]
 800773a:	464b      	mov	r3, r9
 800773c:	4620      	mov	r0, r4
 800773e:	4629      	mov	r1, r5
 8007740:	f7f8 fd9a 	bl	8000278 <__aeabi_dsub>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4630      	mov	r0, r6
 800774a:	4639      	mov	r1, r7
 800774c:	f7f8 fd94 	bl	8000278 <__aeabi_dsub>
 8007750:	a361      	add	r3, pc, #388	@ (adr r3, 80078d8 <__ieee754_pow+0xa38>)
 8007752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007756:	f7f8 ff47 	bl	80005e8 <__aeabi_dmul>
 800775a:	a361      	add	r3, pc, #388	@ (adr r3, 80078e0 <__ieee754_pow+0xa40>)
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	4680      	mov	r8, r0
 8007762:	4689      	mov	r9, r1
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f8 ff3e 	bl	80005e8 <__aeabi_dmul>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	4640      	mov	r0, r8
 8007772:	4649      	mov	r1, r9
 8007774:	f7f8 fd82 	bl	800027c <__adddf3>
 8007778:	4604      	mov	r4, r0
 800777a:	460d      	mov	r5, r1
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007784:	f7f8 fd7a 	bl	800027c <__adddf3>
 8007788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800778c:	4680      	mov	r8, r0
 800778e:	4689      	mov	r9, r1
 8007790:	f7f8 fd72 	bl	8000278 <__aeabi_dsub>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4620      	mov	r0, r4
 800779a:	4629      	mov	r1, r5
 800779c:	f7f8 fd6c 	bl	8000278 <__aeabi_dsub>
 80077a0:	4642      	mov	r2, r8
 80077a2:	4606      	mov	r6, r0
 80077a4:	460f      	mov	r7, r1
 80077a6:	464b      	mov	r3, r9
 80077a8:	4640      	mov	r0, r8
 80077aa:	4649      	mov	r1, r9
 80077ac:	f7f8 ff1c 	bl	80005e8 <__aeabi_dmul>
 80077b0:	a34d      	add	r3, pc, #308	@ (adr r3, 80078e8 <__ieee754_pow+0xa48>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	4604      	mov	r4, r0
 80077b8:	460d      	mov	r5, r1
 80077ba:	f7f8 ff15 	bl	80005e8 <__aeabi_dmul>
 80077be:	a34c      	add	r3, pc, #304	@ (adr r3, 80078f0 <__ieee754_pow+0xa50>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	f7f8 fd58 	bl	8000278 <__aeabi_dsub>
 80077c8:	4622      	mov	r2, r4
 80077ca:	462b      	mov	r3, r5
 80077cc:	f7f8 ff0c 	bl	80005e8 <__aeabi_dmul>
 80077d0:	a349      	add	r3, pc, #292	@ (adr r3, 80078f8 <__ieee754_pow+0xa58>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f7f8 fd51 	bl	800027c <__adddf3>
 80077da:	4622      	mov	r2, r4
 80077dc:	462b      	mov	r3, r5
 80077de:	f7f8 ff03 	bl	80005e8 <__aeabi_dmul>
 80077e2:	a347      	add	r3, pc, #284	@ (adr r3, 8007900 <__ieee754_pow+0xa60>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	f7f8 fd46 	bl	8000278 <__aeabi_dsub>
 80077ec:	4622      	mov	r2, r4
 80077ee:	462b      	mov	r3, r5
 80077f0:	f7f8 fefa 	bl	80005e8 <__aeabi_dmul>
 80077f4:	a344      	add	r3, pc, #272	@ (adr r3, 8007908 <__ieee754_pow+0xa68>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f7f8 fd3f 	bl	800027c <__adddf3>
 80077fe:	4622      	mov	r2, r4
 8007800:	462b      	mov	r3, r5
 8007802:	f7f8 fef1 	bl	80005e8 <__aeabi_dmul>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	4640      	mov	r0, r8
 800780c:	4649      	mov	r1, r9
 800780e:	f7f8 fd33 	bl	8000278 <__aeabi_dsub>
 8007812:	4604      	mov	r4, r0
 8007814:	460d      	mov	r5, r1
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4640      	mov	r0, r8
 800781c:	4649      	mov	r1, r9
 800781e:	f7f8 fee3 	bl	80005e8 <__aeabi_dmul>
 8007822:	2200      	movs	r2, #0
 8007824:	e9cd 0100 	strd	r0, r1, [sp]
 8007828:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	f7f8 fd22 	bl	8000278 <__aeabi_dsub>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800783c:	f7f8 fffe 	bl	800083c <__aeabi_ddiv>
 8007840:	4632      	mov	r2, r6
 8007842:	4604      	mov	r4, r0
 8007844:	460d      	mov	r5, r1
 8007846:	463b      	mov	r3, r7
 8007848:	4640      	mov	r0, r8
 800784a:	4649      	mov	r1, r9
 800784c:	f7f8 fecc 	bl	80005e8 <__aeabi_dmul>
 8007850:	4632      	mov	r2, r6
 8007852:	463b      	mov	r3, r7
 8007854:	f7f8 fd12 	bl	800027c <__adddf3>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	f7f8 fd0a 	bl	8000278 <__aeabi_dsub>
 8007864:	4642      	mov	r2, r8
 8007866:	464b      	mov	r3, r9
 8007868:	f7f8 fd06 	bl	8000278 <__aeabi_dsub>
 800786c:	460b      	mov	r3, r1
 800786e:	4602      	mov	r2, r0
 8007870:	492d      	ldr	r1, [pc, #180]	@ (8007928 <__ieee754_pow+0xa88>)
 8007872:	2000      	movs	r0, #0
 8007874:	f7f8 fd00 	bl	8000278 <__aeabi_dsub>
 8007878:	ec41 0b10 	vmov	d0, r0, r1
 800787c:	ee10 3a90 	vmov	r3, s1
 8007880:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007884:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007888:	da0b      	bge.n	80078a2 <__ieee754_pow+0xa02>
 800788a:	4650      	mov	r0, sl
 800788c:	f000 f898 	bl	80079c0 <scalbn>
 8007890:	ec51 0b10 	vmov	r0, r1, d0
 8007894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007898:	f7ff bb6d 	b.w	8006f76 <__ieee754_pow+0xd6>
 800789c:	f8dd a010 	ldr.w	sl, [sp, #16]
 80078a0:	e73a      	b.n	8007718 <__ieee754_pow+0x878>
 80078a2:	ec51 0b10 	vmov	r0, r1, d0
 80078a6:	4619      	mov	r1, r3
 80078a8:	e7f4      	b.n	8007894 <__ieee754_pow+0x9f4>
 80078aa:	491f      	ldr	r1, [pc, #124]	@ (8007928 <__ieee754_pow+0xa88>)
 80078ac:	2000      	movs	r0, #0
 80078ae:	f7ff bb14 	b.w	8006eda <__ieee754_pow+0x3a>
 80078b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078b6:	f7ff bb10 	b.w	8006eda <__ieee754_pow+0x3a>
 80078ba:	4630      	mov	r0, r6
 80078bc:	4639      	mov	r1, r7
 80078be:	f7ff bb0c 	b.w	8006eda <__ieee754_pow+0x3a>
 80078c2:	460c      	mov	r4, r1
 80078c4:	f7ff bb69 	b.w	8006f9a <__ieee754_pow+0xfa>
 80078c8:	2400      	movs	r4, #0
 80078ca:	f7ff bb4b 	b.w	8006f64 <__ieee754_pow+0xc4>
 80078ce:	bf00      	nop
 80078d0:	00000000 	.word	0x00000000
 80078d4:	3fe62e43 	.word	0x3fe62e43
 80078d8:	fefa39ef 	.word	0xfefa39ef
 80078dc:	3fe62e42 	.word	0x3fe62e42
 80078e0:	0ca86c39 	.word	0x0ca86c39
 80078e4:	be205c61 	.word	0xbe205c61
 80078e8:	72bea4d0 	.word	0x72bea4d0
 80078ec:	3e663769 	.word	0x3e663769
 80078f0:	c5d26bf1 	.word	0xc5d26bf1
 80078f4:	3ebbbd41 	.word	0x3ebbbd41
 80078f8:	af25de2c 	.word	0xaf25de2c
 80078fc:	3f11566a 	.word	0x3f11566a
 8007900:	16bebd93 	.word	0x16bebd93
 8007904:	3f66c16c 	.word	0x3f66c16c
 8007908:	5555553e 	.word	0x5555553e
 800790c:	3fc55555 	.word	0x3fc55555
 8007910:	40900000 	.word	0x40900000
 8007914:	4090cbff 	.word	0x4090cbff
 8007918:	3f6f3400 	.word	0x3f6f3400
 800791c:	4090cc00 	.word	0x4090cc00
 8007920:	3fe00000 	.word	0x3fe00000
 8007924:	fff00000 	.word	0xfff00000
 8007928:	3ff00000 	.word	0x3ff00000
 800792c:	652b82fe 	.word	0x652b82fe
 8007930:	3c971547 	.word	0x3c971547

08007934 <with_errno>:
 8007934:	b510      	push	{r4, lr}
 8007936:	ed2d 8b02 	vpush	{d8}
 800793a:	eeb0 8a40 	vmov.f32	s16, s0
 800793e:	eef0 8a60 	vmov.f32	s17, s1
 8007942:	4604      	mov	r4, r0
 8007944:	f7fe fdb8 	bl	80064b8 <__errno>
 8007948:	eeb0 0a48 	vmov.f32	s0, s16
 800794c:	eef0 0a68 	vmov.f32	s1, s17
 8007950:	ecbd 8b02 	vpop	{d8}
 8007954:	6004      	str	r4, [r0, #0]
 8007956:	bd10      	pop	{r4, pc}

08007958 <xflow>:
 8007958:	4603      	mov	r3, r0
 800795a:	b507      	push	{r0, r1, r2, lr}
 800795c:	ec51 0b10 	vmov	r0, r1, d0
 8007960:	b183      	cbz	r3, 8007984 <xflow+0x2c>
 8007962:	4602      	mov	r2, r0
 8007964:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007968:	e9cd 2300 	strd	r2, r3, [sp]
 800796c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007970:	f7f8 fe3a 	bl	80005e8 <__aeabi_dmul>
 8007974:	ec41 0b10 	vmov	d0, r0, r1
 8007978:	2022      	movs	r0, #34	@ 0x22
 800797a:	b003      	add	sp, #12
 800797c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007980:	f7ff bfd8 	b.w	8007934 <with_errno>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	e7ee      	b.n	8007968 <xflow+0x10>
 800798a:	0000      	movs	r0, r0
 800798c:	0000      	movs	r0, r0
	...

08007990 <__math_uflow>:
 8007990:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007998 <__math_uflow+0x8>
 8007994:	f7ff bfe0 	b.w	8007958 <xflow>
 8007998:	00000000 	.word	0x00000000
 800799c:	10000000 	.word	0x10000000

080079a0 <__math_oflow>:
 80079a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80079a8 <__math_oflow+0x8>
 80079a4:	f7ff bfd8 	b.w	8007958 <xflow>
 80079a8:	00000000 	.word	0x00000000
 80079ac:	70000000 	.word	0x70000000

080079b0 <fabs>:
 80079b0:	ec51 0b10 	vmov	r0, r1, d0
 80079b4:	4602      	mov	r2, r0
 80079b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80079ba:	ec43 2b10 	vmov	d0, r2, r3
 80079be:	4770      	bx	lr

080079c0 <scalbn>:
 80079c0:	b570      	push	{r4, r5, r6, lr}
 80079c2:	ec55 4b10 	vmov	r4, r5, d0
 80079c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80079ca:	4606      	mov	r6, r0
 80079cc:	462b      	mov	r3, r5
 80079ce:	b991      	cbnz	r1, 80079f6 <scalbn+0x36>
 80079d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80079d4:	4323      	orrs	r3, r4
 80079d6:	d03b      	beq.n	8007a50 <scalbn+0x90>
 80079d8:	4b33      	ldr	r3, [pc, #204]	@ (8007aa8 <scalbn+0xe8>)
 80079da:	4620      	mov	r0, r4
 80079dc:	4629      	mov	r1, r5
 80079de:	2200      	movs	r2, #0
 80079e0:	f7f8 fe02 	bl	80005e8 <__aeabi_dmul>
 80079e4:	4b31      	ldr	r3, [pc, #196]	@ (8007aac <scalbn+0xec>)
 80079e6:	429e      	cmp	r6, r3
 80079e8:	4604      	mov	r4, r0
 80079ea:	460d      	mov	r5, r1
 80079ec:	da0f      	bge.n	8007a0e <scalbn+0x4e>
 80079ee:	a326      	add	r3, pc, #152	@ (adr r3, 8007a88 <scalbn+0xc8>)
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	e01e      	b.n	8007a34 <scalbn+0x74>
 80079f6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80079fa:	4291      	cmp	r1, r2
 80079fc:	d10b      	bne.n	8007a16 <scalbn+0x56>
 80079fe:	4622      	mov	r2, r4
 8007a00:	4620      	mov	r0, r4
 8007a02:	4629      	mov	r1, r5
 8007a04:	f7f8 fc3a 	bl	800027c <__adddf3>
 8007a08:	4604      	mov	r4, r0
 8007a0a:	460d      	mov	r5, r1
 8007a0c:	e020      	b.n	8007a50 <scalbn+0x90>
 8007a0e:	460b      	mov	r3, r1
 8007a10:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007a14:	3936      	subs	r1, #54	@ 0x36
 8007a16:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007a1a:	4296      	cmp	r6, r2
 8007a1c:	dd0d      	ble.n	8007a3a <scalbn+0x7a>
 8007a1e:	2d00      	cmp	r5, #0
 8007a20:	a11b      	add	r1, pc, #108	@ (adr r1, 8007a90 <scalbn+0xd0>)
 8007a22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a26:	da02      	bge.n	8007a2e <scalbn+0x6e>
 8007a28:	a11b      	add	r1, pc, #108	@ (adr r1, 8007a98 <scalbn+0xd8>)
 8007a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a2e:	a318      	add	r3, pc, #96	@ (adr r3, 8007a90 <scalbn+0xd0>)
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	f7f8 fdd8 	bl	80005e8 <__aeabi_dmul>
 8007a38:	e7e6      	b.n	8007a08 <scalbn+0x48>
 8007a3a:	1872      	adds	r2, r6, r1
 8007a3c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007a40:	428a      	cmp	r2, r1
 8007a42:	dcec      	bgt.n	8007a1e <scalbn+0x5e>
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	dd06      	ble.n	8007a56 <scalbn+0x96>
 8007a48:	f36f 531e 	bfc	r3, #20, #11
 8007a4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a50:	ec45 4b10 	vmov	d0, r4, r5
 8007a54:	bd70      	pop	{r4, r5, r6, pc}
 8007a56:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007a5a:	da08      	bge.n	8007a6e <scalbn+0xae>
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	a10a      	add	r1, pc, #40	@ (adr r1, 8007a88 <scalbn+0xc8>)
 8007a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a64:	dac3      	bge.n	80079ee <scalbn+0x2e>
 8007a66:	a10e      	add	r1, pc, #56	@ (adr r1, 8007aa0 <scalbn+0xe0>)
 8007a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a6c:	e7bf      	b.n	80079ee <scalbn+0x2e>
 8007a6e:	3236      	adds	r2, #54	@ 0x36
 8007a70:	f36f 531e 	bfc	r3, #20, #11
 8007a74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a78:	4620      	mov	r0, r4
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <scalbn+0xf0>)
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	2200      	movs	r2, #0
 8007a80:	e7d8      	b.n	8007a34 <scalbn+0x74>
 8007a82:	bf00      	nop
 8007a84:	f3af 8000 	nop.w
 8007a88:	c2f8f359 	.word	0xc2f8f359
 8007a8c:	01a56e1f 	.word	0x01a56e1f
 8007a90:	8800759c 	.word	0x8800759c
 8007a94:	7e37e43c 	.word	0x7e37e43c
 8007a98:	8800759c 	.word	0x8800759c
 8007a9c:	fe37e43c 	.word	0xfe37e43c
 8007aa0:	c2f8f359 	.word	0xc2f8f359
 8007aa4:	81a56e1f 	.word	0x81a56e1f
 8007aa8:	43500000 	.word	0x43500000
 8007aac:	ffff3cb0 	.word	0xffff3cb0
 8007ab0:	3c900000 	.word	0x3c900000

08007ab4 <__ieee754_sqrt>:
 8007ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	4a66      	ldr	r2, [pc, #408]	@ (8007c54 <__ieee754_sqrt+0x1a0>)
 8007aba:	ec55 4b10 	vmov	r4, r5, d0
 8007abe:	43aa      	bics	r2, r5
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	d110      	bne.n	8007ae8 <__ieee754_sqrt+0x34>
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	4620      	mov	r0, r4
 8007aca:	4629      	mov	r1, r5
 8007acc:	f7f8 fd8c 	bl	80005e8 <__aeabi_dmul>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	f7f8 fbd0 	bl	800027c <__adddf3>
 8007adc:	4604      	mov	r4, r0
 8007ade:	460d      	mov	r5, r1
 8007ae0:	ec45 4b10 	vmov	d0, r4, r5
 8007ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	dc0e      	bgt.n	8007b0a <__ieee754_sqrt+0x56>
 8007aec:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007af0:	4322      	orrs	r2, r4
 8007af2:	d0f5      	beq.n	8007ae0 <__ieee754_sqrt+0x2c>
 8007af4:	b19d      	cbz	r5, 8007b1e <__ieee754_sqrt+0x6a>
 8007af6:	4622      	mov	r2, r4
 8007af8:	4620      	mov	r0, r4
 8007afa:	4629      	mov	r1, r5
 8007afc:	f7f8 fbbc 	bl	8000278 <__aeabi_dsub>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	f7f8 fe9a 	bl	800083c <__aeabi_ddiv>
 8007b08:	e7e8      	b.n	8007adc <__ieee754_sqrt+0x28>
 8007b0a:	152a      	asrs	r2, r5, #20
 8007b0c:	d115      	bne.n	8007b3a <__ieee754_sqrt+0x86>
 8007b0e:	2000      	movs	r0, #0
 8007b10:	e009      	b.n	8007b26 <__ieee754_sqrt+0x72>
 8007b12:	0acb      	lsrs	r3, r1, #11
 8007b14:	3a15      	subs	r2, #21
 8007b16:	0549      	lsls	r1, r1, #21
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0fa      	beq.n	8007b12 <__ieee754_sqrt+0x5e>
 8007b1c:	e7f7      	b.n	8007b0e <__ieee754_sqrt+0x5a>
 8007b1e:	462a      	mov	r2, r5
 8007b20:	e7fa      	b.n	8007b18 <__ieee754_sqrt+0x64>
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	3001      	adds	r0, #1
 8007b26:	02dc      	lsls	r4, r3, #11
 8007b28:	d5fb      	bpl.n	8007b22 <__ieee754_sqrt+0x6e>
 8007b2a:	1e44      	subs	r4, r0, #1
 8007b2c:	1b12      	subs	r2, r2, r4
 8007b2e:	f1c0 0420 	rsb	r4, r0, #32
 8007b32:	fa21 f404 	lsr.w	r4, r1, r4
 8007b36:	4323      	orrs	r3, r4
 8007b38:	4081      	lsls	r1, r0
 8007b3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b3e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b46:	07d2      	lsls	r2, r2, #31
 8007b48:	bf5c      	itt	pl
 8007b4a:	005b      	lslpl	r3, r3, #1
 8007b4c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b54:	bf58      	it	pl
 8007b56:	0049      	lslpl	r1, r1, #1
 8007b58:	2600      	movs	r6, #0
 8007b5a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007b5e:	107f      	asrs	r7, r7, #1
 8007b60:	0049      	lsls	r1, r1, #1
 8007b62:	2016      	movs	r0, #22
 8007b64:	4632      	mov	r2, r6
 8007b66:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007b6a:	1915      	adds	r5, r2, r4
 8007b6c:	429d      	cmp	r5, r3
 8007b6e:	bfde      	ittt	le
 8007b70:	192a      	addle	r2, r5, r4
 8007b72:	1b5b      	suble	r3, r3, r5
 8007b74:	1936      	addle	r6, r6, r4
 8007b76:	0fcd      	lsrs	r5, r1, #31
 8007b78:	3801      	subs	r0, #1
 8007b7a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007b7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007b82:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007b86:	d1f0      	bne.n	8007b6a <__ieee754_sqrt+0xb6>
 8007b88:	4605      	mov	r5, r0
 8007b8a:	2420      	movs	r4, #32
 8007b8c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007b90:	4293      	cmp	r3, r2
 8007b92:	eb0c 0e00 	add.w	lr, ip, r0
 8007b96:	dc02      	bgt.n	8007b9e <__ieee754_sqrt+0xea>
 8007b98:	d113      	bne.n	8007bc2 <__ieee754_sqrt+0x10e>
 8007b9a:	458e      	cmp	lr, r1
 8007b9c:	d811      	bhi.n	8007bc2 <__ieee754_sqrt+0x10e>
 8007b9e:	f1be 0f00 	cmp.w	lr, #0
 8007ba2:	eb0e 000c 	add.w	r0, lr, ip
 8007ba6:	da3f      	bge.n	8007c28 <__ieee754_sqrt+0x174>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	db3d      	blt.n	8007c28 <__ieee754_sqrt+0x174>
 8007bac:	f102 0801 	add.w	r8, r2, #1
 8007bb0:	1a9b      	subs	r3, r3, r2
 8007bb2:	458e      	cmp	lr, r1
 8007bb4:	bf88      	it	hi
 8007bb6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8007bba:	eba1 010e 	sub.w	r1, r1, lr
 8007bbe:	4465      	add	r5, ip
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007bc6:	3c01      	subs	r4, #1
 8007bc8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007bcc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007bd0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007bd4:	d1dc      	bne.n	8007b90 <__ieee754_sqrt+0xdc>
 8007bd6:	4319      	orrs	r1, r3
 8007bd8:	d01b      	beq.n	8007c12 <__ieee754_sqrt+0x15e>
 8007bda:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8007c58 <__ieee754_sqrt+0x1a4>
 8007bde:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8007c5c <__ieee754_sqrt+0x1a8>
 8007be2:	e9da 0100 	ldrd	r0, r1, [sl]
 8007be6:	e9db 2300 	ldrd	r2, r3, [fp]
 8007bea:	f7f8 fb45 	bl	8000278 <__aeabi_dsub>
 8007bee:	e9da 8900 	ldrd	r8, r9, [sl]
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4640      	mov	r0, r8
 8007bf8:	4649      	mov	r1, r9
 8007bfa:	f7f8 ff71 	bl	8000ae0 <__aeabi_dcmple>
 8007bfe:	b140      	cbz	r0, 8007c12 <__ieee754_sqrt+0x15e>
 8007c00:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8007c04:	e9da 0100 	ldrd	r0, r1, [sl]
 8007c08:	e9db 2300 	ldrd	r2, r3, [fp]
 8007c0c:	d10e      	bne.n	8007c2c <__ieee754_sqrt+0x178>
 8007c0e:	3601      	adds	r6, #1
 8007c10:	4625      	mov	r5, r4
 8007c12:	1073      	asrs	r3, r6, #1
 8007c14:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c18:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007c1c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8007c20:	086b      	lsrs	r3, r5, #1
 8007c22:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8007c26:	e759      	b.n	8007adc <__ieee754_sqrt+0x28>
 8007c28:	4690      	mov	r8, r2
 8007c2a:	e7c1      	b.n	8007bb0 <__ieee754_sqrt+0xfc>
 8007c2c:	f7f8 fb26 	bl	800027c <__adddf3>
 8007c30:	e9da 8900 	ldrd	r8, r9, [sl]
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4640      	mov	r0, r8
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	f7f8 ff46 	bl	8000acc <__aeabi_dcmplt>
 8007c40:	b120      	cbz	r0, 8007c4c <__ieee754_sqrt+0x198>
 8007c42:	1cab      	adds	r3, r5, #2
 8007c44:	bf08      	it	eq
 8007c46:	3601      	addeq	r6, #1
 8007c48:	3502      	adds	r5, #2
 8007c4a:	e7e2      	b.n	8007c12 <__ieee754_sqrt+0x15e>
 8007c4c:	1c6b      	adds	r3, r5, #1
 8007c4e:	f023 0501 	bic.w	r5, r3, #1
 8007c52:	e7de      	b.n	8007c12 <__ieee754_sqrt+0x15e>
 8007c54:	7ff00000 	.word	0x7ff00000
 8007c58:	08007d48 	.word	0x08007d48
 8007c5c:	08007d40 	.word	0x08007d40

08007c60 <_init>:
 8007c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c62:	bf00      	nop
 8007c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c66:	bc08      	pop	{r3}
 8007c68:	469e      	mov	lr, r3
 8007c6a:	4770      	bx	lr

08007c6c <_fini>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	bf00      	nop
 8007c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c72:	bc08      	pop	{r3}
 8007c74:	469e      	mov	lr, r3
 8007c76:	4770      	bx	lr
